if (nexacro.Browser != "Runtime")
{

function ajax(options) {
    options = {
        type: options.type || "POST",
        url: options.url || "",
        timeout: options.timeout || 60000,
        onComplete: options.onComplete || function() {},
        onError: options.onError || function() {},
        onSuccess: options.onSuccess || function() {},
        reqdata: options.reqdata || "",
        datatype: options.datatype || "",
        exportseq: ""
    };
    if (typeof XMLHttpRequest == "undefined") {
        XMLHttpRequest = function() {
            return new ActiveXObject(navigator.userAgent.indexOf("MSIE 5") >= 0 ? "Microsoft.XMLHTTP" : "Msxml2.XMLHTTP");
        };
    }
    var xml = new XMLHttpRequest();
    if (options.type == "POST") {
        xml.open(options.type, options.url, true);
    } else if (options.type == "GET") {
        xml.open(options.type, options.url + ((options.reqdata !== "") ? "?" + serialize(options.reqdata) : ""), true);
    }
    var timeoutLength = options.timeout;
    var requestDone = false;
    setTimeout(function() {
        requestDone = true;
    }, timeoutLength);
    xml.onreadystatechange = function() {
        if (xml.readyState == 4 && !requestDone) {
            if (xml.responseText.indexOf("ER0") != 0 && httpSuccess(xml)) {
                options.exportseq = xml.getResponseHeader("exportseq");
                options.onSuccess(httpData(xml, options.datatype));
            } else {
                options.onError(xml.responseText);
            }
            options.onComplete();
            xml = null;
        }
    };
    if (options.type == "POST") {
        xml.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xml.send(serialize(options.reqdata));
    } else {
        xml.send();
    }

    function httpSuccess(r) {
        try {
            return (!r.status && location.protocol == "file:") || (r.status >= 200 && r.status < 300) || r.satus == 304 || navigator.userAgent.indexOf("Safari") >= 0 && typeof r.status == "undefined;";
        } catch (e) {}
        return false;
    }

    function httpData(r, type) {
        var ct = r.getResponseHeader("content-type");
        var data = !type && ct && ct.indexOf("xml") >= 0;
        data = type == "xml" || data ? r.responseXML : r.responseText;
        if (type == "script") eval.call(window, data);
        return data;
    }

    function serialize(a) {
        var s = [];
        if (a.constructor == Array) {
            for (var i = 0; i < a.length; i++) s.push(a[i].name + "=" + encodeURIComponent(a[i].value));
        } else {
            for (var j in a) s.push(j + "=" + encodeURIComponent(a[j]));
        }
        return s.join("&");
    }
}

function getStyle(elem, name) {
    if (elem.style[name]) return elem.style[name];
    else if (elem.currentStyle) return elem.currentStyle[name];
    else if (document.defaultView && document.defaultView.getComputedStyle) {
        name = name.replace(/(A-Z)/g, "-$1");
        name = name.toLowerCase();
        var s = document.defaultView.getComputedStyle(elem, "");
        return s && s.getPropertyValue(name);
    } else return null;
}

function pageX(elem) {
    var p = 0;
    while (elem.offsetParent) {
        p += elem.offsetLeft;
        elem = elem.offsetParent;
    }
    return p;
}

function pageY(elem) {
    var p = 0;
    while (elem.offsetParent) {
        p += elem.offsetTop;
        elem = elem.offsetParent;
    }
    return p;
}

function parentX(elem) {
    return elem.parentNode == elem.offsetParent ? elem.offsetLeft : pageX(elem) - pageX(elem.parentNode);
}

function parentY(elem) {
    return elem.parentNode == elem.offsetParent ? elem.offsetTop : pageY(elem) - pageY(elem.parentNode);
}

function posX(elem) {
    return parseInt(getStyle(elem, "left"));
}

function posY(elem) {
    return parseInt(getStyle(elem, "top"));
}

function setX(elem, pos) {
    elem.style.left = pos + "px";
}

function setY(elem, pos) {
    elem.style.top = pos + "px";
}

function addX(elem, pos) {
    setX(posX(elem) + pos);
}

function addY(elem, pos) {
    setY(posY(elem) + pos);
}

function getHeight(elem) {
    return parseInt(getStyle(elem, 'height'));
}

function getWidth(elem) {
    return parseInt(getStyle(elem, 'width'));
}

function resetCSS(elem, prop) {
    var old = {};
    for (var i in prop) {
        old[i] = elem.style[i];
        elem.style[i] = prop[i];
    }
    return old;
}

function restoreCSS(elem, prop) {
    for (var i in prop) {
        elem.style[i] = prop[i];
    }
}

function hide(elem) {
    var curDisplay = getStyle(elem, 'display');
    if (curDisplay != 'none') elem.$oldDisplay = curDisplay;
    elem.style.display = 'none';
}

function show(elem) {
    elem.style.display = elem.$oldDisplay || 'block';
}

function setOpacity(elem, level) {
    if (elem.filters) elem.filters.alpha.opacity = level;
    else elem.style.opacity = level / 100;
}

function getX(e) {
    e = e || window.event;
    return e.pageX || e.clientX + document.body.scrollLeft || 0;
}

function getY(e) {
    e = e || window.event;
    return e.pageY || e.clientY + document.body.scrollTop || 0;
}

function getElementX(e) {
    return (e && e.layerX) || window.event.offsetX;
}

function getElementY(e) {
    return (e && e.layerY) || window.event.offsetY;
}

function pageHeight() {
    return document.body.scrollHeight;
}

function pageWidth() {
    return document.body.scrollWidth;
}

function scrollX() {
    var de = document.documentElement;
    return self.pageXOffset || (de && de.scrollLeft) || document.body.scrollLeft;
}

function scrollY() {
    var de = document.documentElement;
    return self.pageYOffset || (de && de.scrollTop) || document.body.scrollTop;
}

function windowHeight() {
    var de = document.documentElement;
    return self.innerHeight || (de && de.clientHeight) || document.body.clientHeight;
}

function windowWidth() {
    var de = document.documentElement;
    return self.innerWidth || (de && de.clientWidth) || document.body.clientWidth;
}
var _UBI_REPORT_VERSION_NO = "2.5";
var _UBI_REPORT_BUILD_NO = "Build 2.502.1506.1801";
//var _UBI_REPORT_BUILD_NO = "Build 2.502.1408.2201";
var Base = function() {};
Base.extend = function(_instance, _static) {
    var extend = Base.prototype.extend;
    Base._prototyping = true;
    var proto = new this;
    extend.call(proto, _instance);
    delete Base._prototyping;
    var constructor = proto.constructor;
    var klass = proto.constructor = function() {
        if (!Base._prototyping) {
            if (this._constructing || this.constructor == klass) {
                this._constructing = true;
                constructor.apply(this, arguments);
                delete this._constructing;
            } else if (arguments[0] != null) {
                return (arguments[0].extend || extend).call(arguments[0], proto);
            }
        }
    };
    klass.ancestor = this;
    klass.extend = this.extend;
    klass.forEach = this.forEach;
    klass.implement = this.implement;
    klass.prototype = proto;
    klass.toString = this.toString;
    klass.valueOf = function(type) {
        return (type == "object") ? klass : constructor.valueOf();
    };
    extend.call(klass, _static);
    if (typeof klass.init == "function") klass.init();
    return klass;
};
Base.prototype = {
    extend: function(source, value) {
        if (arguments.length > 1) {
            var ancestor = this[source];
            if (ancestor && (typeof value == "function") && (!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) && /\bbase\b/.test(value)) {
                var method = value.valueOf();
                value = function() {
                    var previous = this.base || Base.prototype.base;
                    this.base = ancestor;
                    var returnValue = method.apply(this, arguments);
                    this.base = previous;
                    return returnValue;
                };
                value.valueOf = function(type) {
                    return (type == "object") ? value : method;
                };
                value.toString = Base.toString;
            }
            this[source] = value;
        } else if (source) {
            var extend = Base.prototype.extend;
            if (!Base._prototyping && typeof this != "function") {
                extend = this.extend || extend;
            }
            var proto = {
                toSource: null
            };
            var hidden = ["constructor", "toString", "valueOf"];
            var i = Base._prototyping ? 0 : 1;
            while (key = hidden[i++]) {
                if (source[key] != proto[key]) {
                    extend.call(this, key, source[key]);
                }
            }
            for (var key in source) {
                if (!proto[key]) extend.call(this, key, source[key]);
            }
        }
        return this;
    },
    base: function() {}
};
Base = Base.extend({
    constructor: function() {
        this.extend(arguments[0]);
    }
}, {
    ancestor: Object,
    version: "1.1",
    forEach: function(object, block, context) {
        for (var key in object) {
            if (this.prototype[key] === undefined) {
                block.call(context, object[key], key, object);
            }
        }
    },
    implement: function() {
        for (var i = 0; i < arguments.length; i++) {
            if (typeof arguments[i] == "function") {
                arguments[i](this.prototype);
            } else {
                this.prototype.extend(arguments[i]);
            }
        }
        return this;
    },
    toString: function() {
        return String(this.valueOf());
    }
});

function getAttributeStringValue(attributes, name) {
    var item = attributes.getNamedItem(name);
    if (item == null) {
        return "";
    }
    return item.nodeValue;
}

function getAttributeIntValue(attributes, name) {
    var item = attributes.getNamedItem(name);
    if (item == null) {
        return 0;
    }
    return parseInt(item.nodeValue);
}

function getAttributeColorValue(attributes, name) {
    var item = attributes.getNamedItem(name);
    if (item == null) {
        return "000000";
    }
    return item.nodeValue;
}

function getAttributeBooleanValue(attributes, name) {
    var item = attributes.getNamedItem(name);
    if (item == null) {
        return false;
    }
    return (item.nodeValue == "1" || item.nodeValue == "true") ? true : false;
}

function getAttributeBooleanValue(attributes, name, defvalue)
{
	var item = attributes.getNamedItem(name);
	if(item == null) {
		return defvalue;
	}
	return (item.nodeValue=="1"||item.nodeValue=="true")?true:false;
}

function nvl(value) {
    if (value == null) return "";
    return value;
}

function getNodeValue(node) {
    try {
        if (node == null) return "";
        return (node.nodeValue == null ? "" : node.nodeValue);
    } catch (e) {}
    return "";
}

function makeArray() {
    var arr = [];
    for (var i = 0; i < arguments.length; i++) {
        arr.push(arguments[i]);
    }
    return arr;
}
var UbiObject = Base.extend({
    classname: "",
    constructor: function(classname) {
        if (typeof classname == "undefined") {
            classname = UbiObject.CLASSNAME;
        }
        this.classname = classname;
    },
    GetClassname: function() {
        return this.classname;
    }
}, {
    CLASSNAME: "UbiObject",
    ATTRCLASSNAME: "classname"
});
var UbiMap = UbiObject.extend({
    constructor: function() {
        this.base(UbiMap.CLASSNAME);
        this.keys = new Array();
        this.datum = new Array();
    },
    Lookup: function(key) {
        var index = this.FindIndex(key);
        var rvalue;
        if (index >= 0) {
            rvalue = this.GetValue(index);
        }
        return rvalue;
    },
    SetAt: function(key, newValue) {
        var index = this.FindIndex(key);
        if (index < 0) {
            this.keys.push(key);
            this.datum.push(newValue);
        } else {
            this.SetValue(index, newValue);
        }
    },
    GetAt: function(index) {
        return this.GetKey(index);
    },
    GetCount: function() {
        return this.keys.length;
    },
    FindIndex: function(key) {
        var index = -1;
        for (var i = 0; i < this.GetCount(); i++) {
            if (key == this.GetKey(i)) {
                index = i;
                break;
            }
        }
        return index;
    },
    GetKey: function(index) {
        return this.keys[index];
    },
    SetValue: function(index, value) {
        this.datum[index] = value;
    },
    GetValue: function(index) {
        return this.datum[index];
    }
}, {
    CLASSNAME: "UbiMap"
});
var UbiList = UbiObject.extend({
    constructor: function() {
        this.base(UbiList.CLASSNAME);
        this.datum = new Array();
    },
    GetSize: function() {
        return this.datum.length;
    },
    GetAt: function(index) {
        return this.datum[index];
    },
    Add: function(value) {
        this.datum.push(value);
        return this.GetSize();
    },
    SetAt: function(index, value) {
        this.datum[index] = value;
        return this.GetSize();
    }
}, {
    CLASSNAME: "UbiList"
});
var UbiDocObject = UbiObject.extend({
    id: "",
    constructor: function(classname, id) {
        if (typeof classname == "undefined") {
            classname = UbiDocObject.CLASSNAME;
        }
        this.base(classname);
        if (typeof id == "undefined") {
            id = "";
        }
        this.id = id;
    }
}, {
    CLASSNAME: "UbiDocObject",
    NODEOBJECT: "Object",
    ATTRID: "id",
    CreateInstance: function(node) {}
});
var UbiFontObject = UbiDocObject.extend({
    name: "",
    style: 0,
    size: 0,
    constructor: function() {
        this.base(UbiFontObject.CLASSNAME);
    },
    getFont: function(ds) {
        var str = "";
        if (this.style == 0) {
            str = "normal normal " + Math.round(this.size * ds) + "px '" + this.name + "'";
        } else if (this.style == 1) {
            str = "normal bold " + Math.round(this.size * ds) + "px '" + this.name + "'";
        } else if (this.style == 2) {
            str = "italic normal " + Math.round(this.size * ds) + "px '" + this.name + "'";
        } else if (this.style == 3) {
            str = "italic bold " + Math.round(this.size * ds) + "px '" + this.name + "'";
        }
        return str;
    },
    getFontSize: function(ds) {
        return Math.round(this.size * ds);
    }
}, {
    CLASSNAME: "UbiFontObject",
    NODEFONTOBJ: "Fontobj",
    ATTRNAME: "name",
    ATTRSTYLE: "style",
    ATTRSIZE: "size",
    CreateInstance: function(node) {
        var data = UbiFontObject.getData(node);
        var fontobj = new UbiFontObject();
        fontobj.id = data.id;
        fontobj.name = data.name;
        fontobj.style = data.style;
        fontobj.size = data.size;
        return fontobj;
    },
    getData: function(node) {
        var attributes = node.attributes;
        return {
            id: getAttributeStringValue(attributes, UbiDocObject.ATTRID),
            name: getAttributeStringValue(attributes, UbiFontObject.ATTRNAME),
            style: getAttributeIntValue(attributes, UbiFontObject.ATTRSTYLE),
            size: getAttributeIntValue(attributes, UbiFontObject.ATTRSIZE)
        };
    }
});
var UbiLineObject = UbiDocObject.extend({
    type: 0,
    thickness: 0,
    colorid: "",
    constructor: function() {
        this.base(UbiLineObject.CLASSNAME);
    },
    getWidth: function() {
        var str;
        str = this.thickness;
        return str;
    },
    getStyle: function() {
        var str;
        if (this.type == -1) {
            str = "none";
        } else if (this.type == 0) {
            str = "solid";
        } else if (this.type == 1) {
            str = "dotted";
        } else if (this.type == 2) {
            str = "dashed";
        } else if (this.type == 3) {
            str = "dashed";
        }
        return str;
    }
}, {
    CLASSNAME: "UbiLineObject",
    NODELINEOBJ: "Lineobj",
    ATTRTYPE: "type",
    ATTRTHICKNESS: "thickness",
    ATTRCOLORID: "colorid",
    CreateInstance: function(node) {
        var data = UbiLineObject.getData(node);
        var lineobj = new UbiLineObject();
        lineobj.id = data.id;
        lineobj.type = data.type;
        lineobj.thickness = data.thickness;
        lineobj.colorid = data.colorid;
        return lineobj;
    },
    getData: function(node) {
        var attributes = node.attributes;
        return {
            id: getAttributeStringValue(attributes, UbiDocObject.ATTRID),
            type: getAttributeIntValue(attributes, UbiLineObject.ATTRTYPE),
            thickness: getAttributeIntValue(attributes, UbiLineObject.ATTRTHICKNESS),
            colorid: getAttributeStringValue(attributes, UbiLineObject.ATTRCOLORID)
        };
    }
});
var UbiColorObject = UbiDocObject.extend({
    color: "",
    constructor: function() {
        this.base(UbiColorObject.CLASSNAME);
    }
}, {
    CLASSNAME: "UbiColorObject",
    NODECOLOROBJ: "Colorobj",
    ATTRCOLOR: "color",
    CreateInstance: function(node) {
        var data = UbiColorObject.getData(node);
        var colorobj = new UbiColorObject();
        colorobj.id = data.id;
        colorobj.color = data.color;
        return colorobj;
    },
    getData: function(node) {
        var attributes = node.attributes;
        return {
            id: getAttributeStringValue(attributes, UbiDocObject.ATTRID),
            color: getAttributeColorValue(attributes, UbiColorObject.ATTRCOLOR)
        };
    }
});
var UbiBorderObject = UbiDocObject.extend({
    top: "",
    bottom: "",
    left: "",
    right: "",
    diagonaldown: "",
    diagonalup: "",
    constructor: function() {
        this.base(UbiBorderObject.CLASSNAME);
    }
}, {
    CLASSNAME: "UbiBorderObject",
    NODEBORDEROBJ: "Borderobj",
    ATTRTOP: "top",
    ATTRBOTTOM: "bottom",
    ATTRLEFT: "left",
    ATTRRIGHT: "right",
    ATTRDIAGONALDOWN: "diagonaldown",
    ATTRDIAGONALUP: "diagonalup",
    CreateInstance: function(node) {
        var data = UbiBorderObject.getData(node);
        var borderobj = new UbiBorderObject();
        borderobj.id = data.id;
        borderobj.top = data.top;
        borderobj.bottom = data.bottom;
        borderobj.left = data.left;
        borderobj.right = data.right;
        borderobj.diagonaldown = data.diagonaldown;
        borderobj.diagonalup = data.diagonalup;
        return borderobj;
    },
    getData: function(node) {
        var attributes = node.attributes;
        return {
            id: getAttributeStringValue(attributes, UbiDocObject.ATTRID),
            top: getAttributeStringValue(attributes, UbiBorderObject.ATTRTOP),
            bottom: getAttributeStringValue(attributes, UbiBorderObject.ATTRBOTTOM),
            left: getAttributeStringValue(attributes, UbiBorderObject.ATTRLEFT),
            right: getAttributeStringValue(attributes, UbiBorderObject.ATTRRIGHT),
            diagonaldown: getAttributeStringValue(attributes, UbiBorderObject.ATTRDIAGONALDOWN),
            diagonalup: getAttributeStringValue(attributes, UbiBorderObject.ATTRDIAGONALUP)
        };
    }
});
var UbiImageObject = UbiDocObject.extend({
    width: 0,
    height: 0,
    originalsize: false,
    fixedrate: false,
    brightness: 0,
    loadtype: 0,
    loadsrc: "",
    constructor: function() {
        this.base(UbiImageObject.CLASSNAME);
    }
}, {
    CLASSNAME: "UbiImageObject",
    NODEIMAGEOBJ: "Imageobj",
    ATTRWIDTH: "width",
    ATTRHEIGHT: "height",
    ATTRORIGINALSIZE: "originalsize",
    ATTRFIXEDRATE: "fixedrate",
    ATTRBRIGHTNESS: "brightness",
    ATTRLOADTYPE: "loadtype",
    ATTRLOADSRC: "loadsrc",
    NODEIMAGESRC: "src",
    CreateInstance: function(node) {
        var data = UbiImageObject.getData(node);
        var imageobj = new UbiImageObject();
        imageobj.id = data.id;
        imageobj.width = data.width;
        imageobj.height = data.height;
        imageobj.originalsize = data.originalsize;
        imageobj.fixedrate = data.fixedrate;
        imageobj.brightness = data.brightness;
        imageobj.loadtype = data.loadtype;
        imageobj.loadsrc = data.loadsrc;
        return imageobj;
    },
    getData: function(node) {
        var attributes = node.attributes;
        return {
            id: getAttributeStringValue(attributes, UbiDocObject.ATTRID),
            width: getAttributeIntValue(attributes, UbiImageObject.ATTRWIDTH),
            height: getAttributeIntValue(attributes, UbiImageObject.ATTRHEIGHT),
            originalsize: getAttributeBooleanValue(attributes, UbiImageObject.ATTRORIGINALSIZE),
            fixedrate: getAttributeBooleanValue(attributes, UbiImageObject.ATTRFIXEDRATE),
            brightness: getAttributeIntValue(attributes, UbiImageObject.ATTRBRIGHTNESS),
            loadtype: getAttributeIntValue(attributes, UbiImageObject.ATTRLOADTYPE),
            loadsrc: getAttributeStringValue(attributes, UbiImageObject.ATTRLOADSRC)
        };
    }
});
var UbiDocProperty = UbiObject.extend({
    width: 0,
    height: 0,
    margintop: 0,
    marginbottom: 0,
    marginleft: 0,
    marginright: 0,
    pagesize: "A4",
    orientation: "Portrait",
    language: "Korean",
    constructor: function() {
        this.base(UbiDocProperty.CLASSNAME);
    }
}, {
    CLASSNAME: "UbiDocProperty",
    NODEDOCPROPERTY: "DocProperty",
    ATTRWIDTH: "width",
    ATTRHEIGHT: "height",
    ATTRMARGINTOP: "margintop",
    ATTRMARGINBOTTOM: "marginbottom",
    ATTRMARGINLEFT: "marginleft",
    ATTRMARGINRIGHT: "marginright",
    ATTRPAGESIZE: "pagesize",
    ATTRORIENTATION: "orientation",
    ATTRLANGUAGE: "language",
    CreateInstance: function(parent) {
        var data = UbiDocProperty.getData(parent);
        var docprop = new UbiDocProperty();
        docprop.width = data.width;
        docprop.height = data.height;
        docprop.margintop = data.margintop;
        docprop.marginbottom = data.marginbottom;
        docprop.marginleft = data.marginleft;
        docprop.marginright = data.marginright;
        docprop.pagesize = data.pagesize;
        docprop.orientation = data.orientation;
        docprop.language = data.language;
        return docprop;
    },
    getData: function(parent) {
        var node = parent.getElementsByTagName(UbiDocProperty.NODEDOCPROPERTY)[0];
        var attributes = node.attributes;
        return {
            width: getAttributeIntValue(attributes, UbiDocProperty.ATTRWIDTH),
            height: getAttributeIntValue(attributes, UbiDocProperty.ATTRHEIGHT),
            margintop: getAttributeIntValue(attributes, UbiDocProperty.ATTRMARGINTOP),
            marginbottom: getAttributeIntValue(attributes, UbiDocProperty.ATTRMARGINBOTTOM),
            marginleft: getAttributeIntValue(attributes, UbiDocProperty.ATTRMARGINLEFT),
            marginright: getAttributeIntValue(attributes, UbiDocProperty.ATTRMARGINRIGHT),
            pagesize: getAttributeStringValue(attributes, UbiDocProperty.ATTRPAGESIZE),
            orientation: getAttributeStringValue(attributes, UbiDocProperty.ATTRORIENTATION),
            language: getAttributeStringValue(attributes, UbiDocProperty.ATTRLANGUAGE)
        };
    }
});
var UbiTextStyleInfo = UbiObject.extend({
    constructor: function() {
        this.base(UbiTextStyleInfo.CLASSNAME);
        this.styles = new UbiList();
    }
}, {
    CLASSNAME: "UbiTextStyleInfo",
    NODETEXTSTYLE: "TextStyle",
    CreateInstance: function(node) {
        var data = UbiTextStyleInfo.getData(node);
        var styleinfo = new UbiTextStyleInfo();
        var stylelist = data.stylelist;
        if (stylelist != null) {
            for (var i = 0; i < stylelist.length; i++) {
                var stylenode = stylelist[i];
                var styleobj = UbiTextStyleObject.CreateInstance(stylenode);
                styleinfo.styles.Add(styleobj);
            }
        }
        return styleinfo;
    },
    getData: function(node) {
        return {
            stylelist: node.getElementsByTagName(UbiTextStyleObject.NODESTYLEOBJ)
        };
    }
});
var UbiTextStyleObject = UbiObject.extend({
    startindex: -1,
    endindex: -1,
    fontname: "",
    fontsize: -1,
    fontstyle: -1,
    fontcolor: "",
    underlined: false,
    constructor: function() {
        this.base(UbiTextStyleObject.CLASSNAME);
    }
}, {
    CLASSNAME: "UbiTextStyleObject",
    NODESTYLEOBJ: "Style",
    ATTRSTARTINDEX: "startindex",
    ATTRENDINDEX: "endindex",
    ATTRFONTNAME: "fontname",
    ATTRFONTSIZE: "fontsize",
    ATTRFONTSTYLE: "fontstyle",
    ATTRFONTCOLOR: "fontcolor",
    ATTRUNDERLINED: "underlined",
    CreateInstance: function(node) {
        var data = UbiTextStyleObject.getData(node);
        var styleobj = new UbiTextStyleObject();
        styleobj.startindex = data.startindex;
        styleobj.endindex = data.endindex;
        styleobj.fontname = data.fontname;
        styleobj.fontsize = data.fontsize;
        styleobj.fontstyle = data.fontstyle;
        styleobj.fontcolor = data.fontcolor;
        styleobj.underlined = data.underlined;
        return styleobj;
    },
    getData: function(node) {
        var attributes = node.attributes;
        return {
            startindex: getAttributeIntValue(attributes, UbiTextStyleObject.ATTRSTARTINDEX, -1),
            endindex: getAttributeIntValue(attributes, UbiTextStyleObject.ATTRENDINDEX, -1),
            fontname: getAttributeStringValue(attributes, UbiTextStyleObject.ATTRFONTNAME, ""),
            fontsize: getAttributeIntValue(attributes, UbiTextStyleObject.ATTRFONTSIZE, -1),
            fontstyle: getAttributeIntValue(attributes, UbiTextStyleObject.ATTRFONTSTYLE, -1),
            fontcolor: getAttributeColorValue(attributes, UbiTextStyleObject.ATTRFONTCOLOR, ""),
            underlined: getAttributeBooleanValue(attributes, UbiTextStyleObject.ATTRUNDERLINED, false)
        };
    }
});
var UbiItem = UbiObject.extend({
    id: "",
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    foregroundid: "",
    backgroundid: "",
    transparent: false,
    iseditable: false,
	ispreview : true,
	isprint : true,
    linked: false,
    linkfilename: "",
    linkargs: "",
    linkstyle: "",
    constructor: function(classname) {
        if (typeof classname == "undefined") {
            classname = UbiItem.CLASSNAME;
        }
        this.base(classname);
    }
}, {
    CLASSNAME: "UbiItem",
    NODEITEM: "Item",
    ATTRID: "id",
    ATTRX: "x",
    ATTRY: "y",
    ATTRWIDTH: "width",
    ATTRHEIGHT: "height",
    ATTRFORECOLORID: "forecolorid",
    ATTRBACKCOLORID: "backcolorid",
    ATTRTRANSPARENT: "transparent",
    ATTRISEDITABLE: "iseditable",
	ATTRISPREVIEW: "ispreview",
	ATTRISPRINT: "isprint",
    ATTRLINKED: "linked",
    ATTRLINKFILENAME: "linkfilename",
    ATTRLINKARGS: "linkarg",
    ATTRLINKSTYLE: "linkstyle",
    NODELINKARG: "Linkarg",
    ATTRNAME: "name",
    CreateInstance: function(node, doc) {
        var attributes = node.attributes;
        var _classname = getAttributeStringValue(attributes, UbiObject.ATTRCLASSNAME);
        if (_classname == UbiTextItem.CLASSNAME) {
            return UbiTextItem.CreateInstance(node, doc);
        } else if (_classname == UbiCircleItem.CLASSNAME) {
            return UbiCircleItem.CreateInstance(node, doc);
        } else if (_classname == UbiLineItem.CLASSNAME) {
            return UbiLineItem.CreateInstance(node, doc);
        } else if (_classname == UbiRectangleItem.CLASSNAME) {
            return UbiRectangleItem.CreateInstance(node, doc);
        } else if (_classname == UbiImageItem.CLASSNAME) {
            return UbiImageItem.CreateInstance(node, doc);
        } else if (_classname == UbiBarcodeItem.CLASSNAME) {
            return UbiBarcodeItem.CreateInstance(node, doc);
        }
    },
    SetMemberFromNode: function(item, node) {
        var data = UbiItem.getData(node);
        item.id = data.id;
        item.x = data.x;
        item.y = data.y;
        item.width = data.width;
        item.height = data.height;
        item.foregroundid = data.foregroundid;
        item.backgroundid = data.backgroundid;
        item.transparent = data.transparent;
        item.iseditable = data.iseditable;
		item.ispreview = data.ispreview;
		item.isprint = data.isprint;
        item.linked = data.linked;
        item.linkfilename = data.linkfilename;
        item.linkargs = data.linkargs;
        item.linkstyle = data.linkstyle;
    },
    getData: function(node) {
        var attributes = node.attributes;
        return {
            id: getAttributeStringValue(attributes, UbiItem.ATTRID),
            x: getAttributeIntValue(attributes, UbiItem.ATTRX),
            y: getAttributeIntValue(attributes, UbiItem.ATTRY),
            width: getAttributeIntValue(attributes, UbiItem.ATTRWIDTH),
            height: getAttributeIntValue(attributes, UbiItem.ATTRHEIGHT),
            foregroundid: getAttributeStringValue(attributes, UbiItem.ATTRFORECOLORID),
            backgroundid: getAttributeStringValue(attributes, UbiItem.ATTRBACKCOLORID),
            transparent: getAttributeBooleanValue(attributes, UbiItem.ATTRTRANSPARENT),
            iseditable: getAttributeBooleanValue(attributes, UbiItem.ATTRISEDITABLE),
            ispreview: getAttributeBooleanValue(attributes, UbiItem.ATTRISPREVIEW, true),
			isprint: getAttributeBooleanValue(attributes, UbiItem.ATTRISPRINT, true),
			linked: getAttributeBooleanValue(attributes, UbiItem.ATTRLINKED),
            linkfilename: getAttributeStringValue(attributes, UbiItem.ATTRLINKFILENAME),
            linkargs: getAttributeStringValue(attributes, UbiItem.ATTRLINKARGS),
            linkstyle: getAttributeStringValue(attributes, UbiItem.ATTRLINKSTYLE)
        };
    }
});
var UbiTextItem = UbiItem.extend({
    value: "",
    fontid: "",
    halign: 0,
    valign: 0,
    underlined: false,
    textdirection: true,
	textdirection2: 0,
    borderid: "",
    leftMargin: 0,
    rightMargin: 0,
    topMargin: 0,
    bottomMargin: 0,
    lineSpace: 0,
    styleinfo: null,
    itemvalue: "",
    isspacevalue: false,
    htmlcodeproc: 0,
    constructor: function() {
        this.base(UbiTextItem.CLASSNAME);
    },
    getVAlign: function() {
        var str;
        if (this.valign == 0) {
            str = "top";
        } else if (this.valign == 1) {
            str = "middle";
        } else if (this.valign == 2) {
            str = "bottom";
        }
        return str;
    },
    getHAlign: function() {
        var str;
        if (this.halign == 0) {
            str = "left";
        } else if (this.halign == 1) {
            str = "center";
        } else if (this.halign == 2) {
            str = "right";
        } else if (this.halign == 3) {
            str = "justify";
        }
        return str;
    }
}, {
    CLASSNAME: "UbiTextItem",
    NODETEXT: "Text",
    ATTRFONTID: "fontid",
    ATTRHALIGN: "halign",
    ATTRVALIGN: "valign",
    ATTRUNDERLINED: "underlined",
    ATTRTEXTDIRECTION: "textdirection",
	ATTRTEXTDIRECTION2: "textdirection2",
    ATTRBORDERID: "border",
    ATTRMARGINLEFT: "marginleft",
    ATTRMARGINRIGHT: "marginright",
    ATTRMARGINTOP: "margintop",
    ATTRMARGINBOTTOM: "marginbottom",
    ATTRLINESPACE: "linespace",
    ATTRISSPACEVALUE: "isspc",
    ATTRHTMLCODEPROC: "htmlcodeproc",
    NODEITEMVALUE: "ItemValue",
    CreateInstance: function(node, doc) {
        var data = UbiTextItem.getData(node);
        var item = new UbiTextItem();
        UbiItem.SetMemberFromNode(item, node);
        item.value = data.value;
        item.fontid = data.fontid;
        item.halign = data.halign;
        item.valign = data.valign;
        item.underlined = data.underlined;
        item.textdirection = data.textdirection;
		item.textdirection2 = data.textdirection2;
        item.borderid = data.borderid;
        item.leftMargin = data.leftMargin;
        item.rightMargin = data.rightMargin;
        item.topMargin = data.topMargin;
        item.bottomMargin = data.bottomMargin;
        item.lineSpace = data.lineSpace;
        item.htmlcodeproc = data.htmlcodeproc;
        if (data.isspacevalue == true) {
            item.value = item.value.substring(1, item.value.length);
        }
        if (data.styleinfonode != null) {
            item.value = data.itemvalue;
            if (data.isspacevalue == true) {
                item.value = item.value.substring(1, item.value.length);
            }
            item.styleinfo = UbiTextStyleInfo.CreateInstance(data.styleinfonode, doc);
            if (item.styleinfo.styles != null && item.styleinfo.styles.GetSize() > 0) {
                var styleobj = null;
                var orgvalue = item.value;
                var value = "";
                var styles = item.styleinfo.styles;
                var preindex = 0;
                var startidx = 0;
                var endidx = 0;
                for (var i = 0; i < styles.GetSize(); i++) {
                    styleobj = styles.GetAt(i);
                    startidx = styleobj.startindex;
                    endidx = styleobj.endindex + 1;
                    if (preindex < startidx) {
                        value += orgvalue.substring(preindex, startidx);
                    }
                    value += "<font style='";
                    if (styleobj.fontname != "") value += "font-family:" + styleobj.fontname + "; ";
                    if (styleobj.fontsize != "") value += "font-size:" + styleobj.fontsize + "px; ";
                    if (styleobj.fontcolor != "") value += "color:#" + styleobj.fontcolor + "; ";
                    if (styleobj.fontstyle != -1) {
                        if (styleobj.fontstyle == 1) value += "font-weight:bold; ";
                        else if (styleobj.fontstyle == 2) value += "font-style:italic; ";
                        else if (styleobj.fontstyle == 3) {
                            value += "font-weight:bold; font-style:italic; ";
                        }
                    }
                    if (styleobj.underlined != item.underlined && styleobj.underlined) {
                        value += "text-decoration:underline; ";
                    }
                    value += "'>";
                    value += orgvalue.substring(startidx, endidx);
                    preindex = endidx;
                    value += "</font>";
                }
                if (preindex < orgvalue.length) {
                    value += orgvalue.substring(preindex, orgvalue.length - 1);
                }
                item.value = value;
            }
        }
        return item;
    },
    getData: function(node) {
        var textnode = node.getElementsByTagName(UbiTextItem.NODETEXT)[0];
        var textattributes = textnode.attributes;
        return {
            value: (textnode.childNodes[0] == null) ? "" : getNodeValue(textnode.childNodes[0]),
            fontid: getAttributeStringValue(textattributes, UbiTextItem.ATTRFONTID),
            halign: getAttributeIntValue(textattributes, UbiTextItem.ATTRHALIGN),
            valign: getAttributeIntValue(textattributes, UbiTextItem.ATTRVALIGN),
            underlined: getAttributeBooleanValue(textattributes, UbiTextItem.ATTRUNDERLINED),
            textdirection: getAttributeBooleanValue(textattributes, UbiTextItem.ATTRTEXTDIRECTION),
			textdirection2: getAttributeIntValue(textattributes, UbiTextItem.ATTRTEXTDIRECTION2),
            borderid: getAttributeStringValue(textattributes, UbiTextItem.ATTRBORDERID),
            leftMargin: getAttributeIntValue(textattributes, UbiTextItem.ATTRMARGINLEFT),
            rightMargin: getAttributeIntValue(textattributes, UbiTextItem.ATTRMARGINRIGHT),
            topMargin: getAttributeIntValue(textattributes, UbiTextItem.ATTRMARGINTOP),
            bottomMargin: getAttributeIntValue(textattributes, UbiTextItem.ATTRMARGINBOTTOM),
            lineSpace: getAttributeIntValue(textattributes, UbiTextItem.ATTRLINESPACE),
            styleinfonode: node.getElementsByTagName(UbiTextStyleInfo.NODETEXTSTYLE)[0],
            isspacevalue: getAttributeBooleanValue(textattributes, UbiTextItem.ATTRISSPACEVALUE),
            htmlcodeproc: getAttributeIntValue(textattributes, UbiTextItem.ATTRHTMLCODEPROC),
            itemvalue: (textnode.getElementsByTagName(UbiTextItem.NODEITEMVALUE)[0] == null) ? "" : getNodeValue(textnode.getElementsByTagName(UbiTextItem.NODEITEMVALUE)[0].childNodes[0])
        };
    }
});
var UbiShapeItem = UbiItem.extend({
    lineid: "",
    constructor: function(classname) {
        this.base(classname);
    }
}, {
    CLASSNAME: "UbiShapeItem",
    NODESHAPE: "Shape",
    ATTRLINEID: "lineid",
    SetMemberFromNode: function(item, node) {
        var data = UbiShapeItem.getData(node);
        item.lineid = data.lineid;
    },
    getData: function(node) {
        var attributes = node.attributes;
        return {
            lineid: getAttributeStringValue(attributes, UbiShapeItem.ATTRLINEID)
        };
    }
});
var UbiCircleItem = UbiShapeItem.extend({
    constructor: function() {
        this.base(UbiCircleItem.CLASSNAME);
    }
}, {
    CLASSNAME: "UbiCircleItem",
    CreateInstance: function(node, doc) {
        var item = new UbiCircleItem();
        item.doc = doc;
        UbiItem.SetMemberFromNode(item, node);
        var shapenode = node.getElementsByTagName(UbiShapeItem.NODESHAPE)[0];
        UbiShapeItem.SetMemberFromNode(item, shapenode);
        return item;
    },
    getData: function(node) {}
});
var UbiLineItem = UbiShapeItem.extend({
    linedir: 0,
    constructor: function() {
        this.base(UbiLineItem.CLASSNAME);
    }
}, {
    CLASSNAME: "UbiLineItem",
    ATTRLINEDIR: "linedir",
    CreateInstance: function(node, doc) {
        var item = new UbiLineItem();
        item.doc = doc;
        UbiItem.SetMemberFromNode(item, node);
        var shapenode = node.getElementsByTagName(UbiShapeItem.NODESHAPE)[0];
        var data = UbiLineItem.getData(shapenode);
        UbiShapeItem.SetMemberFromNode(item, shapenode);
        item.linedir = data.linedir;
        return item;
    },
    getData: function(node) {
        var attributes = node.attributes;
        return {
            linedir: getAttributeIntValue(attributes, UbiLineItem.ATTRLINEDIR)
        };
    }
});
var UbiRectangleItem = UbiShapeItem.extend({
    edgetype: 0,
    edgewidth: 0,
    constructor: function() {
        this.base(UbiRectangleItem.CLASSNAME);
    }
}, {
    CLASSNAME: "UbiRectangleItem",
    ATTREDGETYPE: "edgetype",
    ATTREDGEWIDTH: "edgewidth",
    CreateInstance: function(node, doc) {
        var item = new UbiRectangleItem();
        item.doc = doc;
        UbiItem.SetMemberFromNode(item, node);
        var shapenode = node.getElementsByTagName(UbiShapeItem.NODESHAPE)[0];
        var data = UbiRectangleItem.getData(shapenode);
        UbiShapeItem.SetMemberFromNode(item, shapenode);
        item.edgetype = data.edgetype;
        item.edgewidth = data.edgewidth;
        return item;
    },
    getData: function(node) {
        var attributes = node.attributes;
        return {
            edgetype: getAttributeIntValue(attributes, UbiRectangleItem.ATTREDGETYPE),
            edgewidth: getAttributeIntValue(attributes, UbiRectangleItem.ATTREDGEWIDTH)
        };
    }
});
var UbiImageItem = UbiItem.extend({
    imageid: "",
    halign: 0,
    valign: 0,
    borderid: "",
    constructor: function() {
        this.base(UbiImageItem.CLASSNAME);
    },
    getVAlign: function() {
        var str;
        if (this.valign == 0) {
            str = "top";
        } else if (this.valign == 1) {
            str = "middle";
        } else if (this.valign == 2) {
            str = "bottom";
        }
        return str;
    },
    getHAlign: function() {
        var str;
        if (this.halign == 0) {
            str = "left";
        } else if (this.halign == 1) {
            str = "center";
        } else if (this.halign == 2) {
            str = "right";
        }
        return str;
    }
}, {
    CLASSNAME: "UbiImageItem",
    NODEIMAGE: "Image",
    ATTRIMAGEID: "imageid",
    ATTRHALIGN: "halign",
    ATTRVALIGN: "valign",
    ATTRBORDERID: "borderid",
    CreateInstance: function(node, doc) {
        var item = new UbiImageItem();
        item.doc = doc;
        UbiItem.SetMemberFromNode(item, node);
        var imagenode = node.getElementsByTagName(UbiImageItem.NODEIMAGE)[0];
        var data = UbiImageItem.getData(imagenode);
        item.imageid = data.imageid;
        item.halign = data.halign;
        item.valign = data.valign;
        item.borderid = data.borderid;
        return item;
    },
    getData: function(node) {
        var attributes = node.attributes;
        return {
            imageid: getAttributeStringValue(attributes, UbiImageItem.ATTRIMAGEID),
            halign: getAttributeIntValue(attributes, UbiImageItem.ATTRHALIGN),
            valign: getAttributeIntValue(attributes, UbiImageItem.ATTRVALIGN),
            borderid: getAttributeStringValue(attributes, UbiImageItem.ATTRBORDERID)
        };
    }
});
var UbiBarcodeItem = UbiItem.extend({
    code: "",
    borderid: "",
    loadtype: 0,
    loadsrc: "",
    constructor: function() {
        this.base(UbiBarcodeItem.CLASSNAME);
    }
}, {
    CLASSNAME: "UbiBarcodeItem",
    NODEBARCODE: "Barcode",
    ATTRBORDERID: "borderid",
    ATTRLOADTYPE: "loadtype",
    ATTRLOADSRC: "loadsrc",
    CreateInstance: function(node, doc) {
        var item = new UbiBarcodeItem();
        UbiItem.SetMemberFromNode(item, node);
        var barcodenode = node.getElementsByTagName(UbiBarcodeItem.NODEBARCODE)[0];
        var data = UbiBarcodeItem.getData(barcodenode);
        item.code = data.code;
        item.borderid = data.borderid;
        item.loadtype = data.loadtype;
        item.loadsrc = data.loadsrc;
        return item;
    },
    getData: function(node) {
        var attributes = node.attributes;
        return {
            code: getNodeValue(node.childNodes[0]),
            borderid: getAttributeStringValue(attributes, UbiBarcodeItem.ATTRBORDERID),
            loadtype: getAttributeIntValue(attributes, UbiBarcodeItem.ATTRLOADTYPE),
            loadsrc: getAttributeStringValue(attributes, UbiBarcodeItem.ATTRLOADSRC)
        };
    }
});
var UbiBarcodeItem = UbiItem.extend({
    code: "",
    borderid: "",
    loadtype: 0,
    loadsrc: "",
    constructor: function() {
        this.base(UbiBarcodeItem.CLASSNAME);
    }
}, {
    CLASSNAME: "UbiBarcodeItem",
    NODEBARCODE: "Barcode",
    ATTRBORDERID: "borderid",
    ATTRLOADTYPE: "loadtype",
    ATTRLOADSRC: "loadsrc",
    CreateInstance: function(node, doc) {
        var item = new UbiBarcodeItem();
        UbiItem.SetMemberFromNode(item, node);
        var barcodenode = node.getElementsByTagName(UbiBarcodeItem.NODEBARCODE)[0];
        var data = UbiBarcodeItem.getData(barcodenode);
        item.code = data.code;
        item.borderid = data.borderid;
        item.loadtype = data.loadtype;
        item.loadsrc = data.loadsrc;
        return item;
    },
    getData: function(node) {
        var attributes = node.attributes;
        return {
            code: getNodeValue(node.childNodes[0]),
            borderid: getAttributeStringValue(attributes, UbiBarcodeItem.ATTRBORDERID),
            loadtype: getAttributeIntValue(attributes, UbiBarcodeItem.ATTRLOADTYPE),
            loadsrc: getAttributeStringValue(attributes, UbiBarcodeItem.ATTRLOADSRC)
        };
    }
});
var UbiChartComponent = UbiObject.extend({
    id: "",
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    linked: false,
    linkfilename: "",
    linkargs: "",
    linkstyle: "",
    loadtype: 0,
    loadsrc: "",
    constructor: function() {
        this.base(UbiChartComponent.CLASSNAME);
    }
}, {
    CLASSNAME: "UbiChartComponent",
    NODECHARTCOMPONENT: "Chartcomponent",
    ATTRID: "id",
    ATTRX: "x",
    ATTRY: "y",
    ATTRWIDTH: "width",
    ATTRHEIGHT: "height",
    ATTRLINKED: "linked",
    ATTRLINKFILENAME: "linkfilename",
    ATTRLINKSTYLE: "linkstyle",
    NODELINKARG: "Linkarg",
    ATTRNAME: "name",
    ATTRLOADTYPE: "loadtype",
    ATTRLOADSRC: "loadsrc",
    CreateInstance: function(node, doc) {
        var data = UbiChartComponent.getData(node);
        var charcomponent = new UbiChartComponent();
        charcomponent.id = data.id;
        charcomponent.x = data.x;
        charcomponent.y = data.y;
        charcomponent.width = data.width;
        charcomponent.height = data.height;
        charcomponent.linked = data.linked;
        charcomponent.linkfilename = data.linkfilename;
        charcomponent.loadtype = data.loadtype;
        charcomponent.loadsrc = data.loadsrc;
        return charcomponent;
    },
    getData: function(node) {
        var attributes = node.attributes;
        return {
            id: getAttributeStringValue(attributes, UbiChartComponent.ATTRID),
            x: getAttributeIntValue(attributes, UbiChartComponent.ATTRX),
            y: getAttributeIntValue(attributes, UbiChartComponent.ATTRY),
            width: getAttributeIntValue(attributes, UbiChartComponent.ATTRWIDTH),
            height: getAttributeIntValue(attributes, UbiChartComponent.ATTRHEIGHT),
            linked: getAttributeBooleanValue(attributes, UbiChartComponent.ATTRLINKED),
            linkfilename: getAttributeStringValue(attributes, UbiChartComponent.ATTRLINKFILENAME),
            linkstyle: getAttributeStringValue(attributes, UbiChartComponent.ATTRLINKSTYLE),
            loadtype: getAttributeIntValue(attributes, UbiChartComponent.ATTRLOADTYPE),
            loadsrc: getAttributeStringValue(attributes, UbiChartComponent.ATTRLOADSRC)
        };
    }
});
var UbiPage = UbiObject.extend({
    constructor: function(doc) {
        this.base(UbiPage.CLASSNAME);
        this.doc = doc;
        this.items = new UbiList();
        this.chartcomponents = new UbiList();
        this.contents = "";
        this.iscustom = false;
    }
}, {
    CLASSNAME: "UbiPage",
    NODEPAGE: "Page",
    ATTRPAGENUM: "pagenum",
    NODEFONTID: "Fontid",
    NODELINEID: "Lineid",
    NODECOLORID: "Colorid",
    NODEBORDERID: "Borderid",
    NODEOBJECTID: "Objectid",
    CreateInstance: function(node, doc) {
        var data = UbiPage.getData(node);
        var page = new UbiPage(doc);
        var itemlist = data.itemlist;
        for (var i = 0; i < itemlist.length; i++) {
            var childnode = itemlist[i];
            page.items.Add(UbiItem.CreateInstance(childnode, doc));
        }
        var chartcomponentlist = data.chartcomponentlist;
        for (var i = 0; i < chartcomponentlist.length; i++) {
            var childnode = chartcomponentlist[i];
            page.chartcomponents.Add(UbiChartComponent.CreateInstance(childnode, doc));
        }
        return page;
    },
    getData: function(node) {
        return {
            itemlist: node.getElementsByTagName(UbiItem.NODEITEM),
            chartcomponentlist: node.getElementsByTagName(UbiChartComponent.NODECHARTCOMPONENT)
        };
    }
});
var UbiDoc = UbiObject.extend({
    version: "",
    pagecount: 0,
    daemonid: "",
    isEnableNoPage: false,
    constructor: function() {
        this.base(UbiDoc.CLASSNAME);
        this.docprop;
        this.pages = new UbiList();
        this.fonts = new UbiMap();
        this.lines = new UbiMap();
        this.colors = new UbiMap();
        this.borders = new UbiMap();
        this.objects = new UbiMap();
    }
}, {
    CLASSNAME: "UbiDoc",
    NODEDOC: "Doc",
    ATTRVERSION: "version",
    ATTRPAGECOUNT: "pagecount",
    ATTRDAEMONID: "daemonid",
    ATTRENABLENOPAGE: "enableNoPage",
	CreateInstance: function(node, flag) {
		var docnode = node.getElementsByTagName(UbiDoc.NODEDOC)[0];
		var data = UbiDoc.getData(docnode);
		var doc = new UbiDoc();
		if (flag) {
			doc.version = data.version;
			doc.pagecount = data.pagecount;
			doc.daemonid = data.daemonid;
			doc.isEnableNoPage = data.enableNoPage;
			doc.docprop = UbiDocProperty.CreateInstance(docnode);
		}
        var fontlist = data.fontlist;
        for (var i = 0; i < fontlist.length; i++) {
            var fontnode = fontlist[i];
            var fontobj = UbiFontObject.CreateInstance(fontnode);
            doc.fonts.SetAt(fontobj.id, fontobj);
        }
        var linelist = data.linelist;
        for (var i = 0; i < linelist.length; i++) {
            var linenode = linelist[i];
            var lineobj = UbiLineObject.CreateInstance(linenode);
            doc.lines.SetAt(lineobj.id, lineobj);
        }
        var colorlist = data.colorlist;
        for (var i = 0; i < colorlist.length; i++) {
            var colornode = colorlist[i];
            var colorobj = UbiColorObject.CreateInstance(colornode);
            doc.colors.SetAt(colorobj.id, colorobj);
        }
        var borderlist = data.borderlist;
        for (var i = 0; i < borderlist.length; i++) {
            var bordernode = borderlist[i];
            var borderobj = UbiBorderObject.CreateInstance(bordernode);
            doc.borders.SetAt(borderobj.id, borderobj);
        }
        var imagelist = data.imagelist;
        for (var i = 0; i < imagelist.length; i++) {
            var imagenode = imagelist[i];
            var imageobj = UbiImageObject.CreateInstance(imagenode);
            doc.objects.SetAt(imageobj.id, imageobj);
        }
        var pagelist = data.pagelist;
        for (var i = 0; i < pagelist.length; i++) {
            var pagenode = pagelist[i];
            var page = UbiPage.CreateInstance(pagenode, doc);
            doc.pages.Add(page);
        }
        return doc;
    },
    getData: function(docnode) {
        var docattributes = docnode.attributes;
        return {
            version: getAttributeStringValue(docattributes, UbiDoc.ATTRVERSION),
            pagecount: getAttributeIntValue(docattributes, UbiDoc.ATTRPAGECOUNT),
            daemonid: getAttributeStringValue(docattributes, UbiDoc.ATTRDAEMONID),
            enableNoPage: getAttributeStringValue(docattributes, UbiDoc.ATTRENABLENOPAGE),
            fontlist: docnode.getElementsByTagName(UbiFontObject.NODEFONTOBJ),
            linelist: docnode.getElementsByTagName(UbiLineObject.NODELINEOBJ),
            colorlist: docnode.getElementsByTagName(UbiColorObject.NODECOLOROBJ),
            borderlist: docnode.getElementsByTagName(UbiBorderObject.NODEBORDEROBJ),
            imagelist: docnode.getElementsByTagName(UbiImageObject.NODEIMAGEOBJ),
            pagelist: docnode.getElementsByTagName(UbiPage.NODEPAGE)
        };
    }
});
var _ubi_cindex = 0;
var _ubi_iindex = 0;
var _ubi_imgcount = 0;
var _ubi_print_imgcount = 0;
var UbiDocument = Base.extend({
    jrffile: "",
    key: "",
    resid: "",
    keyurl: "",
    zindex: 0,
    vid: 0,
    canvaslist: new Array(),
    constructor: function(doc, vid, jrffile, key, resid, keyurl) {
        this.jrffile = jrffile;
        this.doc = doc;
        this.key = key;
        this.resid = resid;
        this.keyurl = keyurl;
        this.zindex = 0;
        this.vid = vid;
    },
    GetReportStyle: function(doc, ds) {
        var cssStr = "." + this.vid + "ubidiv {position: absolute; margin:0px; overflow: hidden; }\n";
        cssStr += "." + this.vid + "ubitable { margin:0px; padding:0px; border:0px; border-spacing:0px; border-collapse:collapse; table-layout:fixed; margin: 1px 0px 0px 1px;}\n";
        cssStr += "." + this.vid + "ubidivtext {position: absolute; border: 0px; margin:0px; padding: 0px; letter-spacing: 0px; background-color: transparent; overflow: hidden; }\n";
        cssStr += "." + this.vid + "ubitd { margin:0px; padding:0px; word-wrap:break-word; white-space:pre-wrap; word-break:break-all; letter-spacing:-0.3px; text-align: center; vertical-align: middle; }\n";
        for (var i = 0; i < doc.fonts.GetCount(); i++) {
            key = doc.fonts.GetKey(i);
            value = doc.fonts.GetValue(i);
            cssStr += "." + this.vid + "font_" + key + " {font: " + value.getFont(ds) + "; }\n";
        }
        for (var i = 0; i < doc.colors.GetCount(); i++) {
            key = doc.colors.GetKey(i);
            value = doc.colors.GetValue(i);
            cssStr += "." + this.vid + "color_f_" + key + " {color: #" + value.color + "; }\n";
            cssStr += "." + this.vid + "color_b_" + key + " {background-color: #" + value.color + "; }\n";
        }

		// text rotate
		cssStr += ".UbiAjaxViewerrotate_90 {-webkit-transform: rotate(90deg); -moz-transform: rotate(90deg); -o-transform: rotate(90deg); -ms-transform: rotate(90deg); }\n";
		//filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2);
		cssStr += ".UbiAjaxViewerrotate_180 {-webkit-transform: rotate(180deg); -moz-transform: rotate(180deg); -o-transform: rotate(180deg); -ms-transform: rotate(180deg); }\n";
		cssStr += ".UbiAjaxViewerrotate_270 {-webkit-transform: rotate(270deg); -moz-transform: rotate(270deg); -o-transform: rotate(270deg); -ms-transform: rotate(270deg) }\n";
		cssStr += ".UbiAjaxViewervertical { -ms-writing-mode: tb-rl; -webkit-writing-mode: vertical-rl;	-moz-writing-mode: vertical-rl;	-ms-writing-mode: vertical-rl; writing-mode: vertical-rl }";
		cssStr += ".UbiAjaxViewervertical_lr { -ms-writing-mode: tb-lr; -webkit-writing-mode: vertical-lr; -moz-writing-mode: vertical-lr; -ms-writing-mode: vertical-lr; writing-mode: vertical-lr }";

        return cssStr;
    },
    Draw: function(divid, pagenum, ds, isprint) {
        if (typeof ds == "undefined") ds = 1.0;
        if (typeof isprint == "undefined") isprint = false;
        if (pagenum > this.doc.pages.GetSize() || pagenum <= 0) {
            alert(pagenum + "번째 페이지는 존재하지 않습니다.");
            return;
        }
        var page = this.doc.pages.GetAt(pagenum - 1);
        var urlstr = this.keyurl + "?jrffile=" + this.jrffile + "&key=" + this.key + "&resid=" + this.resid;
        var isPrint = isprint;
        var textitems = null;
        var drawcanvaslist = this.canvaslist;
        var cssStr = this.GetReportStyle(this.doc, ds);
        DrawPage(divid, this.doc, page, urlstr, ds, this.vid);

        function DrawPage(divid, doc, page, keyurl, ds, vid) {
            if (page.iscustom) {
                divid.innerHTML = page.contents;
                return;
            }
            var styleNode = document.createElement("style");
            styleNode.setAttribute("type", "text/css");
            if (_isIE && _ieVersion < 11) {
                styleNode.styleSheet.cssText = cssStr;
            } else {
                try {
                    styleNode.innerHTML = cssStr;
                } catch (e) {
                    styleNode.innerText = cssStr;
                }
            }
            divid.appendChild(styleNode);
            _ubi_cindex = 0;
            _ubi_iindex = 0;
            textitems = new Array();
            var items = page.items;
            for (var i = 0; i < items.GetSize(); i++) {
                var item = items.GetAt(i);
				if ( item.ispreview == false ) continue;
                if (item.GetClassname() == UbiTextItem.CLASSNAME) DrawTextItem(divid, doc, item, ds, vid);
                else if (item.GetClassname() == UbiLineItem.CLASSNAME) DrawLineItem(divid, doc, item, ds);
                else if (item.GetClassname() == UbiRectangleItem.CLASSNAME) DrawRectangleItem(divid, doc, item, ds);
                else if (item.GetClassname() == UbiCircleItem.CLASSNAME) DrawCircleItem(divid, doc, item, ds);
                else if (item.GetClassname() == UbiBarcodeItem.CLASSNAME) DrawBarcodeItem(divid, doc, item, keyurl, ds);
                else if (item.GetClassname() == UbiImageItem.CLASSNAME) DrawImageItem(divid, doc, item, keyurl, ds);
            }
            var charts = page.chartcomponents;
            for (var i = 0; i < charts.GetSize(); i++) {
                var chart = charts.GetAt(i);
                DrawChartComponent(divid, doc, chart, keyurl, ds);
            }

            function findIndex(value) {
                for (var i = 0; i < textitems.length; i++) {
                    if (value == textitems[i]) return i;
                }
                return -1;
            }

            function sortNumber(a, b) {
                return a - b;
            }
        };

        function DrawTextItem(divid, doc, item, ds, vid) {
            if (item.width == 0 || item.height == 0) return;
            var div = document.createElement("div");
            div.id = item.id;
            //div.className = vid + "ubidivtext " + vid + "font_" + item.fontid + " " + vid + "color_f_" + item.foregroundid + (item.transparent ? "" : " " + vid + "color_b_" + item.backgroundid);
			div.className = vid + "ubidivtext "+ ( item.transparent ?"": " "+ vid + "color_b_"+item.backgroundid);
            var x = Math.round(item.x * ds);
            var y = Math.round(item.y * ds);
            var width = Math.round((item.x + item.width) * ds) - x;
            var height = Math.round((item.y + item.height) * ds) - y;
            var leftMargin = Math.round(item.leftMargin * ds);
            var rightMargin = Math.round(item.rightMargin * ds);
            var topMargin = Math.round(item.topMargin * ds);
            var bottomMargin = Math.round(item.bottomMargin * ds);
            textitems.push(parseInt(x) + (parseInt(y) * parseInt(doc.docprop.width)));
            var divWidth = (width + 1) - (getBorderWidth("left", doc, item) + getBorderWidth("right", doc, item));
            var divHeight = (height + 1) - (getBorderWidth("top", doc, item) + getBorderWidth("bottom", doc, item));
            div.style.left = x + "px";
            div.style.top = y + "px";
            div.style.width = divWidth + "px";
            div.style.height = divHeight + "px";
            var borderwidth = 0;
            borderwidth = getBorderWidth("top", doc, item);
            if (borderwidth > 0) div.style.borderTop = borderwidth + "px " + getBorderStyle("top", doc, item) + " #" + getBorderColor("top", doc, item);
            borderwidth = getBorderWidth("right", doc, item);
            if (borderwidth > 0) div.style.borderRight = borderwidth + "px " + getBorderStyle("right", doc, item) + " #" + getBorderColor("right", doc, item);
            borderwidth = getBorderWidth("bottom", doc, item);
            if (borderwidth > 0) div.style.borderBottom = getBorderWidth("bottom", doc, item) + "px " + getBorderStyle("bottom", doc, item) + " #" + getBorderColor("bottom", doc, item);
            borderwidth = getBorderWidth("left", doc, item);
            if (borderwidth > 0) div.style.borderLeft = getBorderWidth("left", doc, item) + "px " + getBorderStyle("left", doc, item) + " #" + getBorderColor("left", doc, item);
            if (div.style.font.indexOf("bold") != -1) {
                div.style.letterSpacing = "-1";
            }
            var table = document.createElement("table");
            var tbody = document.createElement("tbody");
            var tr = document.createElement("tr");
            var td = document.createElement("td");
            //table.className = vid + "ubitable";
			//table.className = vid+"ubitable "+ vid + "font_"+ item.fontid +" "+ vid + "color_f_"+ item.foregroundid;
			// 90, 270도 회전인 경우 너비와 높이를 뒤바꾼다.
			if (item.textdirection2 == 2 || item.textdirection2 == 4) {
				table.style.width = (divHeight - (topMargin + bottomMargin)) + "px";
				table.style.height = (divWidth - (leftMargin + rightMargin)-2)+ "px"; // 120%~180% 에서 오른쪽정렬이 글자 일부  짤림 현상
			} else {
				table.style.width = (divWidth - (leftMargin + rightMargin)-2)+ "px"; // 120%~180% 에서 오른쪽정렬이 글자 일부  짤림 현상
				table.style.height = (divHeight - (topMargin + bottomMargin)) + "px";	
			}
			
			var tclassname = vid+"ubitd "+ vid + "font_"+ item.fontid +" "+ vid + "color_f_"+ item.foregroundid;
			if (item.textdirection2 == 1) {
				/*if (item.halign == 0)
					tclassname += " UbiAjaxViewervertical_lr";
				else*/
				tclassname += " UbiAjaxViewervertical";
				
			} else if (item.textdirection2 == 2) {
				tclassname += " UbiAjaxViewerrotate_90";
				
				// 원래 너비의 half를 기준점으로 잡아 회전
				var halfwidth = (divWidth - (leftMargin + rightMargin)-2) / 2;
				table.style.msTransformOrigin = halfwidth + "px " + halfwidth + "px";
				table.style.WebkitTransformOrigin = halfwidth + "px " + halfwidth + "px";
				table.style.MozTransformOrigin = halfwidth + "px " + halfwidth + "px";
				
			} else if (item.textdirection2 == 3) {
				tclassname += " UbiAjaxViewerrotate_180";
				
				/*table.style.msTransformOrigin = "50% 50%";
				table.style.WebkitTransformOrigin = "50% 50%";
				table.style.MozTransformOrigin = "50% 50%";*/
				
			} else if (item.textdirection2 == 4) {
				tclassname += " UbiAjaxViewerrotate_270";
				
				// 원래 높이의 half를 기준점으로 잡아 
				var halfheight = (divHeight - (topMargin + bottomMargin)) / 2;
				table.style.msTransformOrigin = halfheight + "px " + halfheight + "px";
				table.style.WebkitTransformOrigin = halfheight + "px " + halfheight + "px";
				table.style.MozTransformOrigin = halfheight + "px " + halfheight + "px";
			}
			table.className = tclassname;

            //table.style.width = (divWidth - (leftMargin + rightMargin) - 2) + "px";
            //table.style.height = (divHeight - (topMargin + bottomMargin)) + "px";
            if ((leftMargin + rightMargin + topMargin + bottomMargin) > 0) {
                table.style.marginLeft = (1 + leftMargin) + "px";
                table.style.marginRight = rightMargin + "px";
                table.style.marginTop = (1 + topMargin) + "px";
                table.style.marginBottom = bottomMargin + "px";
            }
            if (doc.docprop.language == "Arabic") tr.dir = "rtl";
            td.className = vid + "ubitd";
            //if (item.halign != 1) td.style.textAlign = item.getHAlign();
            //if (item.valign != 1) td.style.verticalAlign = item.getVAlign();
			// 90도 회전
			if (item.textdirection2 == 2) {
				if (item.halign == 0)
					td.style.verticalAlign = "bottom";
				else if (item.halign == 2)
					td.style.verticalAlign = "top";
				
				if (item.valign == 0)
					td.style.textAlign = "left";
				else if (item.valign == 2)
					td.style.textAlign = "right";
			}
			// 180도 회전
			else if (item.textdirection2 == 3) {
				if (item.halign == 0)
					td.style.textAlign = "right";
				else if (item.halign == 2)
					td.style.textAlign = "left";
				
				if (item.valign == 0)
					td.style.verticalAlign = "bottom";
				else if (item.valign == 2)
					td.style.verticalAlign = "top";
			}
			// 270도 회전
			else if (item.textdirection2 == 4) {
				if (item.halign == 0)
					td.style.verticalAlign = "top";
				else if (item.halign == 2)
					td.style.verticalAlign = "bottom";
				
				if (item.valign == 0)
					td.style.textAlign = "right";
				else if (item.valign == 2)
					td.style.textAlign = "left";
			}
			// 세로
			else if (item.textdirection2 == 1) {
				if (item.valign == 0)
					td.style.textAlign = "left";
				else if (item.valign == 2)
					td.style.textAlign = "right";
			}
			else {
				// Center가 아닐때만 정렬
				if (item.halign != 1)
					td.style.textAlign = item.getHAlign();
				if (item.valign != 1)
					td.style.verticalAlign = item.getVAlign();
			}

            td.style.width = table.style.width;
            td.style.height = table.style.height;
            var lineHeight = (getFontSize(doc, item, ds) + Math.round(item.lineSpace * ds));
            td.style.lineHeight = lineHeight + "px";
            if (item.underlined) td.style.textDecoration = "underline";
            if (item.linked) {
                var alink = document.createElement("a");
                if (item.linkstyle == "SCRIPT") {
                    alink.href = "javascript:" + item.linkfilename;
                } else if (item.linkstyle == "REPORT") {
                    alink.href = "javascript:refreshFrame('" + divid.parentNode.parentNode.parentNode.id + "','" + item.linkfilename + "','" + item.linkargs + "')";
                } else if (item.linkstyle == "WEBPAGE") {
                    var url = item.linkfilename;
                    if (item.linkfilename.indexOf(":/" + "/") == -1 && item.linkfilename.indexOf("mailto:") == -1) {
                        url = "http:/" + "/" + item.linkfilename;
                    }
                    alink.href = "javascript:window.open(\"" + url + item.linkargs + "\"); void 0;";
                }
                alink.appendChild(document.createTextNode(item.value));
                td.appendChild(alink);
            } else {
                if (item.styleinfo != null && item.styleinfo.styles != null && item.styleinfo.styles.GetSize() > 0) {
                    td.style.lineHeight = 1 + Math.round(item.lineSpace * ds) / 10;
                    if (_isIE && _ieVersion < 8) {
                        td.innerHTML = "<pre style=\"margin:0px; font:" + getFont(doc, item, ds) + "; line-height:" + lineHeight + "px\">" + item.value + "</pre>";
                    } else {
                        td.innerHTML = item.value;
                    }
                } else {
                    if (_isIE && _ieVersion < 8) {
                        td.innerHTML = "<pre style=\"margin:0px; font:" + getFont(doc, item, ds) + "; line-height:" + lineHeight + "px\">" + item.value + "</pre>";
                    } else {
                        if (item.htmlcodeproc == '1') {
                            td.innerHTML = item.value;
                        } else {
                            td.appendChild(document.createTextNode(item.value));
                        }
                    }
                }
            }
            tr.appendChild(td);
            tbody.appendChild(tr);
            table.appendChild(tbody);
            div.appendChild(table);
            divid.appendChild(div);
        };

        function DrawLineItem(divid, doc, item, ds) {
            var x = Math.round(item.x * ds);
            var y = Math.round(item.y * ds);
            var width = Math.round((item.x + item.width) * ds) - x;
            var height = Math.round((item.y + item.height) * ds) - y;
            if (width == 0 || height == 0) {
                var div = document.createElement("div");
                div.id = item.id;
                divid.appendChild(div);
                div.style.position = "absolute";
                div.style.top = y + "px";
                div.style.left = x + "px";
                div.style.width = ((width == 0) ? getLineThickness(doc, item) : (width + 1)) + "px";
                div.style.height = ((height == 0) ? getLineThickness(doc, item) : (height + 1)) + "px";
                if (_isIE && _ieVersion == 6) {
                    div.style.lineHeight = '0px';
                    div.style.fontSize = '0px';
                }
                if ((_isIE && _ieVersion == 6) && parseInt(div.style.height) == 1) {
                    div.style.border = "0px";
                    div.style.borderTop = "1px solid #" + getLineColor(doc, item);
                } else {
                    div.style.backgroundColor = "#" + getLineColor(doc, item);
                }
            } else {
                var canvas = document.createElement("canvas");
                canvas.id = item.id + (_ubi_cindex++) + "cv";
                divid.appendChild(canvas);
                if (!canvas.getContext) G_vmlCanvasManager.initElement(canvas);
                canvas.style.position = "absolute";
                canvas.style.left = x + "px";
                canvas.style.top = y + "px";
                canvas.width = width + 1;
                canvas.height = height + 1;
                var ctx = canvas.getContext("2d");
                ctx.save();
                ctx.lineWidth = getLineThickness(doc, item);
                ctx.strokeStyle = "#" + getLineColor(doc, item);
                ctx.beginPath();
                if (item.linedir == 1) {
                    ctx.moveTo(0, canvas.height);
                    ctx.lineTo(canvas.width, 0);
                } else {
                    ctx.moveTo(0, 0);
                    ctx.lineTo(canvas.width, canvas.height);
                }
                ctx.closePath();
                ctx.stroke();
                ctx.restore();
            }
        };

        function DrawRectangleItem(divid, doc, item, ds) {
            if (item.width == 0 && item.height == 0) return;
            var x = Math.round(item.x * ds);
            var y = Math.round(item.y * ds);
            var width = Math.round((item.x + item.width) * ds) - x;
            var height = Math.round((item.y + item.height) * ds) - y;
            var canvas = document.createElement("canvas");
            canvas.id = item.id + (_ubi_cindex++) + "cv";
            divid.appendChild(canvas);
            if (!canvas.getContext) G_vmlCanvasManager.initElement(canvas);
            canvas.style.position = "absolute";
            canvas.style.left = x + "px";
            canvas.style.top = y + "px";
            canvas.width = width + 1;
            canvas.height = height + 1;
            if (isPrint) {
                var canvasobj = new UbiCanvasObject();
                if (item.edgetype == 1) {
                    canvasobj.type = "ROUNDRECT";
                    canvasobj.radius = item.edgewidth;
                } else {
                    canvasobj.type = "RECT";
                }
                canvasobj.canvasid = canvas.id;
                canvasobj.linewidth = getLineThickness(doc, item);
                canvasobj.strokestyle = "#" + getLineColor(doc, item);
                if (!item.transparent) {
                    canvasobj.fillstyle = "#" + getBackgroundColor(doc, item);
                }
                drawcanvaslist[drawcanvaslist.length] = canvasobj;
            } else {
                var ctx = canvas.getContext("2d");
                ctx.save();
                ctx.lineWidth = getLineThickness(doc, item);
                ctx.strokeStyle = "#" + getLineColor(doc, item);
                ctx.beginPath();
                if (item.edgetype == 1) {
                    roundedRect(ctx, ctx.lineWidth / 2, ctx.lineWidth / 2, canvas.width - ctx.lineWidth, canvas.height - ctx.lineWidth, item.edgewidth);
                } else {
                    ctx.rect(ctx.lineWidth / 2, ctx.lineWidth / 2, canvas.width - ctx.lineWidth, canvas.height - ctx.lineWidth);
                }
                ctx.closePath();
                if (!item.transparent) {
                    ctx.fillStyle = "#" + getBackgroundColor(doc, item);
                    ctx.fill();
                }
                ctx.stroke();
                ctx.restore();
            }
        };

        function roundedRect(ctx, x, y, width, height, radius) {
            ctx.beginPath();
            ctx.moveTo(x, y + radius);
            ctx.lineTo(x, y + height - radius);
            ctx.quadraticCurveTo(x, y + height, x + radius, y + height);
            ctx.lineTo(x + width - radius, y + height);
            ctx.quadraticCurveTo(x + width, y + height, x + width, y + height - radius);
            ctx.lineTo(x + width, y + radius);
            ctx.quadraticCurveTo(x + width, y, x + width - radius, y);
            ctx.lineTo(x + radius, y);
            ctx.quadraticCurveTo(x, y, x, y + radius);
        };

        function DrawCircleItem(divid, doc, item, ds) {
            if (item.width == 0 && item.height == 0) return;
            var x = Math.round(item.x * ds);
            var y = Math.round(item.y * ds);
            var width = Math.round((item.x + item.width) * ds) - x;
            var height = Math.round((item.y + item.height) * ds) - y;
            var canvas = document.createElement("canvas");
            canvas.id = item.id + (_ubi_cindex++) + "cv";
            divid.appendChild(canvas);
            if (!canvas.getContext) G_vmlCanvasManager.initElement(canvas);
            canvas.style.position = "absolute";
            canvas.style.left = x + "px";
            canvas.style.top = y + "px";
            canvas.width = width + 1;
            canvas.height = height + 1;
            if (isPrint) {
                var canvasobj = new UbiCanvasObject();
                canvasobj.type = "CIRCLE";
                canvasobj.canvasid = canvas.id;
                canvasobj.linewidth = getLineThickness(doc, item);
                canvasobj.strokestyle = "#" + getLineColor(doc, item);
                if (!item.transparent) {
                    canvasobj.fillstyle = "#" + getBackgroundColor(doc, item);
                }
                drawcanvaslist[drawcanvaslist.length] = canvasobj;
            } else {
                var ctx = canvas.getContext("2d");
                ctx.save();
                ctx.lineWidth = getLineThickness(doc, item);
                ctx.strokeStyle = "#" + getLineColor(doc, item);
                var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);
                var cx = canvas.width / 2;
                var cy = canvas.height / 2;
                var rx = cx * KAPPA;
                var ry = cy * KAPPA;
                ctx.beginPath();
                ctx.moveTo(cx, ctx.lineWidth);
                ctx.bezierCurveTo(cx + rx, ctx.lineWidth, canvas.width - ctx.lineWidth, cy - ry, canvas.width - ctx.lineWidth, cy);
                ctx.bezierCurveTo(canvas.width - ctx.lineWidth, cy + ry, cx + rx, canvas.height - ctx.lineWidth, cx, canvas.height - ctx.lineWidth);
                ctx.bezierCurveTo(cx - rx, canvas.height - ctx.lineWidth, ctx.lineWidth, cy + ry, ctx.lineWidth, cy);
                ctx.bezierCurveTo(ctx.lineWidth, cy - ry, cx - rx, ctx.lineWidth, cx, ctx.lineWidth);
                ctx.closePath();
                if (!item.transparent) {
                    ctx.fillStyle = "#" + getBackgroundColor(doc, item);
                    ctx.fill();
                }
                ctx.stroke();
                ctx.restore();
            }
        };

        function DrawImageItem(divid, doc, item, keyurl, ds) {
            if (item.width == 0 || item.height == 0) return;
            var imageDiv = getImageDiv(doc, item, ds);
            divid.appendChild(imageDiv);
            var imageobj = doc.objects.Lookup(item.imageid);
            if (imageobj.loadtype == 1 && imageobj.loadsrc != "") {
                if (_isMobile) {
                    var image = getImage2(doc, item, keyurl, imageobj, ds);
                    imageDiv.appendChild(image);
                } else {
                    var canvas = getCanvas(doc, item, ds);
                    imageDiv.appendChild(canvas);
                    var canvasobj = null;
                    drawCanvas2(doc, canvas, item, keyurl, imageobj, ds);
                }
            } else if (imageobj.loadtype == 2 && imageobj.loadsrc != "") {
                getImageType2(imageDiv, doc, item, keyurl, imageobj, ds);
            }
            var borderDiv = getBorderDiv(doc, item, ds);
            divid.appendChild(borderDiv);
        };

        function DrawBarcodeItem(divid, doc, item, keyurl, ds) {
            if (item.width == 0 || item.height == 0) return;
            var imageDiv = getImageDiv(doc, item, ds);
            divid.appendChild(imageDiv);
            if (item.loadtype == 1 && item.loadsrc != "") {
                if (_isMobile) {
                    var image = getImage(doc, item, keyurl, ds);
                    imageDiv.appendChild(image);
                } else {
                    var canvas = getCanvas(doc, item);
                    imageDiv.appendChild(canvas);
                    drawCanvas(doc, canvas, item, keyurl, ds);
                }
            }
            var borderDiv = getBorderDiv(doc, item, ds);
            divid.appendChild(borderDiv);
        };

        function DrawChartComponent(divid, doc, chart, keyurl, ds) {
            if (chart.width == 0 || chart.height == 0) return;
            var imageDiv = getImageDiv(doc, chart, ds);
            divid.appendChild(imageDiv);
            if ((chart.loadtype == 1 || chart.loadtype == 2) && chart.loadsrc != "") {
                if (_isMobile) {
                    var image = getImage(doc, chart, keyurl, ds);
                    imageDiv.appendChild(image);
                } else {
                    var image = getChartImage(doc, chart, keyurl, ds);
                    imageDiv.innerHTML = image;
                }
            }
        };

        function getBorderColor(tp, doc, item) {
            if (tp == "top") return doc.colors.Lookup(doc.lines.Lookup(doc.borders.Lookup(item.borderid).top).colorid).color;
            else if (tp == "right") return doc.colors.Lookup(doc.lines.Lookup(doc.borders.Lookup(item.borderid).right).colorid).color;
            else if (tp == "bottom") return doc.colors.Lookup(doc.lines.Lookup(doc.borders.Lookup(item.borderid).right).colorid).color;
            else if (tp == "left") return doc.colors.Lookup(doc.lines.Lookup(doc.borders.Lookup(item.borderid).right).colorid).color;
        };

        function getBorderStyle(tp, doc, item) {
            if (tp == "top") return doc.lines.Lookup(doc.borders.Lookup(item.borderid).top).getStyle();
            else if (tp == "right") return doc.lines.Lookup(doc.borders.Lookup(item.borderid).right).getStyle();
            else if (tp == "bottom") return doc.lines.Lookup(doc.borders.Lookup(item.borderid).bottom).getStyle();
            else if (tp == "left") return doc.lines.Lookup(doc.borders.Lookup(item.borderid).left).getStyle();
        };

        function getBorderWidth(tp, doc, item) {
            var width;
            var style = getBorderStyle(tp, doc, item);
            if (tp == "top") width = doc.lines.Lookup(doc.borders.Lookup(item.borderid).top).getWidth();
            else if (tp == "right") width = doc.lines.Lookup(doc.borders.Lookup(item.borderid).right).getWidth();
            else if (tp == "bottom") width = doc.lines.Lookup(doc.borders.Lookup(item.borderid).bottom).getWidth();
            else if (tp == "left") width = doc.lines.Lookup(doc.borders.Lookup(item.borderid).left).getWidth();
            if (style == "none") width = 0;
            else {
                if (width % 2 == 1) width = parseInt(width / 2) + 1;
                else width = parseInt(width / 2);
            }
            return width;
        };

        function getLineThickness(doc, item) {
            var width = doc.lines.Lookup(item.lineid).thickness;
            if (width != 0) {
                if (width % 2 == 1) width = parseInt(width / 2) + 1;
                else width = parseInt(width / 2);
            }
            return width;
        };

        function getLineColor(doc, item) {
            return doc.colors.Lookup(doc.lines.Lookup(item.lineid).colorid).color;
        };

        function getBackgroundColor(doc, item) {
            return doc.colors.Lookup(item.backgroundid).color;
        };

        function getFont(doc, item, ds) {
            if (typeof ds == "undefined") ds = 1.0;
            return doc.fonts.Lookup(item.fontid).getFont(ds);
        };

        function getFontSize(doc, item, ds) {
            if (typeof ds == "undefined") ds = 1.0;
            return doc.fonts.Lookup(item.fontid).getFontSize(ds);
        };

        function getForegroundColor(doc, item) {
            return doc.colors.Lookup(item.foregroundid).color;
        };

        function getImageDiv(doc, item, ds) {
            var x = Math.round(item.x * ds);
            var y = Math.round(item.y * ds);
            var width = Math.round((item.x + item.width) * ds) - x;
            var height = Math.round((item.y + item.height) * ds) - y;
            var div = document.createElement("div");
            div.id = item.id;
            div.style.overflow = "hidden";
            div.style.position = "absolute";
            div.style.left = x + "px";
            div.style.top = y + "px";
            div.style.width = (width + 1) + "px";
            div.style.height = (height + 1) + "px";
            return div;
        };

        function getBorderDiv(doc, item, ds) {
            var x = Math.round(item.x * ds);
            var y = Math.round(item.y * ds);
            var width = Math.round((item.x + item.width) * ds) - x;
            var height = Math.round((item.y + item.height) * ds) - y;
            var div = document.createElement("div");
            div.style.backgroundColor = "transparent";
            div.style.position = "absolute";
            div.style.left = x + "px";
            div.style.top = y + "px";
            div.style.width = (width + 1) - (getBorderWidth("left", doc, item) + getBorderWidth("right", doc, item)) + "px";
            div.style.height = (height + 1) - (getBorderWidth("top", doc, item) + getBorderWidth("bottom", doc, item)) + "px";
            div.style.borderTop = getBorderWidth("top", doc, item) + "px " + getBorderStyle("top", doc, item) + " #" + getBorderColor("top", doc, item);
            div.style.borderRight = getBorderWidth("right", doc, item) + "px " + getBorderStyle("right", doc, item) + " #" + getBorderColor("right", doc, item);
            div.style.borderBottom = getBorderWidth("bottom", doc, item) + "px " + getBorderStyle("bottom", doc, item) + " #" + getBorderColor("bottom", doc, item);
            div.style.borderLeft = getBorderWidth("left", doc, item) + "px " + getBorderStyle("left", doc, item) + " #" + getBorderColor("left", doc, item);
            return div;
        };

        function getCanvas(doc, item, ctx) {
            var canvas = document.createElement("canvas");
            canvas.id = item.id + (_ubi_cindex++) + "cv";
            return canvas;
        };

        function getImage(doc, item, keyurl, ds) {
            var x = Math.round(item.x * ds);
            var y = Math.round(item.y * ds);
            var width = Math.round((item.x + item.width) * ds) - x;
            var height = Math.round((item.y + item.height) * ds) - y;
            var image = document.createElement("img");
            image.id = item.id + (_ubi_iindex++) + "img";
            image.src = keyurl + "&reqtype=3&daemonid=" + doc.daemonid + "&imageid=" + item.loadsrc;
            image.style.position = "absolute";
            image.style.left = 0 + "px";
            image.style.top = 0 + "px";
            image.style.width = (width + 1) + "px";
            image.style.height = (height + 1) + "px";
            return image;
        };

        function getImage2(doc, item, keyurl, imageobj, ds) {
            var x = Math.round(item.x * ds);
            var y = Math.round(item.y * ds);
            var width = Math.round((item.x + item.width) * ds) - x;
            var height = Math.round((item.y + item.height) * ds) - y;
            var image = document.createElement("img");
            image.id = item.id + (_ubi_iindex++) + "img";
            image.src = keyurl + "&reqtype=3&daemonid=" + doc.daemonid + "&imageid=" + imageobj.loadsrc;
            if (imageobj.fixedrate || imageobj.originalsize) {
                var imgleft = 0;
                var imgtop = 0;
                var imgwidth = (Math.round(imageobj.width * ds) / 3) + 1;
                var imgheight = (Math.round(imageobj.height * ds) / 3) + 1;
                if (imgwidth < (width + 1) && item.halign != 0) {
                    if (item.halign == 1) imgleft = ((width + 1) - imgwidth) / 2;
                    else if (item.halign == 2) imgleft = ((width + 1) - imgwidth);
                }
                if (imgheight < (height + 1) && item.valign != 0) {
                    if (item.valign == 1) imgtop = ((height + 1) - imgheight) / 2;
                    else if (item.valign == 2) imgtop = ((height + 1) - imgheight);
                }
                image.style.position = "absolute";
                image.style.left = imgleft + "px";
                image.style.top = imgtop + "px";
                image.style.width = imgwidth + "px";
                image.style.height = imgheight + "px";
            } else {
                image.style.position = "absolute";
                image.style.left = 0 + "px";
                image.style.top = 0 + "px";
                image.style.width = (width + 1) + "px";
                image.style.height = (height + 1) + "px";
            }
            return image;
        };

        function getImageType2(imageDiv, doc, item, keyurl, imageobj, ds) {
            var x = Math.round(item.x * ds);
            var y = Math.round(item.y * ds);
            var width = Math.round((item.x + item.width) * ds) - x;
            var height = Math.round((item.y + item.height) * ds) - y;
            _ubi_imgcount++;
            newImg = new Image();
            newImg.onload = function() {
                var imgWidth = Math.floor(this.width * ds * 0.75);
                var imgHeight = Math.floor(this.height * ds * 0.75);
                var innerhtml = "";
                if (item.valign != 0) {
                    innerhtml += "<table width=\"" + width + "px\" height=\"" + height + "px\" cellspacing='0'><tr><td align=\"" + item.getHAlign() + "\" valign=\"" + item.getVAlign() + "\">";
                }
                if (imageobj.originalsize) {
                    innerhtml += "<div style='left:0px;top:0px; overflow:hidden; '><img id=\"" + item.id + (_ubi_iindex++) + "img\" width=" + imgWidth + " height=" + imgHeight + " src='" + imageobj.loadsrc + "' style='";
                    if (imageobj.brightness > 0) {
                        innerhtml += " opacity:" + ((100 - imageobj.brightness * 2) / 100) + "; " + " alpha(opacity:" + (100 - imageobj.brightness * 2) + ");";
                    }
                    innerhtml += "'></div>";
                } else {
                    innerhtml += "<img id=\"" + item.id + (_ubi_iindex++) + "img\"";
                    innerhtml += " src=\"" + imageobj.loadsrc + "\"";
                    innerhtml += " style=\"";
                    if (imageobj.fixedrate) {
                        var hds = width / imgWidth;
                        var vds = height / imgHeight;
                        var imgds = Math.min(hds, vds);
                        innerhtml += " width:" + Math.floor(imgWidth * imgds) + "px; height:" + Math.floor(imgHeight * imgds) + "px; ";
                    } else {
                        innerhtml += " width:" + width + "px; height:" + height + "px;";
                    } if (imageobj.brightness > 0) {
                        innerhtml += " opacity:" + ((100 - imageobj.brightness * 2) / 100) + "; " + " alpha(opacity:" + (100 - imageobj.brightness * 2) + ");";
                    }
                    innerhtml += "\">";
                } if (item.valign != 0) {
                    innerhtml += "</td></tr></table>";
                }
                imageDiv.innerHTML = innerhtml;
                _ubi_imgcount--;
            };
            newImg.onerror = function() {
                _ubi_imgcount--;
            };
            newImg.src = imageobj.loadsrc;
        };

        function getChartImage(doc, chart, keyurl, ds) {
            var x = Math.round(chart.x * ds);
            var y = Math.round(chart.y * ds);
            var width = Math.round((chart.x + chart.width) * ds) - x;
            var height = Math.round((chart.y + chart.height) * ds) - y;
            var innerhtml = "";
            var imgurl = keyurl + "&reqtype=3&daemonid=" + doc.daemonid + "&imageid=" + chart.loadsrc;
            innerhtml += "<img id=\"chart_" + (_ubi_iindex++) + "img\"";
            innerhtml += " src=\"" + imgurl + "\"";
            innerhtml += " style=\"";
            innerhtml += " width:" + width + "px; height:" + height + "px;";
            innerhtml += "\">";
            return innerhtml;
        };

        function drawCanvas(doc, canvas, item, keyurl, ds) {
            var x = Math.round(item.x * ds);
            var y = Math.round(item.y * ds);
            var width = Math.round((item.x + item.width) * ds) - x;
            var height = Math.round((item.y + item.height) * ds) - y;
            if (!canvas.getContext) G_vmlCanvasManager.initElement(canvas);
            var ctx = canvas.getContext("2d");
            canvas.style.position = "absolute";
            canvas.style.left = 0 + "px";
            canvas.style.top = 0 + "px";
            canvas.width = width + 1;
            canvas.height = height + 1;
            var image = new Image();
            image.id = item.id + (_ubi_iindex++) + "img";
            image.onload = function() {
                ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
            };
            image.src = keyurl + "&reqtype=3&daemonid=" + doc.daemonid + "&imageid=" + item.loadsrc;
        };

        function drawCanvas2(doc, canvas, item, keyurl, imageobj, ds) {
            var x = Math.round(item.x * ds);
            var y = Math.round(item.y * ds);
            var width = Math.round((item.x + item.width) * ds) - x;
            var height = Math.round((item.y + item.height) * ds) - y;
            if (!canvas.getContext) G_vmlCanvasManager.initElement(canvas);
            var ctx = canvas.getContext("2d");
            canvas.style.position = "absolute";
            canvas.style.left = 0 + "px";
            canvas.style.top = 0 + "px";
            canvas.width = width + 1;
            canvas.height = height + 1;
            var imgleft = 0;
            var imgtop = 0;
            var imgwidth = canvas.width;
            var imgheight = canvas.height;
            if (imageobj.fixedrate || imageobj.originalsize) {
                imgwidth = (Math.round(imageobj.width * ds) / 3) + 1;
                imgheight = (Math.round(imageobj.height * ds) / 3) + 1;
                if (imgwidth < canvas.width && item.halign != 0) {
                    if (item.halign == 1) imgleft = (canvas.width - imgwidth) / 2;
                    else if (item.halign == 2) imgleft = (canvas.width - imgwidth);
                }
                if (imgheight < canvas.height && item.valign != 0) {
                    if (item.valign == 1) imgtop = (canvas.height - imgheight) / 2;
                    else if (item.valign == 2) imgtop = (canvas.height - imgheight);
                }
            }
            var image = new Image();
            image.id = item.id + (_ubi_iindex++) + "img";
            image.onload = function() {
                if (isPrint == false) {
                    ctx.drawImage(image, imgleft, imgtop, imgwidth, imgheight);
                }
            };
            if (imageobj.loadtype == 2) {
                image.src = imageobj.loadsrc;
            } else {
                image.src = keyurl + "&reqtype=3&daemonid=" + doc.daemonid + "&imageid=" + imageobj.loadsrc;
            } if (isPrint) {
                var canvasobj = new UbiCanvasObject();
                canvasobj.type = "IMAGE";
                canvasobj.canvasid = canvas.id;
                canvasobj.imageid = image.id;
                canvasobj.x = imgleft;
                canvasobj.y = imgtop;
                canvasobj.width = imgwidth;
                canvasobj.height = imgheight;
                canvasobj.src = image.src;
                drawcanvaslist[drawcanvaslist.length] = canvasobj;
            }
        };
    }
});
var UbiCanvasObject = Base.extend({
    type: "",
    divid: "",
    canvasid: "",
    imageid: "",
    left: 0,
    top: 0,
    width: 0,
    height: 0,
    src: "",
    linewidth: 0,
    strokestyle: "",
    fillstyle: "",
    radius: 0
});

var pdfInstallerUrl = "";
var _ubiDaemonValidation = false;
var _isFF = false;
var _isIE = false;
var _isChrome = false;
var _isOpera = false;
var _isSafari = false;
var _isKHTML = false;
var _isMacOS = false;
var _ieVersion = 6;
var _isMobile = false;

var mobileKeyWords = new Array('iPhone', 'iPod', 'iPad', 'BlackBerry', 'Android', 'Windows CE', 'LG', 'MOT', 'SAMSUNG',
		'SonyEricsson');
try {
	for ( var word in mobileKeyWords) {

		if (navigator.userAgent.match(mobileKeyWords[word]) != null) {

			_isMobile = true;
			break;
		}
	}
	;
} catch (e) {
}

if (navigator.userAgent.indexOf('Macintosh') != -1)
	_isMacOS = true;

if (navigator.userAgent.indexOf('Trident/7') != -1 && navigator.appName.indexOf("Netscape") != -1
		&& navigator.product == "Gecko") {
	_isIE = true;
	_ieVersion = 11;
} else if (navigator.userAgent.indexOf('Chrome') != -1) {
	if (navigator.userAgent.indexOf('OPR') != -1) {
		_isOpera = true;
	} else {
		_isChrome = true;
	}
} else if (navigator.userAgent.indexOf('Firefox') != -1) {
	_isFF = true;
} else if ((navigator.userAgent.indexOf('Safari') != -1) || (navigator.userAgent.indexOf('Konqueror') != -1)) {
	_isSafari = true;
} else if (navigator.userAgent.indexOf('Opera') != -1) {

	_isOpera = true;
	_OperaRv = parseFloat(navigator.userAgent.substr(navigator.userAgent.indexOf('Opera') + 6, 3));
} else if (navigator.appName.indexOf("Microsoft") != -1) {
	_isIE = true;
	if (navigator.appVersion.indexOf("MSIE 10.0") != -1 && document.compatMode != "BackCompat") {
		_ieVersion = 10;
	}
	if (navigator.appVersion.indexOf("MSIE 9.0") != -1 && document.compatMode != "BackCompat") {
		_ieVersion = 9;
	}
	if (navigator.appVersion.indexOf("MSIE 8.0") != -1 && document.compatMode != "BackCompat") {
		_ieVersion = 8;
	}
	if (navigator.appVersion.indexOf("MSIE 7.0") != -1) {
		_ieVersion = 7;
	}
} else {
	_isFF = true;
	var _FFrv = parseFloat(navigator.userAgent.split("rv:")[1]);
};

if (_isIE) {
	if (window.XMLHttpRequest == null)
		_ieVersion = 6;
};

var _ubi_searchPagePos = 0; // 스크롤로 2개의 페이지를 반쯤 거쳤을때에 좀더 많이 간 쪽을 현재 페이지로 계산하는 로직
// (뷰어를 Top 0 에 놓지 않고 많이 내렸을때에도 정상동작하게끔 처리)

// PDF6 버전에서 IE 안되는 부분있고
// Chrome에서 모든 PDF버전안됨(Chrome은 내장으로 PDF 뷰어를 제공함
function checkPdfReader() {
	var obj = null;

	// if( window.ActiveXObject ) {
	if (_isIE) {
		try {
			obj = new ActiveXObject("AcroPDF.PDF");
			if (obj != null)
				return true;
		} catch (e) {

			try {

				obj = new ActiveXObject("PDF.PdfCtrl");
				if (obj != null)
					return true;
			} catch (e1) {
			}
		}
	} else {
		var nav = navigator.plugins;
		for (var i = 0; i < nav.length; i++) {
			var name = nav[i].name;
			if (name.indexOf("Adobe Reader") != -1 || name.indexOf("Adobe PDF") != -1 || name.indexOf("Acrobat") != -1
					|| name.indexOf("Chrome PDF") != -1) {
				var version = nav[i].version;
				return true;
			}
		}
	}
	return false;
}

var _ubi_ChangeScaleReservedTimer = null;
var _ubi_rtl = false;
var _ubi_flicking_current_vid = 0;

var ubi_downloadTimer = null;
function getCookie(name) {
	var parts = document.cookie.split(name + "=");
	if (parts.length == 2)
		return parts.pop().split(";").shift();
}

function _ubi_gmAddEvent(obj, evt, fn) {
	evt = (evt.indexOf(" ") != -1) ? evt.split(" ") : [ evt ];
	for (i in evt) {
		var e = evt[i];
		if (e == "mousewheel") {
			if (obj.addEventListener)
				obj.addEventListener('DOMMouseScroll', fn, false);
			obj.onmousewheel = fn;
			break;
		}
		if (obj.addEventListener)
			obj.addEventListener((e == "mousewheel") ? "DOMMouseScroll" : e, fn, false);
		else if (obj.attachEvent)
			obj.attachEvent('on' + e, fn);
	}
}

function _ubi_gmRemoveAddEvent(obj, evt, fn) {
	evt = (evt.indexOf(" ") != -1) ? evt.split(" ") : [ evt ];
	for (i in evt) {
		var e = evt[i];
		if (e == "mousewheel") {
			if (obj.removeEventListener)
				obj.removeEventListener('DOMMouseScroll', fn, false);
			obj.onmousewheel = null;
			break;
		}
		if (obj.removeEventListener)
			obj.removeEventListener((e == "mousewheel") ? "DOMMouseScroll" : e, fn, false);
		else if (obj.detachEvent)
			obj.detachEvent('on' + e, fn);
	}
}

function _ubi_PopupMenuHiddenAll(visibleMenuID) {
	for (var i = 0; i < UbiViewers.length; i++) {
		UbiViewers[i].toolbar.toolbarobj.mHidePopup(visibleMenuID);
	}
}

// 클립보드 선택은 허용, 플리킹시에는 자동 선택해제
function _ubi_flicking_clearSelection() {
	if (document.selection) {
		document.selection.empty();
	} else if (window.getSelection) {
		window.getSelection().removeAllRanges();
	}
}

/*
 * function _ubi_viewer_drawPage(vid) { var viewer = window.UbiViewers[vid]; for
 * (var i=1; i<=viewer.totalPage; i++) { viewer.drawPage(viewer, i); } }
 */

function _ubi_gmGetWheel(e) {
	e = e || window.event;
	var delta = 0;
	if (e.wheelDelta)
		delta = e.wheelDelta / 120;
	else if (e.detail)
		delta = -e.detail / 3;
	return delta;
}

var _ubiviewer_objcount = 0;
var UbiViewers = []; // 멀티인스턴스 참조자
var UbiViewerAjax = Base
		.extend({

			key : "",
			page : 0,
			totalPage : 0,
			PrintDefaultType : "PDF",
			SaveDefaultType : "PDF",
			SaveExcelDefaultType : "EXCEL_TYPE1",

			// --------------------------------------------------------------------------------
			// 프레임의 휠마우스를 감시, 연이은 세로 스크롤시에 다음페이지 전환처리
			// --------------------------------------------------------------------------------
			mmAddEvent : _ubi_gmAddEvent,
			mmRemoveEvent : _ubi_gmRemoveAddEvent,
			mmGetWheel : _ubi_gmGetWheel,
			mmWheelScrollMode : "NORMAL", // NORMAL TOP BOTTOM
			mmWheelScrollTime : 0,
			// mmWheelScrollPageTime : 1000,
			toolbarComboClickTime : 500, // 콤보를 연이어 누를경우 이를 무시하고 몇 ms 뒤에 한번만
			// 반응할 것인가?
			SaveMenuEnableBackup : false, /*
			 * 저장하는 동안 저장메뉴의 Enable 상태를 백업했다가
			 * 완료되면 복원해줌
			 */
			exportSeq : 0,

			vid : null,
			viewer : this,

			resize : function() {
				try{
						if(this.params)
						{
						document.getElementById(this.params.divid + "_previewframe").style.height = (parseInt(document
								.getElementById(this.params.divid).style.height) - parseInt(document.getElementById(this.params.divid
								+ "_toolbar").style.height))
								+ 'px';
						}
				}catch(e){}
				
			},

			constructor : function(params) {

				// ================================================================================
				// CSS 내부삽입처리
				// ================================================================================
				if (!document.getElementById('UbiDefaultStyle')) {
					var cssStr = this.getDefaultStyle(params);
					var styleNode = document.createElement("style");
					styleNode.setAttribute("type", "text/css");
					styleNode.setAttribute("id", "UbiDefaultStyle");
					if (_isIE && _ieVersion < 11) {
						styleNode.styleSheet.cssText = cssStr;
					} else {
						try {
							styleNode.innerHTML = cssStr;
						} catch (e) { // Safari
							styleNode.innerText = cssStr;
						}
					}
					document.documentElement.appendChild(styleNode);
				}

				function createKey(key) {

					return params.jrffile.split('.')[0] + "_" + key;
				};
				
				// 화면 크기 변경시 마다 높이를 자동 조절함.
				_ubi_gmAddEvent(window, "resize", this.resize);

				this.params = {

					reqtype : "0",
					imageid : "",
					div : params.div || document.getElementById(params.divid),

					key : params.key || "",
					gatewayurl : params.gatewayurl || "",
					timeout : params.timeout || "60000",
					jrffile : params.jrffile || "",
					resid : params.resid || "",
					arg : params.arg || "",
					ismultireport : params.ismultireport || "false",
					multicount : params.multicount || "1",
					exportseq : params.exportseq || "",
					reporttitle : params.reporttitle || "",
					sheetname : params.sheetname || "",
					toolbar : params.toolbar || "true",
					resource : params.resource || "",
					divid : params.divid || params.div.id,
					skin : params.skin || "standard",
					scale : params.scale || "100",
					userscale : params.userscale || "0",
					isencrypt : params.isencrypt || "false",
					userwidth : params.userwidth || "0",
					userheight : params.userheight || "0",

					bgcolor : params.bgcolor || "#f3f3f3",
					bgimage : params.bgimage || "",
					flicking : params.flicking || "false",
					scrollpage : params.scrollpage || "false",
					isStreaming : params.isStreaming || "false",
					direction : params.direction || "", /* rtl 입력시 좌우 뒤바뀜 */
					language : params.language || "korean",
					printlimit : params.printlimit || "20",
					isexportchartimage : params.isexportchartimage || "true",
					excelExportLineItem : params.excelExportLineItem || "false",
					fontElement : params.fontElement || "",
					streamdata : params.streamdata || "",
					clienttype : params.clienttype || "",
		            datasetinfos : params.datasetinfos || "",
		            runtimedata: params.runtimedata || ""
				};
				this.vid = this.params.divid;
				/*
				 * if(!window.UbiViewers){window.UbiViewers=[];}
				 * window.UbiViewers[this.vid] = this;
				 * window.UbiViewers[_ubiviewer_objcount++] = this;
				 */

				var params = this.params;

				/***************************************************************
				 * 초기값 설정 *
				 **************************************************************/
				this.page = 1;
				this.totalPage = 0;
				this.toolbarHeight = 44;
				this.msgWidth = 380;
				this.msgHeight = 122;
				this.loadImgWidth = 35;
				this.loadImgHeight = 35;
				this.msg = "";

				// 다국어 메세지 설정 안해도 오류 없도록 처리
				if (typeof (_ubi_msg) == "undefined") {
					_ubi_msg = {
						'korean' : {
							"PrintDlgTitle" : "\uC778\uC1C4 \uBC94\uC704\uB97C \uC124\uC815\uD569\uB2C8\uB2E4.", // 인쇄
							// 범위를
							// 설정합니다.
							"PrintDlgAll" : "\uBAA8\uB450", // 모두
							"PrintDlgCurrent" : "\uD604\uC7AC", // 현재
							"PrintDlgFromTo" : "\uD398\uC774\uC9C0 \uC9C0\uC815", // 페이지
							// 지정
							"PrintDlgFrom" : "\uBD80\uD130", // 부터
							"PrintDlgTo" : "\uAE4C\uC9C0", // 까지
							"PrintDlgMent" : "※ \uC778\uC1C4\uB7C9\uC774 \uB9CE\uC544\uC11C \uBD80\uBD84\uC778\uC1C4\uB9CC \uAC00\uB2A5\uD569\uB2C8\uB2E4.", // 인쇄량이
							// 많아서
							// 부분인쇄만
							// 가능합니다.",
							"Button_OK" : "\uD655\uC778", // 확인
							"Button_Cancel" : "\uCDE8\uC18C", // 취소
							"PdfCheckMsg9" : "Adobe Reader\uC758 \uBC84\uC804\uC774 \uC124\uCE58\uB418\uC5B4\uC788\uC9C0 \uC54A\uAC70\uB098, 9 \uBC84\uC804 \uC774\uD558\uC758 \uC624\uB798\uB41C \uBC84\uC804\uB9CC \uC124\uCE58\uB418\uC5B4 \uC788\uC2B5\uB2C8\uB2E4.", //
							"PdfCheckMsg6" : "Adobe Reader\uC758 \uBC84\uC804\uC774 \uC124\uCE58\uB418\uC5B4\uC788\uC9C0 \uC54A\uAC70\uB098, 6 \uBC84\uC804 \uC774\uD558\uC758 \uC624\uB798\uB41C \uBC84\uC804\uB9CC \uC124\uCE58\uB418\uC5B4 \uC788\uC2B5\uB2C8\uB2E4.", //
							"PdfGuideMsg" : "<a href='http:/"
									+ ""
									+ "/get.adobe.com/kr/reader/' target='_blank' style='text-decoration:none; color:red; cursor:pointer;'><b>\uC5B4\uB3C4\uBE44 \uD648\uD398\uC774\uC9C0</b></a>\uC5D0\uC11C \uCD5C\uC2E0 Adobe Reader\uB97C<br> \uC124\uCE58\uD558\uC2DC\uAE30 \uBC14\uB78D\uB2C8\uB2E4." //
						}
					};
				}

				if (pdfInstallerUrl.length == 0) {

					this.msgWidth = 350;
					msg = "<table cellspacing='0' width='" + this.msgWidth + "px' height='" + this.msgHeight
							+ "px' style='margin:0; padding:0px; border;1px solid #000000;' background='"
							+ this.params.resource + "/images/background.png'>";
					msg += "	<tr>";
					msg += "		<td height='14px' align='right' colspan='2'>";
					msg += "			<img src='"
							+ this.params.resource
							+ "/images/close.gif' width='13' height='13' style='cursor:pointer;' onclick=\"document.getElementById('{VIEREW_ID}_msg').style.display='none';\">";
					msg += "		</td>";
					msg += "	</tr>";
					msg += "	<tr>";
					msg += "		<td align='center' width='40' valign='top' style='padding-top:10px'>";
					msg += "			<img src='" + this.params.resource + "/images/pdf.gif' width='32' height='32'>";
					msg += "		</td>";
					msg += "		<td style='padding:10px;' align='left' valign='top'>";
					if (_ieVersion > 9)
						msg += "	" + _ubi_msg[this.params.language].PdfCheckMsg9 + "<br><br>";
					else
						msg += "	" + _ubi_msg[this.params.language].PdfCheckMsg6 + "<br><br>";
					msg += "	" + _ubi_msg[this.params.language].PdfGuideMsg;
					// msg += " <a href='http:/";
					// msg += "/get.adobe.com/kr/reader/' target='_blank'
					// style='text-decoration:none; color:red;
					// cursor:pointer;'><b>어도비 홈페이지</b></a>에서 최신 Adobe
					// Reader를<br><br> 설치하시기 바랍니다.";

					msg += "		</td>";
					msg += "</tr>";
					msg += "</table>";
				} else {

					this.msgWidth = 380;

					msg = "<table cellspacing='0' width='" + this.msgWidth + "px' height='" + this.msgHeight
							+ "px' style='margin:0; padding:0px; border;1px solid #000000;' background='"
							+ this.params.resource + "/images/background.png'>";
					msg += "	<tr>";
					msg += "		<td align='center' width='40px' valign='top' style='padding-top:5px' rowspan='2'>";
					msg += "			<img src='" + this.params.resource
							+ "/images/pdf.gif' width='32' height='32' align='absmiddle'>";
					msg += "		</td>";
					msg += "		<td style='padding:10px 10px 0px 10px;' align='left' valign='top'>";
					if (_ieVersion > 9)
						msg += "	" + _ubi_msg[this.params.language].PdfCheckMsg9 + "<br><br>";
					else
						msg += "	" + _ubi_msg[this.params.language].PdfCheckMsg6 + "<br><br>";
					msg += "		</td>";
					msg += "		<td align='right' valign='top'>";
					msg += "			<img src='"
							+ this.params.resource
							+ "/images/close.gif' style='cursor:pointer;' width='13' height='13' style='cursor:pointer;'onclick=\"document.getElementById('{VIEREW_ID}_msg').style.display='none';\">";
					msg += "		</td>";
					msg += "	</tr>";
					msg += "	<tr>";
					msg += "		<td style='padding:5px 10px 0px 20px;' align='left' valign='top' colspan='2'>";
					msg += "			1. <a href='http:/";
					msg += "/get.adobe.com/kr/reader/' target='_blank' style='text-decoration:none; color:red; cursor:pointer;'><b>어도비 홈페이지</b></a>에서 최신 Adobe Reader를 설치<br><br>";
					msg += "			2. Adobe Reader 설치 파일을 직접  <a onclick='viewer.downloadPdfInstaller(viewer);' style='text-decoration:none; color:red; cursor:pointer;'><b>다운로드</b></a> 후 설치<br><br>";
					msg += "			3. Adobe Reader 외 타사 Reader 사용 시 파일로 <a onclick='viewer.downloadPdf(viewer);' style='text-decoration:none; color:red; cursor:pointer;'><b>저장</b></a>";
					msg += "		</td>";
					msg += "	</tr>";
					msg += "</table>";
				}

				/***************************************************************
				 * Div 생성 *
				 **************************************************************/
				this.divMain = null;
				this.divToolbar = null;
				this.divPreviewFrame = null;
				this.divPreview = null;
				// this.divPreviewPage = null;
				this.divCanvas = null;
				this.divPrint = null;
				this.divLoadImage = null;
				this.divMsg = null;
				this.divDownload = null;
				this.divPreviewBottom = null;

				this.toolbar = null;
				this.flicker = null;
				this.ubidocument = null;

				/***************************************************************
				 * UbiViewer Div *
				 **************************************************************/
				this.divMain = params.div;
				var divMain = this.divMain;

				var divMainWidth = divMain.style.width;
				var divMainHeight = divMain.style.height;

				if (divMain.style.width.indexOf("%") != -1) {

					divMain.style.width = (windowWidth() * (parseInt(divMain.style.width) / 100)) + "px";
				}
				if (divMain.style.height.indexOf("%") != -1) {

					divMain.style.height = (windowHeight() * (parseInt(divMain.style.height) / 100)) + "px";
				}

				if (divMainWidth.length == 0)
					divMain.style.width = windowWidth() + "px";
				if (divMainHeight.length == 0)
					divMain.style.height = windowHeight() + "px";

				if (divMain.style.marginLeft != "")
					divMain.style.width = parseInt(divMain.style.width) - parseInt(divMain.style.marginLeft) + "px";

				if (divMain.style.marginTop != "")
					divMain.style.height = parseInt(divMain.style.height) - parseInt(divMain.style.marginTop) + "px";

				divMain.style.textAlign = "center";

				/***************************************************************
				 * Toolbar Div *
				 **************************************************************/
				this.divToolbar = document.createElement("div");
				var divToolbar = this.divToolbar;

				divToolbar.id = params.divid + "_toolbar";

				if (params.toolbar == "false")
					this.toolbarHeight = 0;

				divToolbar.style.height = this.toolbarHeight + 'px';
				divMain.appendChild(divToolbar);

				this.toolbar = new PreviewToolbar({
					viewer : this,
					divid : divToolbar.id,
					skin : params.skin,
					scale : params.scale
				});

				/***************************************************************
				 * PreviewFrame Div *
				 **************************************************************/
				this.divPreviewFrame = document.createElement("div");
				var divPreviewFrame = this.divPreviewFrame;

				divPreviewFrame.id = params.divid + "_previewframe";
				if (params.bgimage == "")
					divPreviewFrame.style.backgroundColor = params.bgcolor;
				else
					divPreviewFrame.style.backgroundImage = "url(" + params.bgimage + ")";

				divPreviewFrame.style.position = "relative";
				divPreviewFrame.style.margin = "0px";
				divPreviewFrame.style.padding = "0px";
				divPreviewFrame.style.width = "100%";
				divPreviewFrame.style.height = (parseInt(divMain.style.height) - parseInt(divToolbar.style.height))
						+ 'px';
				divPreviewFrame.style.overflow = "auto";
				divPreviewFrame.style.textAlign = "center";

				// AM 2013-0314-1030 플리킹 드래그와 셀렉션 막기
				divPreviewFrame.style.MozUserSelect = "none";
				divPreviewFrame.style.webkitUserSelect = "none";

				divMain.appendChild(divPreviewFrame);

				/***************************************************************
				 * Print Div *
				 **************************************************************/
				this.divPrint = document.createElement("div");
				var divPrint = this.divPrint;

				divPrint.id = params.divid + "_print";
				divPrint.style.display = "none";
				divMain.appendChild(divPrint);

				/***************************************************************
				 * Download Div *
				 **************************************************************/
				this.divDownload = document.createElement("div");
				var divDownload = this.divDownload;

				divDownload.id = params.divid + "_download";
				divDownload.style.display = "none";

				divMain.appendChild(divDownload);

				/***************************************************************
				 * Msg Div *
				 **************************************************************/
				this.divMsg = document.createElement("div");
				var divMsg = this.divMsg;

				divMsg.id = params.divid + "_msg";
				divMsg.style.display = "none";

				divMsg.style.display = "none";
				divMsg.style.position = "absolute";
				divMsg.style.left = (parseInt(this.divMain.style.width) - this.msgWidth) / 2 + "px";
				divMsg.style.top = (parseInt(this.divMain.style.height) - this.msgHeight) / 2 + "px";
				divMsg.style.width = (this.msgWidth + "px");
				divMsg.style.height = (this.msgHeight + "px");

				divMsg.style.fontFamily = "Tahoma";
				divMsg.style.fontSize = "11px";

				divMsg.style.margin = "0 auto";
				divMsg.style.backgroundColor = "#f3f3f3";
				divMsg.style.border = "2px solid #000000";

				divMain.appendChild(divMsg);

				/***************************************************************
				 * LoadImage Div *
				 **************************************************************/
				this.divLoadImage = document.createElement("div");
				var divLoadImage = this.divLoadImage;

				divLoadImage.style.display = "none";
				divLoadImage.style.position = "absolute";
				divLoadImage.style.left = (parseInt(divMain.style.width) - this.loadImgWidth) / 2 + 'px';// "50%";
				divLoadImage.style.top = (parseInt(divMain.style.height) - this.loadImgHeight) / 2 + 'px';// "45%";
				divLoadImage.style.width = this.loadImgWidth + "px";
				divLoadImage.style.height = this.loadImgHeight + "px";
				divLoadImage.style.margin = "0 auto";

				var loadImg = "<img src='" + params.resource + "/images/page_loading.gif' width='" + this.loadImgWidth
						+ "px' height='" + this.loadImgHeight + "px'>";
				divLoadImage.innerHTML = loadImg;

				divMain.appendChild(divLoadImage);

				/***************************************************************
				 * Preview Div *
				 **************************************************************/
				this.divPreview = document.createElement("div");
				var divPreview = this.divPreview;

				divPreview.id = params.divid + "_preview";
				divPreview.vid = params.divid; // 이벤트 캡처시 멀티인스턴스 구별용도로 사용

				divPreview.style.borderTop = "1px solid #a0a0a0";
				divPreview.style.borderLeft = "1px solid #a0a0a0";
				divPreview.style.borderRight = "1px solid #a0a0a0";
				divPreview.style.borderBottom = "1px solid #A0A0A0";

				divPreview.style.backgroundColor = "#ffffff";

				divPreview.style.marginTop = "10px";
				divPreview.style.marginRight = "auto";
				divPreview.style.marginBottom = "10px";
				divPreview.style.marginLeft = "auto";

				divPreview.style.position = "relative";
				divPreview.style.width = ((params.userwidth > 0) ? params.userwidth : 595) + "px";
				divPreview.style.height = ((params.userheight > 0) ? params.userheight : 842) + "px";

				divPreview.style.overflow = "hidden";
divPreview.style.display = "none";
				/*
				 * divPreview.style.boxShadow = "10px 10px 5px #666666";
				 * divPreview.style.MozBoxShadow = "10px 10px 5px #666666";
				 * divPreview.style.WebkitBoxShadow = "10px 10px 5px #666666";
				 */
				divPreviewFrame.appendChild(divPreview);

				/***************************************************************
				 * Preview Bottom Div *
				 **************************************************************/
				/*
				 * this.divPreviewBottom = document.createElement("div"); var
				 * divPreviewBottom = this.divPreviewBottom;
				 * 
				 * divPreviewBottom.id = params.divid + "_previewbottom";
				 * divPreviewBottom.style.height = "20px";
				 * divPreviewFrame.appendChild(divPreviewBottom);
				 */
			},

			destroy : function() {
				this.params = null;
				this.divMain = null;
				this.divToolbar = null;
				this.divPreviewFrame = null;
				this.divPreview = null;
				this.divCanvas = null;
				this.divPrint = null;
				this.divLoadImage = null;
				this.divMsg = null;
				this.divDownload = null;
				this.divPreviewBottom = null;
				this.toolbar.destroy();
				this.toolbar = null;
				this.flicker = null;
				this.ubidocument = null;

				_ubi_gmRemoveAddEvent(window, "resize", this.resize);
				
				this.mmAddEvent = null;
				this.mmRemoveEvent = null;
				this.mmGetWheel = null;
				
				this.viewer = null;
			},
			
			aboutBox : function() {

				document.getElementById(this.vid + 'UbiToolbarPop1_About').style.display = '';
			},
			getExportHtmlString : function(viewer, reqtype) {

				var expireDate = new Date();
				// 어제 날짜를 쿠키 소멸 날짜로 설정한다.
				expireDate.setDate(expireDate.getDate() - 1);
				document.cookie = "filecookieno" + "= " + "; expires=" + expireDate.toGMTString() + "; path=/";

				if (!document.getElementById('UbiDownloadDiv')) {
					var tempFrame = document.createElement("div");
					tempFrame.id = 'UbiDownloadDiv';
					tempFrame.style.position = "absolute";
					tempFrame.style.margin = "0px";
					tempFrame.style.padding = "0px";
					tempFrame.style.left = "0px";
					tempFrame.style.top = "0px";
					tempFrame.style.width = "100%";
					tempFrame.style.height = "100%";
					tempFrame.style.display = 'none';
					tempFrame.style.zIndex = 999999999;
					tempFrame.innerHTML = "<table width='100%' height='100%'><tr><td align='center' valign='middle''><img src='"
							+ this.params.resource + "/images/downloading.gif'></td></tr></table>";
					document.documentElement.appendChild(tempFrame);
				}
				document.getElementById('UbiDownloadDiv').style.display = '';
				var downloadToken = new Date().getTime();
				this.SaveMenuEnableBackup = this.getEnableToolbar("SAVE");
				this.setEnableToolbar("SAVE", false);

				if (!document.getElementById('UbiExportFrame')) {
					var tempFrame = document.createElement("div");
					tempFrame.style.position = "absolute";
					tempFrame.style.margin = "0px";
					tempFrame.style.padding = "0px";
					tempFrame.style.left = "-1px";
					tempFrame.style.width = "1px";
					tempFrame.style.height = "1px";
					tempFrame.innerHTML = "<iframe id='UbiExportFrame' name='UbiExportFrame' width='1' height='1' frameborder='0' scrolling='no'></iframe>";
					document.documentElement.appendChild(tempFrame);
				}
				var innerHtml = "";
				if (_isMobile)
					innerHtml += "<form id='" + this.vid + "UbiExportForm'  name='" + this.vid
							+ "UbiExportForm' method='post' action='" + viewer.params.gatewayurl + "' target='_blank'>";
				else
					innerHtml += "<form id='" + this.vid + "UbiExportForm' name='" + this.vid
							+ "UbiExportForm' method='post' action='" + viewer.params.gatewayurl
							+ "' target='UbiExportFrame'>";
				innerHtml += "<input type='hidden' name='reqtype' value='" + reqtype + "'>";
				innerHtml += "<input type='hidden' name='jrffile' value='" + viewer.params.jrffile + "'>";
				innerHtml += "<input type='hidden' name='resid' value='" + viewer.params.resid + "'>";
				innerHtml += "<input type='hidden' name='key' value='" + viewer.params.key + "'>";
				innerHtml += "<input type='hidden' name='daemonid' value='" + viewer.ubidocument.doc.daemonid + "'>";
				innerHtml += "<input type='hidden' name='reporttitle' value='" + viewer.params.reporttitle + "'>";
				innerHtml += "<input type='hidden' name='isStreaming' value='" + viewer.params.isStreaming + "'>";
				innerHtml += "<input type='hidden' name='exportseq' value='" + viewer.exportSeq + "'>";

				innerHtml += "<input type='hidden' name='filecookieno' value='" + downloadToken + "'>";

				// AM 2013-12-27 김기득부장요청, 이성욱이사분석
				if (reqtype == "13") {
					innerHtml += "<input type='hidden' name='arg' value='" + viewer.params.arg + "'>";
					innerHtml += "<input type='hidden' name='sheetname' value='" + viewer.params.sheetname + "'>";
					innerHtml += "<input type='hidden' name='isencrypt' value='" + viewer.params.isencrypt + "'>";
					innerHtml += "<input type='hidden' name='ismultireport' value='" + viewer.params.ismultireport
							+ "'>";
					innerHtml += "<input type='hidden' name='multicount' value='" + viewer.params.multicount + "'>";
					innerHtml += "<input type='hidden' name='streamdata' value='" + viewer.params.streamdata + "'>";
					innerHtml += "<input type='hidden' name='runtimedata' value='" + viewer.params.runtimedata + "'>";
					innerHtml += "<input type='hidden' name='datasetinfos' value='" + viewer.params.datasetinfos + "'>";
					innerHtml += "<input type='hidden' name='clienttype' value='" + viewer.params.clienttype + "'>";
				}

				if (reqtype == "12" || reqtype == "13")
					innerHtml += "<input type='hidden' name='excelExportLineItem' value='" + viewer.params.excelExportLineItem + "'>";

				innerHtml += "</form>";

				this.waitDownloadComplete(downloadToken);

				return innerHtml;
			},

			waitDownloadComplete : function(downloadToken) {

				var T = this;
				ubi_downloadTimer = window.setInterval(function() {
					if (downloadToken == getCookie("filecookieno")) {
						document.getElementById('UbiDownloadDiv').style.display = 'none';
						window.clearInterval(ubi_downloadTimer);

						T.setEnableToolbar("SAVE", T.SaveMenuEnableBackup);
					}
				}, 1000);
			},

			/*******************************************************************
			 * Export PDF(Embeded toolbar) *
			 ******************************************************************/
			exportPdf : function(ubiviewer) {
				if (!this.viewer) return;
//				viewer = this; // export 함수에 널 또는 개체 모두 동작하도록 처리(매뉴얼은 널로 가이드하되 과거호환성 유지)
				this.divDownload.innerHTML = this.getExportHtmlString(this, "11");
				document.forms[this.vid + 'UbiExportForm'].submit();
			},

			/*******************************************************************
			 * Export Excel(Embeded toolbar) Type 1 *
			 ******************************************************************/
			exportExcel : function(ubiviewer) {
//				viewer = this; // export 함수에 널 또는 개체 모두 동작하도록 처리(매뉴얼은 널로 가이드하되 과거호환성 유지)
				this.divDownload.innerHTML = this.getExportHtmlString(this, "12");
				document.forms[this.vid + 'UbiExportForm'].submit();
			},

			/*******************************************************************
			 * Export Excel(Embeded toolbar) Type 2 *
			 ******************************************************************/
			exportExcelNo : function(ubiviewer) {
//				viewer = this; // export 함수에 널 또는 개체 모두 동작하도록 처리(매뉴얼은 널로 가이드하되 과거호환성 유지)
				this.divDownload.innerHTML = this.getExportHtmlString(this, "13");
				document.forms[this.vid + 'UbiExportForm'].submit();
			},

			/*******************************************************************
			 * Export Rtf(Embeded toolbar) *
			 ******************************************************************/
			exportRtf : function(viewer) {
//				viewer = this; // export 함수에 널 또는 개체 모두 동작하도록 처리(매뉴얼은 널로 가이드하되 과거호환성 유지)
				this.divDownload.innerHTML = this.getExportHtmlString(this, "14");
				document.forms[this.vid + 'UbiExportForm'].submit();
			},

			/*******************************************************************
			 * Export Hwp(Embeded toolbar) *
			 ******************************************************************/
			exportHwp : function(viewer) {
//				viewer = this; // export 함수에 널 또는 개체 모두 동작하도록 처리(매뉴얼은 널로 가이드하되  과거호환성 유지)
				this.divDownload.innerHTML = this.getExportHtmlString(this, "15");
				document.forms[this.vid + 'UbiExportForm'].submit();
			},

			/*******************************************************************
			 * Export Pptx(Embeded toolbar) *
			 ******************************************************************/
			exportPptx : function(viewer) {
//				viewer = this; // export 함수에 널 또는 개체 모두 동작하도록 처리(매뉴얼은 널로 가이드하되 과거호환성 유지)
				this.divDownload.innerHTML = this.getExportHtmlString(this, "16");
				document.forms[this.vid + 'UbiExportForm'].submit();
			},

			/*******************************************************************
			 * Export Hml(Embeded toolbar) *
			 ******************************************************************/
			exportHml : function(viewer) {
//				viewer = this; // export 함수에 널 또는 개체 모두 동작하도록 처리(매뉴얼은 널로 가이드하되 과거호환성 유지)
				this.divDownload.innerHTML = this.getExportHtmlString(this, "17");
				document.forms[this.vid + 'UbiExportForm'].submit();
			},

			/*******************************************************************
			 * Export Docx(Embeded toolbar) *
			 ******************************************************************/
			exportDocx : function(viewer) {
//				viewer = this; // export 함수에 널 또는 개체 모두 동작하도록 처리(매뉴얼은 널로 가이드하되 과거호환성 유지)
				this.divDownload.innerHTML = this.getExportHtmlString(this, "18");
				document.forms[this.vid + 'UbiExportForm'].submit();
			},

			/*******************************************************************
			 * Print(Embeded toolbar) *
			 ******************************************************************/
			print : function(viewer) {
				if (this.viewer) {
//					viewer = this; // export 함수에 널 또는 개체 모두 동작하도록 처리(매뉴얼은 널로 가이드하되 과거호환성 유지)
					this.printPDF(this, false);
				} else {
					console.log("this.viewer is null");
				}
			},

			/*******************************************************************
			 * PrintSet(Embeded toolbar) *
			 ******************************************************************/
			printSet : function(viewer) {
//				viewer = this; // export 함수에 널 또는 개체 모두 동작하도록 처리(매뉴얼은 널로 가이드하되 과거호환성 유지)
				this.printPDF(this, true);
			},

			printPDF : function(viewer, isPrintSet) {
				if (typeof (viewer) == "boolean") {
					isPrintSet = viewer; // 첫번째 인자를 isPrintSet값으로 설정시 처리 (매뉴얼은 인자 1개로 공식가이드 / 호환성은 유지)
				}
				viewer = this; // export 함수에 널 또는 개체 모두 동작하도록 처리(매뉴얼은 널로 가이드하되 과거호환성 유지)

				var url = viewer.params.gatewayurl + "?reqtype=2&jrffile=" + viewer.params.jrffile + "&resid="
						+ viewer.params.resid + "&key=" + viewer.params.key + "&arg=&pagenum=&imageid=&exportseq="
						+ viewer.exportSeq;
				var pdfVersion = "0";
				var msgFlag = false;

				if (_isIE) {
					if (checkPdfReader()) {

						viewer.divPrint.style.display = "";
						viewer.divPrint.innerHTML = "";

						var obj = document.createElement("object");
						obj.setAttribute('id', this.vid + 'UbiPdfDoc');
						obj.setAttribute('classid', 'CLSID:CA8A9780-280D-11CF-A24D-444553540000');
						obj.setAttribute('type', 'application/pdf');
						obj.style.position = "absolute";
						obj.style.top = "0px";
						obj.style.width = "0px";
						obj.style.height = "0px";
						viewer.divPrint.appendChild(obj);

						// viewer.divPrint.innerHTML = "<object
						// classid='CLSID:CA8A9780-280D-11CF-A24D-444553540000'
						// id='"+this.vid+"UbiPdfDoc' type='application/pdf'
						// data='blank' style='width:0px;height:0px'></object>";
						var isAdobePrint = false;
						try {
							var pdfobj = document.getElementById(this.vid + "UbiPdfDoc");
							pdfVersion = pdfobj.getVersions();
							pdfVersion = pdfVersion.substring(pdfVersion.indexOf('=') + 1, pdfVersion.indexOf('.'));
							if ((_ieVersion > 10) && parseInt(pdfVersion) < 10) {
								// IE버전이 10이상이고 Acrobat Reader가 10 버전 이하일 경우는
								// DownLoad 인쇄
								isAdobePrint = false;
							} else {
								isAdobePrint = true;
							}
						} catch (e) {
							// 버전정보를 가져오지 못할 경우 PDF는 설치되어 잇는데 PDF 하위버전으로 함수가 제공
							// 안될 경우이므로 File로 Download
							isAdobePrint = false;
						}

						// File로 Download
						if (isAdobePrint == false) {
							viewer.divPrint.innerHTML = "";
							this.exportPdf(viewer);
							return;
						}
					} else
						msgFlag = true;

					if (!msgFlag) {
						// if( _ieVersion > 9 ) {
						// if( parseInt(pdfVersion) <= 9 ) { // IE10 이고 Reader
						// Version이 9이하 이면
						// msgFlag = true;
						// }
						// }
						// else {
						if (parseInt(pdfVersion) <= 6) {
							msgFlag = true;
						}
						// }
					}

					if (msgFlag) {

						if (viewer.divMsg.style.display == "none")
							viewer.divMsg.innerHTML = msg.replace(/{VIEREW_ID}/g, viewer.vid);

						viewer.divMsg.style.display = "";
					} else {

						document.getElementById(this.vid + 'UbiPdfDoc').src = url;
						if (isPrintSet)
							document.getElementById(this.vid + 'UbiPdfDoc').printWithDialog();
						else
							document.getElementById(this.vid + 'UbiPdfDoc').printAll();
					}
					// KKD 2013.03.07 E
				} else {
					// FireFox 또는 Chrome일 경우 새창에 PDF를 띄움.
					// if (_isFF || _isChrome) { // Firefox는 PDF를 해석하여 브라우저에서
					// HTML로 다시 만들어 보여줌으로 정확하게 해석을 못할 경우가 있음
					if (_isChrome) {
						// IE가 아닌 경우 생성된 PDF파일을 팝업 페이지를 띄움.
						var win = window.open('', 'Ubi_PDF', 'menubar=no,toolbar=no,status=no,scrollbars=no');
						var postUrl = "<form name='pdfForm' method='post' action='" + viewer.params.gatewayurl
								+ "#toolbar=1' target='Ubi_PDF'>";
						postUrl += "<input type='hidden' name='reqtype' value='2'>";
						postUrl += "<input type='hidden' name='jrffile' value='" + viewer.params.jrffile + "'>";
						postUrl += "<input type='hidden' name='resid' value='" + viewer.params.resid + "'>";
						postUrl += "<input type='hidden' name='key' value='" + viewer.params.key + "'>";
						postUrl += "<input type='hidden' name='daemonid' value='" + viewer.ubidocument.doc.daemonid
								+ "'>";
						postUrl += "<input type='hidden' name='exportseq' value='" + viewer.exportSeq + "'>";
						postUrl += "</form>\n";
						viewer.divPrint.innerHTML = postUrl;
						document.pdfForm.submit();
					} else if (_isMobile) {
						this.exportPdf(viewer);
					} else {
						this.exportPdf(viewer);
					}
				}
			},

			// 인쇄 시작 (API 나 메뉴에서 호출)
			printHTML : function(viewer) {
				viewer = this; // export 함수에 널 또는 개체 모두 동작하도록 처리(매뉴얼은 널로 가이드하되
				// 과거호환성 유지)
				viewer.printDlg();
			},

			// 인쇄 대화창 띄움 - [확인][취소]버튼 제공
			printDlg : function(viewer) {
				viewer = this; // export 함수에 널 또는 개체 모두 동작하도록 처리(매뉴얼은 널로 가이드하되
				// 과거호환성 유지)

				document.getElementById(this.vid + 'UbiPrintOptionAll').disabled = false;
				document.getElementById(this.vid + 'UbiPrintOptionAllMsg').style.display = 'none';

				if (this.totalPage > this.params.printlimit) {
					// "모두" 항목은 불가됨 + 불가사유 표시
					document.getElementById(this.vid + 'UbiPrintOptionAll').disabled = true;
					document.getElementById(this.vid + 'UbiPrintOptionAllMsg').style.display = '';

					// 현재 페이지로 설정
					document.getElementById(this.vid + 'UbiPrintOptionCur').checked = true;
				} else {
					// 전체 인쇄로 초기화
					document.getElementById(this.vid + 'UbiPrintOptionAll').checked = true;
				}

				// 구간 기본 값
				document.getElementById(this.vid + 'UbiPrintOptionFrom').value = '1';
				document.getElementById(this.vid + 'UbiPrintOptionTo').value = Math.min(this.totalPage,
						this.params.printlimit);

				// 인쇄 창 띄우기
				document.getElementById(this.vid + 'UbiToolbarPop1_PrintDlg').style.display = '';
			},

			// [확인]버튼을 누를 경우
			PrintDlgOk : function() {
				this.viewer.printHTML2(this.viewer);
			},

			// 인쇄창 제거하기(인쇄처리 전에 창을 완전히 없애고 잠깐 쉼 - 연속호출시 창이 사라지지 않는 현상..)
			printHTML2 : function(viewer) {

				// 인쇄 창 띄우기
				document.getElementById(this.vid + 'UbiToolbarPop1_PrintDlg').style.display = 'none';

				setTimeout(function() {
					viewer.printHTML3(viewer);
				}, 50);
			},

			// 인쇄 처리 시작
			printHTML3 : function(viewer) {

				// 인쇄 창 띄우기
				document.getElementById(this.vid + 'UbiToolbarPop1_PrintDlg').style.display = 'none';
				var iFrom = 1;
				var iTo = viewer.totalPage;

				if (document.getElementById(this.vid + 'UbiPrintOptionFT').checked == true) {
					iFrom = Math.max(0, document.getElementById(this.vid + 'UbiPrintOptionFrom').value);
					iTo = Math.min(document.getElementById(this.vid + 'UbiPrintOptionTo').value, viewer.totalPage);
					if (iFrom > iTo || iFrom > viewer.totalPage) {
						alert('인쇄할 내용이 없습니다.');
						return;
					}

					if ((iTo - iFrom + 1) > viewer.params.printlimit) {
						alert('한번에 ' + viewer.params.printlimit + ' 페이지씩만 인쇄할 수 있습니다.');
						return;
					}
				}

				if (document.getElementById(this.vid + 'UbiPrintOptionCur').checked == true) {
					iFrom = this.toolbar.page;
					iTo = this.toolbar.page;
				}

				var doc = viewer.ubidocument.doc;
				var ds = 1.2;
				var pagewidth = Math.round(doc.docprop.width * ds - doc.docprop.marginleft * ds
						- doc.docprop.marginright * ds);
				var pageheight = Math.round(doc.docprop.height * ds - doc.docprop.margintop * ds
						- doc.docprop.marginbottom * ds);

				viewer.divPrint.innerHTML = "";

				for (var i = iFrom; i <= iTo; i++) {

					var divPreviewPage = document.createElement("div");
					divPreviewPage.setAttribute("id", viewer.params.divid + "_printpage" + i);
					divPreviewPage.style.position = "relative";
					divPreviewPage.style.width = pagewidth + "px";
					divPreviewPage.style.height = pageheight + "px";
					divPreviewPage.style.margin = "0px";
					if (i > 1) {
						divPreviewPage.style.pageBreakBefore = "always";
					}
					viewer.divPrint.appendChild(divPreviewPage);

					viewer.drawPagePrint(viewer, divPreviewPage, i);
				}

				pagewidth += 30;
				pageheight += 20;
				// var win = window.open("", "",
				// "width="+Math.min(pagewidth,screen.availWidth)+"px,
				// height="+Math.min(pageheight,screen.availHeight)+"px,menubar=no,toolbar=no,status=no,scrollbars=yes");
				var win = window.open("", "UbiReportPrint",
						"width=800px, height=600px,menubar=no,toolbar=no,status=no,scrollbars=yes");
				// Child window가 뜨는 시간 고려.
				setTimeout(function() {
					printHTMLWrite(viewer, win, ds);
				}, 500);

				function printHTMLWrite(viewer, win, ds) {
					if (_ubi_imgcount > 0) {
						timer = setTimeout(function() {
							printHTMLWrite(viewer, win, ds);
						}, 100);
						return;
					}

					var doc = viewer.ubidocument.doc;
					var marginLeft = convertPixelToMm(doc.docprop.marginleft);
					var marginTop = convertPixelToMm(doc.docprop.margintop);
					// Canvas Objects
					var clist = viewer.ubidocument.canvaslist;

					var contents = "<!DOCTYPE html>\n";
					contents += "<html><head>";
					contents += "<title>Print</title>";
					contents += "<style type='text/css'>\n";
					contents += "@media print{\n";
					contents += "@page {size: " + doc.docprop.orientation.toLowerCase() + "; margin-left: "
							+ marginLeft + "cm; margin-top: " + marginTop + "cm;}\n";
					contents += "    #header{display: none;}\n";
					contents += "    #sidebar{display: none;}\n";
					contents += "    #footer{display: none;}\n";
					contents += "    BODY {margin:0px; background: transparent; width:auto; } \n";
					contents += " }\n";
					// if (_isIE) {
					// contents += ".ubidiv { OVERFLOW: hidden; POSITION:
					// absolute; MARGIN: 0px}.ubitable { BORDER-LEFT-WIDTH: 0px;
					// BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px;
					// BORDER-COLLAPSE: collapse; TABLE-LAYOUT: fixed;
					// PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px;
					// MARGIN: 0px; BORDER-SPACING: 0px; PADDING-RIGHT: 0px;
					// BORDER-TOP-WIDTH: 0px}.ubitd { WORD-WRAP: break-word;
					// WHITE-SPACE: pre; WORD-BREAK: break-all; PADDING-BOTTOM:
					// 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px;
					// LETTER-SPACING: 0px; PADDING-RIGHT: 0px}\n";
					// }
					contents += viewer.ubidocument.GetReportStyle(doc, ds);
					contents += "</style>\n";
					if (clist.length > 0) {
						contents += "<!--[if IE]><script src=\"" + viewer.params.resource
								+ "/excanvas.js\"></script><![endif]-->\n";
					}
					contents += "<script src=\"" + viewer.params.resource + "/ubiprint.js\"></script>\n";
					contents += "<script> function printStart() { ChildWindowPrintHTML(); } </script>\n";
					contents += "</head>\n";
					contents += "<body onload='printStart()'>";
					win.document.write(contents);

					win.document.write(viewer.divPrint.innerHTML);

					// Canvas Object가 있을 경우 Script 호출
					if (clist.length > 0) {
						contents = "<script>\n";
						// contents += "var canvas = null;\n";

						for (var i = 0; i < clist.length; i++) {
							contents += "var canvas_" + i + " = document.getElementById('" + clist[i].canvasid
									+ "');\n";
							if (clist[i].type == "IMAGE") {
								contents += "CanvasDrawImage(canvas_" + i + ", '" + clist[i].imageid + "', '"
										+ clist[i].src + "', " + clist[i].x + ", " + clist[i].y + ", " + clist[i].width
										+ ", " + clist[i].height + ");\n";
							} else if (clist[i].type == "RECT") {
								contents += "CanvasDrawRect(canvas_" + i + ", " + clist[i].linewidth + ", '"
										+ clist[i].strokestyle + "', '" + clist[i].fillstyle + "', false, 0);\n";
							} else if (clist[i].type == "ROUNDRECT") {
								contents += "CanvasDrawRect(canvas_" + i + ", " + clist[i].linewidth + ", '"
										+ clist[i].strokestyle + "', '" + clist[i].fillstyle + "', true, "
										+ clist[i].radius + ");\n";
							} else if (clist[i].type == "CIRCLE") {
								contents += "CanvasDrawCircle(canvas_" + i + ", " + clist[i].linewidth + ", '"
										+ clist[i].strokestyle + "', '" + clist[i].fillstyle + "');\n";
							}
						}
						contents += "</script>\n";
						win.document.write(contents);
					}

					contents = "</body></html>";
					win.document.write(contents);
					win.document.close();

					// viewer의 변수 초기화
					viewer.divPrint.innerHTML = "";
					viewer.ubidocument.canvaslist = new Array();

					function convertPixelToMm(pixel) {
						return pixel * (25.4 / 72) / 10;
					}
					;
				}
				;

			},

			PrintDlgFocus : function() {

				// 전체 인쇄로 초기화
				document.getElementById(this.vid + 'UbiPrintOptionFT').checked = true;
			},

			/*******************************************************************
			 * Download Pdf Installer(Msg Dialog) *
			 ******************************************************************/
			downloadPdfInstaller : function(viewer, id) {

				var innerHtml = "<iframe name='UbiDownloadFrame' width='1' height='1' frameborder='0' scrolling='no'></iframe>";
				innerHtml += "<form name='UbiDownloadForm' method='post' action='" + pdfInstallerUrl
						+ "' target='UbiDownloadFrame'>";
				innerHtml += "</form>";
				viewer.divDownload.innerHTML = innerHtml;

				document.UbiDownloadForm.submit();
			},

			/*******************************************************************
			 * Download Pdf(Msg Dialog) *
			 ******************************************************************/
			downloadPdf : function(viewer) {

				var innerHtml = "<iframe name='UbiDownloadFrame' width='1' height='1' frameborder='0' scrolling='no'></iframe>";
				innerHtml += "<form name='UbiDownloadForm' method='post' action='" + viewer.params.gatewayurl
						+ "' target='UbiDownloadFrame'>";
				innerHtml += "<input type='hidden' name='reqtype' value='11'>";
				innerHtml += "<input type='hidden' name='jrffile' value='" + viewer.params.jrffile + "'>";
				innerHtml += "<input type='hidden' name='resid' value='" + viewer.params.resid + "'>";
				innerHtml += "<input type='hidden' name='key' value='" + viewer.params.key + "'>";
				innerHtml += "<input type='hidden' name='daemonid' value='" + viewer.ubidocument.doc.daemonid + "'>";
				innerHtml += "<input type='hidden' name='reporttitle' value='" + viewer.params.reporttitle + "'>";
				innerHtml += "<input type='hidden' name='exportseq' value='" + viewer.exportSeq + "'>";
				innerHtml += "</form>";
				viewer.divDownload.innerHTML = innerHtml;

				document.UbiDownloadForm.submit();
			},

			// page수 체크
			timerTotalPage : null,
			callTotalpage : function(viewer) {
				clearTimeout(this.timerTotalPage);
				this.timerTotalPage = setTimeout(function() {
					viewer.receiveTotalPage(viewer);
				}, 200);
			},
			// 서버로 부터 페이지수 조회
			receiveTotalPage : function(viewer) {
				viewer.params.reqtype = "99";

				ajax({
					type : "POST",
					datatype : "text",
					timeout : viewer.params.timeout,
					url : viewer.params.gatewayurl,
					reqdata : viewer.params,
					// exportseq: "",
					onSuccess : function(text) {
						var pageinfo = text.split("#");
						// toolbar에 페이지수 추가
						viewer.toolbar.appendTotalPage(pageinfo[0]);
						// doc의 Page 배열 추가
						var doc = viewer.ubidocument.doc;
						if (parseInt(pageinfo[0]) > doc.pages.GetSize())
							doc.pages.SetAt(parseInt(pageinfo[0]) - 1, null);

						divPreview.style.display = "";
						
						// ScrollPage일 경우 빈 페이지 추가
						if (viewer.params.scrollpage == "true") {
							var ds = parseInt(viewer.toolbar.currScale) / 100;
							for (var i = parseInt(viewer.totalPage) + 1; i <= pageinfo[0]; i++) {

								var divPreviewPage = document.createElement("div");
								divPreviewPage.setAttribute("id", viewer.params.divid + "_previewpage" + i);
								divPreviewPage.style.position = "relative";
								divPreviewPage.style.width = (doc.docprop.width - doc.docprop.marginleft - doc.docprop.marginright)
										* ds + "px";
								divPreviewPage.style.height = (doc.docprop.height - doc.docprop.margintop - doc.docprop.marginbottom)
										* ds + "px";
								divPreviewPage.style.marginLeft = doc.docprop.marginleft * ds + "px";
								divPreviewPage.style.marginRight = doc.docprop.marginright * ds + "px";
								divPreviewPage.style.marginTop = doc.docprop.margintop * ds + "px";
								divPreviewPage.style.marginBottom = doc.docprop.marginbottom * ds + "px";

								if (i == 1) {
									viewer.divPreview.appendChild(divPreviewPage);
								} else {
									var divPreview = document.createElement("div");

									divPreview.id = viewer.params.divid + "_preview_" + i;

									// 스크롤 페이지의 경우 refresh 누를때마다 페이지 수 만큼 맨 밑에
									// 공페이지가 계속 누적하여 붙는 현상 패치
									if (document.getElementById(divPreview.id)) {
										document.getElementById(viewer.params.divid + "_previewframe").removeChild(
												document.getElementById(divPreview.id));
									}

									divPreview.style.borderTop = "1px solid #A0A0A0";
									divPreview.style.borderLeft = "1px solid #A0A0A0";
									divPreview.style.borderRight = "1px solid #A0A0A0";
									divPreview.style.borderBottom = "1px solid #A0A0A0";

									divPreview.style.backgroundColor = "#ffffff";

									divPreview.style.marginTop = "10px";
									divPreview.style.marginRight = "auto";
									if (i == viewer.totalPage) {
										divPreview.style.marginBottom = "10px";
									} else {
										divPreview.style.marginBottom = "0px";
									}
									divPreview.style.marginLeft = "auto";

									divPreview.style.position = "relative";
									divPreview.style.width = doc.docprop.width * ds + "px";
									divPreview.style.height = doc.docprop.height * ds + "px";
									divPreview.style.overflow = "hidden";

									divPreview.appendChild(divPreviewPage);
									viewer.divPreviewFrame.appendChild(divPreview);
								}
								// viewer.drawPage(viewer, i);
							}

							// 1page만 조회되었을 경우 다음 페이지 조회
							if (parseInt(viewer.totalPage) == 1) {
								if (parseInt(pageinfo[0]) > 1) {
									viewer.drawPageStream(viewer, 2);
								}
							}
						}
						viewer.totalPage = pageinfo[0];

						// page가 생성중일 경우
						if (pageinfo[1] == "1") {
							viewer.callTotalpage(viewer);
						}
					},

					onComplete : function() {
					},
					onError : function(msg) {
						msg = msg.split("#")[0] + " : " + msg.split("#")[1];
						alert(msg);
					}
				});
			},

			// 페이지별 서버로 부터 전송받아 표현
			gDrawDirection : "",
			timerPageDrawer : null,

			requestReportPage : function(viewer, page) {
				function createControl(xml, viewer) {
					var doc = UbiDoc.CreateInstance(xml, false);
					// colors
					for ( var i = 0; i < doc.colors.GetCount(); i++){
						var key = doc.colors.GetAt(i);
						if (viewer.ubidocument.doc.colors.FindIndex(key) == -1) {
							viewer.ubidocument.doc.colors.SetAt(key, doc.colors.GetValue(i));
						}
					} 
					// fonts
					for ( var i = 0; i < doc.fonts.GetCount(); i++){
						var key = doc.fonts.GetAt(i);
						if (viewer.ubidocument.doc.fonts.FindIndex(key) == -1) {
							viewer.ubidocument.doc.fonts.SetAt(key, doc.fonts.GetValue(i));
						}
					}
					// borders
					for ( var i = 0; i < doc.borders.GetCount(); i++){
						var key = doc.borders.GetAt(i);
						if (viewer.ubidocument.doc.borders.FindIndex(key) == -1) {
							viewer.ubidocument.doc.borders.SetAt(key, doc.borders.GetValue(i));
						}
					}
					// lines
					for ( var i = 0; i < doc.lines.GetCount(); i++){
						var key = doc.lines.GetAt(i);
						if (viewer.ubidocument.doc.lines.FindIndex(key) == -1) {
							viewer.ubidocument.doc.lines.SetAt(key, doc.lines.GetValue(i));
						}
					}
					// images
					for ( var i = 0; i < doc.objects.GetCount(); i++){
						var key = doc.objects.GetAt(i);
						if (viewer.ubidocument.doc.objects.FindIndex(key) == -1) {
							viewer.ubidocument.doc.objects.SetAt(key, doc.objects.GetValue(i));
						}
					}
//					var ubidocument = new UbiDocument(doc, viewer.params.jrffile, viewer.params.key, viewer.params.resid, viewer.params.gatewayurl);
					viewer.ubidocument.doc.pages.SetAt(page-1, doc.pages.GetAt(0));
					
					if (doc.pages.GetAt(0) != undefined) {
						viewer.drawPage(viewer, page, true);
					}
				};

				function requestReport(viewer) {
					viewer.params.exportseq = viewer.exportSeq; 
					ajax({
						type : "POST",
						datatype : "xml",
						// KKD
						timeout : viewer.params.timeout,
						url : viewer.params.gatewayurl,
						reqdata : viewer.params,
						exportseq: viewer.exportSeq,
						onSuccess : function(xml) {
							_ubiDaemonValidation = true;
							if (xml == null) {
								console.log("페이지를 가져오는데 실패하였습니다.");
							} else {
								createControl(xml, viewer);
							}
						},
						// 요청이 완료되면,
						// 새 항목들을 읽어올 수 있다.
						onComplete : function() {
							viewer.divLoadImage.style.display = "none";
						},
						onError : function(msg) {
							_ubiDaemonValidation = false;
							viewer.divLoadImage.style.display = "none";

							if (msg.indexOf("ER0") == -1) {
								msg = "ER0901#Unknown error. Check UbiGateway URL.";
								return;
							}
							msg = msg.split("#")[0] + " : " + msg.split("#")[1];
							alert(msg);
						}
					});
				}
				;

				var doc = viewer.ubidocument.doc;
				if (doc.pages.GetAt(parseInt(page) - 1) == undefined) {
					// console.log("requestReportPage: "+ page);
					viewer.params.reqtype = "91#" + page;
					requestReport(this);
				} else if (viewer.params.scrollpage == "false"){
					viewer.drawPage(viewer, page, true);
				}
			},

			drawPageStream : function(viewer, page) {
				clearTimeout(this.timerPageDrawer);
				this.timerPageDrawer = setTimeout(function() {
					viewer.streamDrawer(viewer, page);
				}, 50);
			},

			streamDrawer : function(viewer, page) {
				var tryPage = [ 0, +1, -1 ]; // 현재 페이지 또는 콤보에서 직접 페이지를 변경하여
				// 이동한 경우.
				if (this.gDrawDirection == "INC") // 사용자가 아래쪽으로 휠 스크롤 하고 있으니
				// 아래쪽을 우선적으로 그려준다.
				{
					tryPage = [ 0, +1, -1 ]; // 보고 있는 해당 페이지로부터 시작해서 아래와 위쪽
					// 페이지로 퍼져 나가는 순서로 우선적으로 그려준다.
				}
				if (this.gDrawDirection == "DEC") {
					tryPage = [ 0, -1, +1 ]; // 보고 있는 해당 페이지로부터 시작해서 아래와 위쪽
					// 페이지로 퍼져 나가는 순서로 우선적으로 그려준다.
				}

				for (var i = 0; i < tryPage.length; i++) {
					if ((parseInt(page) + tryPage[i]) > viewer.totalPage || (parseInt(page) + tryPage[i]) < 1)
						break;

					// 빈페이지를 우선적으로 시작을 함
					viewer.requestReportPage(viewer, parseInt(page) + tryPage[i]);

					// if(this.DirectDrawPageStatus[parseInt(page)+tryPage[i]]==0)
					// {
					// if(viewer.drawPage(viewer, parseInt(page)+tryPage[i],
					// true)==true)
					// {
					// clearTimeout(this.timerPageDrawer);
					// this.timerPageDrawer =
					// setTimeout(function(){viewer.streamDrawer(viewer,
					// page);},50);
					// return;
					// }
					// }
				}
				/*
				 * for(var i=0;i<tryPage.length;i++) { // 우선적으로 그려준 페이지를 마무리 작업 //
				 * if(this.DirectDrawPageStatus[parseInt(page)+tryPage[i]]!=0) // {
				 * if(viewer.drawPage(viewer, parseInt(page)+tryPage[i],
				 * true)==true) { clearTimeout(this.timerPageDrawer);
				 * this.timerPageDrawer =
				 * setTimeout(function(){viewer.streamDrawer(viewer,
				 * page);},50); return; } // } }
				 */

				clearTimeout(this.timerPageDrawer);
			},

			initPreviewPage : function(viewer) {
				if (viewer.params.scrollpage == "true") {
					var previewFrame = document.getElementById(viewer.params.divid + "_previewframe");
					if (viewer.ubidocument == null)
						return;
					var doc = viewer.ubidocument.doc;
					if (doc == null)
						return;
					var ds = viewer.toolbar.currScale / 100;

					previewFrame.innerHTML = "";
					
					for (var i = 1; i <= viewer.totalPage; i++) {
						var divPreview = null;
						if (i == 1) {
							divPreview = document.createElement("div");
							viewer.divPreview = divPreview;
							divPreview.id = viewer.params.divid + "_preview";
							divPreview.vid = viewer.params.divid; // 이벤트 캡처시 멀티인스턴스 구별용도로 사용
						} else {
							divPreview = document.createElement("div");
							divPreview.id = viewer.params.divid + "_preview_"+ i;
							divPreview.vid = viewer.params.divid; // 이벤트 캡처시 멀티인스턴스 구별용도로 사용
						}

						divPreview.style.borderTop = "1px solid #a0a0a0";
						divPreview.style.borderLeft = "1px solid #a0a0a0";
						divPreview.style.borderRight = "1px solid #a0a0a0";
						divPreview.style.borderBottom = "1px solid #A0A0A0";

						divPreview.style.backgroundColor = "#ffffff";

						divPreview.style.marginTop = "10px";
						divPreview.style.marginRight = "auto";
//						divPreview.style.marginBottom = "10px";
						divPreview.style.marginLeft = "auto";
						if (i == viewer.totalPage) {
							divPreview.style.marginBottom = "10px";
						} else {
							divPreview.style.marginBottom = "0px";
						}

						divPreview.style.position = "relative";
						divPreview.style.overflow = "hidden";
						divPreview.style.width = Math.round(doc.docprop.width * ds) + "px";
						divPreview.style.height = Math.round(doc.docprop.height * ds) + "px";

						// preview page
						var divPreviewPage = document.createElement("div");
						divPreviewPage.setAttribute("id", viewer.params.divid + "_previewpage" + i);
						divPreviewPage.style.position = "relative";
						divPreviewPage.style.width = (doc.docprop.width - doc.docprop.marginleft - doc.docprop.marginright) * ds + "px";
						divPreviewPage.style.height = (doc.docprop.height - doc.docprop.margintop - doc.docprop.marginbottom)* ds + "px";
						divPreviewPage.style.marginLeft = doc.docprop.marginleft * ds + "px";
						divPreviewPage.style.marginRight = doc.docprop.marginright * ds + "px";
						divPreviewPage.style.marginTop = doc.docprop.margintop * ds + "px";
						divPreviewPage.style.marginBottom = doc.docprop.marginbottom * ds + "px";
						
						divPreview.appendChild(divPreviewPage);
						previewFrame.appendChild(divPreview);
					}
				}
			},

			drawPage : function(viewer, page) {

				viewer.divPreview.style.display = "";

				// console.log("drawPage: "+ page);
				var divPreviewPage;

				this.page = page;

				var doc = viewer.ubidocument.doc;
				// 배율에 맞게 용지 크기 조정
				var ds = viewer.toolbar.currScale / 100;
				if (viewer.params.userscale > 0) {
					ds = viewer.params.userscale / 100;
				}

				this.currScale = ds * 100;

				if (viewer.params.flicking == "true" || viewer.params.scrollpage == "true") {
					divPreviewPage = document.getElementById(viewer.params.divid + "_previewpage" + page);
				} else {
					divPreviewPage = document.getElementById(viewer.params.divid + "_previewpage");
				}

				divPreviewPage.innerHTML = "";

				var pageobj = doc.pages.GetAt(page - 1);
				if (pageobj == undefined) {
					// console.log("pageobj undefined");
					return;
				}

				// Preview, PreviewPage의 크기를 Report의 크기로 변경
				if (viewer.params.scrollpage == "true") {
					if (page == 1) {
						viewer.divPreview.style.width = Math.round(doc.docprop.width * ds) + "px";
						if (pageobj.iscustom)
							viewer.divPreview.style.height = "auto";
						else
							viewer.divPreview.style.height = Math.round(doc.docprop.height * ds) + "px";
					} else {
						var divPreview = document.getElementById(viewer.params.divid + "_preview_" + page);
						divPreview.style.width = Math.round(doc.docprop.width * ds) + "px";
						if (pageobj.iscustom)
							divPreview.style.height = "auto";
						else
							divPreview.style.height = Math.round(doc.docprop.height * ds) + "px";
					}
				} else {
					viewer.divPreview.style.width = Math.round(doc.docprop.width * ds) + "px";
					if (pageobj.iscustom)
						viewer.divPreview.style.height = "auto";
					else
						viewer.divPreview.style.height = Math.round(doc.docprop.height * ds) + "px";
				}

				divPreviewPage.style.width = Math.round(doc.docprop.width * ds - doc.docprop.marginleft * ds
						- doc.docprop.marginright * ds)
						+ "px";
				if (pageobj.iscustom) {
					divPreviewPage.style.height = "auto";
				} else {
					divPreviewPage.style.height = Math.round(doc.docprop.height * ds - doc.docprop.margintop * ds
							- doc.docprop.marginbottom * ds)
							+ "px";
				}
				divPreviewPage.style.marginLeft = Math.round(doc.docprop.marginleft * ds) + "px";
				divPreviewPage.style.marginRight = Math.round(doc.docprop.marginright * ds) + "px";
				divPreviewPage.style.marginTop = Math.round(doc.docprop.margintop * ds) + "px";
				divPreviewPage.style.marginBottom = Math.round(doc.docprop.marginbottom * ds) + "px";

				this.ubidocument.Draw(divPreviewPage, this.page, ds);
			},

			scrollUpdateTimerID : 0,
			scrollUpdateComboPage : function() {
				var PageHeight = document.getElementById(this.params.divid + "_previewframe").clientHeight;
				var PageTop = document.getElementById(this.params.divid + "_previewframe").getBoundingClientRect().top;
				var ScrollTipPageNo = 0;
				for (var k = 1; k <= this.totalPage; k++) {
					_ubi_searchPagePos = document.getElementById(
							this.params.divid + "_preview" + ((k == 1) ? "" : "_" + k)).getBoundingClientRect().top;
					if (_ubi_searchPagePos > 0)
						break;
				}

				if (PageTop + PageHeight / 2 < _ubi_searchPagePos) {
					ScrollTipPageNo = k - 1;
				} else {
					ScrollTipPageNo = Math.min(this.totalPage, k);
				}
				if (this.params.isStreaming == "true" || this.params.isStreaming == true) {
					this.drawPageStream(this, ScrollTipPageNo);
					// viewer.drawPageStream(viewer, this.page);
				}

				this.toolbar.movePage(ScrollTipPageNo, true); // true : 재갱신 방지

			},

			drawPagePrint : function(viewer, divPrint, page) {

				var doc = this.ubidocument.doc;
				// 인쇄시는 1.2배로 설정
				var ds = 1.2;

				divPrint.innerHTML = "";

				divPrint.style.width = Math.round(doc.docprop.width * ds - doc.docprop.marginleft * ds
						- doc.docprop.marginright * ds)
						+ "px";
				divPrint.style.height = Math.round(doc.docprop.height * ds - doc.docprop.margintop * ds
						- doc.docprop.marginbottom * ds)
						+ "px";

				this.ubidocument.Draw(divPrint, page, ds, true);
			},

			showReport : function(callback) {
				this.exportSeq = 0;
				
				if (typeof (_ubi_msg) == "undefined") {
					_ubi_msg = [];
					_ubi_msg[this.params.language] = "";
				}

				if (_ubi_msg[this.params.language].Menu_SAVE) {
					this.setMenuTextToolbar('SAVE', _ubi_msg[this.params.language].Menu_SAVE);
				}
				if (_ubi_msg[this.params.language].Menu_PRINT) {
					this.setMenuTextToolbar('PRINT', _ubi_msg[this.params.language].Menu_PRINT);
				}
				if (_ubi_msg[this.params.language].Menu_PRINTSET) {
					this.setMenuTextToolbar('PRINTSET', _ubi_msg[this.params.language].Menu_PRINTSET);
				}
				if (_ubi_msg[this.params.language].Menu_PDF) {
					this.setMenuTextToolbar('PDF', _ubi_msg[this.params.language].Menu_PDF);
				}
				if (_ubi_msg[this.params.language].Menu_EXCEL) {
					this.setMenuTextToolbar('EXCEL', _ubi_msg[this.params.language].Menu_EXCEL);
				}
				if (_ubi_msg[this.params.language].Menu_RTF) {
					this.setMenuTextToolbar('RTF', _ubi_msg[this.params.language].Menu_RTF);
				}
				if (_ubi_msg[this.params.language].Menu_HWP) {
					this.setMenuTextToolbar('HWP', _ubi_msg[this.params.language].Menu_HWP);
				}
				if (_ubi_msg[this.params.language].Menu_PPTX) {
					this.setMenuTextToolbar('PPTX', _ubi_msg[this.params.language].Menu_PPTX);
				}
				if (_ubi_msg[this.params.language].Menu_HML) {
					this.setMenuTextToolbar('HML', _ubi_msg[this.params.language].Menu_HML);
				}
				if (_ubi_msg[this.params.language].Menu_DOCX) {
					this.setMenuTextToolbar('DOCX', _ubi_msg[this.params.language].Menu_DOCX);
				}
				if (_ubi_msg[this.params.language].Menu_EXCEL_TYPE1) {
					this.setMenuTextToolbar('EXCEL_TYPE1', _ubi_msg[this.params.language].Menu_EXCEL_TYPE1);
				}
				if (_ubi_msg[this.params.language].Menu_EXCEL_TYPE2) {
					this.setMenuTextToolbar('EXCEL_TYPE2', _ubi_msg[this.params.language].Menu_EXCEL_TYPE2);
				}
				if (_ubi_msg[this.params.language].Menu_PDF) {
					this.setMenuTextToolbar('PRINT_PDF', _ubi_msg[this.params.language].Menu_PRINT_PDF);
				}
				if (_ubi_msg[this.params.language].Menu_HTML) {
					this.setMenuTextToolbar('PRINT_HTML', _ubi_msg[this.params.language].Menu_PRINT_HTML);
				}

				// --------------------------------------------------------------------------------
				// '리포트를 호출화면 초기화
				divPreviewFrame = document.getElementById(this.params.divid + "_previewframe");
				divPreviewFrame.innerHTML = "";
				this.divPreview = document.createElement("div");
				var divPreview = this.divPreview;

				divPreview.id = this.params.divid + "_preview";
				divPreview.vid = this.params.divid; // 이벤트 캡처시 멀티인스턴스 구별용도로 사용

				divPreview.style.borderTop = "1px solid #a0a0a0";
				divPreview.style.borderLeft = "1px solid #a0a0a0";
				divPreview.style.borderRight = "1px solid #a0a0a0";
				divPreview.style.borderBottom = "1px solid #A0A0A0";

				divPreview.style.backgroundColor = "#ffffff";

				divPreview.style.marginTop = "10px";
				divPreview.style.marginRight = "auto";
				divPreview.style.marginBottom = "10px";
				divPreview.style.marginLeft = "auto";

				divPreview.style.position = "relative";
				divPreview.style.width = ((this.params.userwidth > 0) ? this.params.userwidth : 595) + "px";
				divPreview.style.height = ((this.params.userheight > 0) ? this.params.userheight : 842) + "px";

				divPreview.style.overflow = "hidden";
				divPreview.style.display = "none";
				divPreviewFrame.appendChild(divPreview);
				
				this.totalPage = 0;
				this.toolbar.page = 1;
				this.toolbar.setTotalPage(this.totalPage);
				this.exportSeq = 0;
				this.params.exportseq = "";
				// --------------------------------------------------------------------------------

				function createControl(xml, viewer) {

					var doc = UbiDoc.CreateInstance(xml, true);
					viewer.ubidocument = new UbiDocument(doc, viewer.vid, viewer.params.jrffile, viewer.params.key,
							viewer.params.resid, viewer.params.gatewayurl);

					viewer.totalPage = doc.pagecount;
					viewer.toolbar.setTotalPage(viewer.totalPage);

					viewer.toolbar.toolbarobj.setTabIndex("save", "1");
					viewer.toolbar.toolbarobj.setTabIndex("print", "2");
					viewer.toolbar.toolbarobj.setTabIndex("printset", "3");
					viewer.toolbar.toolbarobj.setTabIndex("first", "4");
					viewer.toolbar.toolbarobj.setTabIndex("previous", "5");
					viewer.toolbar.toolbarobj.setTabIndex("pages", "6");
					viewer.toolbar.toolbarobj.setTabIndex("next", "7");
					viewer.toolbar.toolbarobj.setTabIndex("last", "8");
					viewer.toolbar.toolbarobj.setTabIndex("zoomout", "9");
					viewer.toolbar.toolbarobj.setTabIndex("zoom", "10");
					viewer.toolbar.toolbarobj.setTabIndex("zoomin", "11");
					viewer.toolbar.toolbarobj.setTabIndex("refresh", "12");

					// Preview, PreviewPage의 크기를 Report의 크기로 변경
					viewer.divPreview.style.width = doc.docprop.width + "px";
					viewer.divPreview.style.height = doc.docprop.height + "px";

					// 팝업메뉴 엑셀 두번째 항목을 Enable/False 처리한다.
					if (viewer.ubidocument.doc.isEnableNoPage == "false") {
						viewer.toolbar.toolbarobj.disableItem("excel2");
					}

					// 엑셀 Type1 / Type2 중 하나만 보여줄 때에는 1레벨 엑셀메뉴를 대표하여 보여주고 굳이 하나만
					// 보이는 팝업메뉴를 감추도록 한다.
					if (viewer.VisibleItems['UbiToolbarButton2_Excel1'] != viewer.VisibleItems['UbiToolbarButton2_Excel2']) {
						if (viewer.VisibleItems['UbiToolbarButton2_Excel1'] == true) {
							viewer.SaveExcelDefaultType = "EXCEL_TYPE1";
						}
						if (viewer.VisibleItems['UbiToolbarButton2_Excel2'] == true) {
							viewer.SaveExcelDefaultType = "EXCEL_TYPE2";
						}

						viewer.setVisibleToolbar("EXCEL_TYPE1", false);
						viewer.setVisibleToolbar("EXCEL_TYPE2", false);
					}

					// IE가 아닌 경우 print와 printset의 기능 차이가 없으므로 printset을 감춤
					if (!_isIE)
						viewer.toolbar.toolbarobj.hideItem("printset");

					viewer.divPreview.innerHTML = "";

					if (viewer.params.scrollpage == "true") {
						_ubi_gmAddEvent(document.getElementById(viewer.params.divid + "_previewframe"), "scroll",
								function() {
									clearTimeout(viewer.scrollUpdateTimerID);
									viewer.scrollUpdateTimerID = setTimeout(function() {
										viewer.scrollUpdateComboPage();
									}, 100);
								});
					}

					if (viewer.params.flicking == "true") {

						for (var i = 1; i <= viewer.totalPage; i++) {

							var divPreviewPage = document.createElement("div");
							divPreviewPage.setAttribute("id", viewer.params.divid + "_previewpage" + i);
							divPreviewPage.style.position = "relative";
							divPreviewPage.style.width = (doc.docprop.width - doc.docprop.marginleft - doc.docprop.marginright)
									+ "px";
							divPreviewPage.style.height = (doc.docprop.height - doc.docprop.margintop - doc.docprop.marginbottom)
									+ "px";
							divPreviewPage.style.marginLeft = doc.docprop.marginleft + "px";
							divPreviewPage.style.marginRight = doc.docprop.marginright + "px";
							divPreviewPage.style.marginTop = doc.docprop.margintop + "px";
							divPreviewPage.style.marginBottom = doc.docprop.marginbottom + "px";

							viewer.divPreview.appendChild(divPreviewPage);
							viewer.drawPage(viewer, i);
						}
					} else if (viewer.params.scrollpage == "true") {
						var ds = 1.0;
						if (viewer.params.scale != "") {
							ds = viewer.params.scale / 100;
						}
						
						var childCnt = viewer.divPreviewFrame.childElementCount;
						for (var i = 1; i <= childCnt; i++) {
							if (i != 1) {
								var removeid = viewer.params.divid + "_preview_" + i;
								if (document.getElementById(removeid)) {
									document.getElementById(viewer.params.divid + "_previewframe").removeChild(
											document.getElementById(removeid));
								}
							}
						}
						
						for (var i = 1; i <= viewer.totalPage; i++) {

							var divPreviewPage = document.createElement("div");
							divPreviewPage.setAttribute("id", viewer.params.divid + "_previewpage" + i);
							divPreviewPage.style.position = "relative";
							divPreviewPage.style.width = (doc.docprop.width - doc.docprop.marginleft - doc.docprop.marginright)
									* ds + "px";
							divPreviewPage.style.height = (doc.docprop.height - doc.docprop.margintop - doc.docprop.marginbottom)
									* ds + "px";
							divPreviewPage.style.marginLeft = doc.docprop.marginleft * ds + "px";
							divPreviewPage.style.marginRight = doc.docprop.marginright * ds + "px";
							divPreviewPage.style.marginTop = doc.docprop.margintop * ds + "px";
							divPreviewPage.style.marginBottom = doc.docprop.marginbottom * ds + "px";

							if (i == 1) {
								viewer.divPreview.appendChild(divPreviewPage);
							} else {
								var divPreview = document.createElement("div");

								divPreview.id = viewer.params.divid + "_preview_" + i;

								// 스크롤 페이지의 경우 refresh 누를때마다 페이지 수 만큼 맨 밑에 공페이지가
								// 계속 누적하여 붙는 현상 패치
								if (document.getElementById(divPreview.id)) {
									document.getElementById(viewer.params.divid + "_previewframe").removeChild(
											document.getElementById(divPreview.id));
								}

								divPreview.style.borderTop = "1px solid #A0A0A0";
								divPreview.style.borderLeft = "1px solid #A0A0A0";
								divPreview.style.borderRight = "1px solid #A0A0A0";
								divPreview.style.borderBottom = "1px solid #A0A0A0";

								divPreview.style.backgroundColor = "#ffffff";

								divPreview.style.marginTop = "10px";
								divPreview.style.marginRight = "auto";
								if (i == viewer.totalPage) {
									divPreview.style.marginBottom = "10px";
								} else {
									divPreview.style.marginBottom = "0px";
								}
								divPreview.style.marginLeft = "auto";

								divPreview.style.position = "relative";
								divPreview.style.width = doc.docprop.width * ds + "px";
								divPreview.style.height = doc.docprop.height * ds + "px";
								divPreview.style.overflow = "hidden";

								divPreview.appendChild(divPreviewPage);
								viewer.divPreviewFrame.appendChild(divPreview);
							}
							viewer.drawPage(viewer, i);
						}
					} else {
						var divPreviewPage = document.createElement("div");

						divPreviewPage.id = viewer.params.divid + "_previewpage";

						divPreviewPage.style.position = "relative";
						divPreviewPage.style.width = (doc.docprop.width - doc.docprop.marginleft - doc.docprop.marginright)
								+ "px";
						divPreviewPage.style.height = (doc.docprop.height - doc.docprop.margintop - doc.docprop.marginbottom)
								+ "px";
						divPreviewPage.style.marginLeft = doc.docprop.marginleft + "px";
						divPreviewPage.style.marginRight = doc.docprop.marginright + "px";
						divPreviewPage.style.marginTop = doc.docprop.margintop + "px";
						divPreviewPage.style.marginBottom = doc.docprop.marginbottom + "px";

						viewer.divPreview.appendChild(divPreviewPage);
						viewer.drawPage(viewer, 1);
					}

					if (viewer.params.flicking == "true") {
						viewer.flicker = new UbiFlicker({
							viewer : this.viewer,
							divid : viewer.params.divid + "_preview",
							vid : viewer.params.divid
						});

						if (viewer.toolbar) {

							viewer.toolbar.flicker = viewer.flicker; // 툴바 내부에서 플릭커 정보들 참고하도록 제공함.
						}
					}
					/*
					 * // 초기 Scale 적용 if( parseInt(viewer.params.scale) != 100 )
					 * viewer.toolbar.changeScale();
					 */
					/*
					if (viewer.params.isStreaming == "true") {
						viewer.callTotalpage(viewer);
					}
					*/

					if (callback)
					{
						try{
						callback();
						}catch(e){}
					}

					if (viewer.FinishLoad)
						viewer.FinishLoad();

					// 전체 페이지 정보를 호출페이지에 전달하기 위한 이벤트. // 웹데모사용 폐기예정 AM2013-1129
					if (window.UbiLoadComplete) {
						window.UbiLoadComplete(viewer.totalPage);
					}
				}
				;

				function requestReport(viewer) {

					ajax({
						type : "POST",
						datatype : "xml",
						// KKD
						timeout : viewer.params.timeout,
						url : viewer.params.gatewayurl,
						reqdata : viewer.params,
						exportseq : "",
						onSuccess : function(xml) {
							// UbiDaemon_Validation = true;
							_ubiDaemonValidation = true;

							if (xml == null) {
								alert("리포트가 생성되지 않았습니다.");
							} else {
								viewer.exportSeq = this.exportseq;
								createControl(xml, viewer);
							}
						},
						// 요청이 완료되면,
						// 새 항목들을 읽어올 수 있다.
						onComplete : function() {
							viewer.divLoadImage.style.display = "none";

							// 요청완료되면 호출되는 이벤트 함수 호출 2013-06-20 LJH
							if (window[viewer.params.divid + '_FinishLoad']) {
								eval(viewer.params.divid + '_FinishLoad()');
							}

							// window.clipboardData.setData("Text",
							// document.body.innerHTML); // KKD) 2012.07.12 : 최종
							// HTML 클립보드 복사(디버그 용도)
						},
						onError : function(msg) {
							_ubiDaemonValidation = false;
							viewer.divLoadImage.style.display = "none";

							if (msg.indexOf("ER0") == -1) {

								msg = "ER0901#Unknown error. Check UbiGateway URL.";
								return;
							}
							msg = msg.split("#")[0] + " : " + msg.split("#")[1];
							alert(msg);
						}
					});
				}
				;
				this.divLoadImage.style.display = "";
				requestReport(this);
			},

			// 사용자가 페이지를 추가한다.
			addPage : function(contents) {

				var viewer = this.viewer;

				var doc = this.ubidocument.doc;
				var page = new UbiPage(doc);
				page.iscustom = true;
				page.contents = contents;
				doc.pages.Add(page);
				doc.pagecount++;

				viewer.totalPage = doc.pagecount;
				viewer.toolbar.setTotalPage(viewer.totalPage);

				if (viewer.params.scrollpage == "true") {
					var divPreviewPage = document.createElement("div");
					divPreviewPage.setAttribute("id", viewer.params.divid + "_previewpage" + viewer.totalPage);
					divPreviewPage.style.position = "relative";
					divPreviewPage.style.width = (doc.docprop.width - doc.docprop.marginleft - doc.docprop.marginright)
							+ "px";
					divPreviewPage.style.height = "auto";
					divPreviewPage.style.marginLeft = doc.docprop.marginleft + "px";
					divPreviewPage.style.marginRight = doc.docprop.marginright + "px";
					divPreviewPage.style.marginTop = doc.docprop.margintop + "px";
					divPreviewPage.style.marginBottom = doc.docprop.marginbottom + "px";

					if (i == 1) {
						viewer.divPreview.style.height = "auto";
						viewer.divPreview.appendChild(divPreviewPage);
					} else {
						var divPreview = document.createElement("div");

						divPreview.id = viewer.params.divid + "_preview_" + viewer.totalPage;

						divPreview.style.borderTop = "1px solid #000000";
						divPreview.style.borderLeft = "1px solid #000000";
						divPreview.style.borderRight = "1px solid #000000";
						divPreview.style.borderBottom = "1px solid #000000";

						divPreview.style.backgroundColor = "#ffffff";

						divPreview.style.marginTop = "10px";
						divPreview.style.marginRight = "auto";
						if (i == viewer.totalPage) {
							divPreview.style.marginBottom = "10px";
						} else {
							divPreview.style.marginBottom = "0px";
						}
						divPreview.style.marginLeft = "auto";

						divPreview.style.position = "relative";
						divPreview.style.width = doc.docprop.width + "px";
						divPreview.style.height = "auto";
						divPreview.style.overflow = "hidden";

						divPreview.appendChild(divPreviewPage);
						viewer.divPreviewFrame.appendChild(divPreview);
					}
					viewer.drawPage(viewer, viewer.totalPage);
				}
			},

			previous : function() {
				this.toolbar.back();
				return this.toolbar.page;
			},
			next : function() {
				this.toolbar.forward();
				return this.toolbar.page;
			},
			first : function() {
				this.toolbar.start();
				return this.toolbar.page;
			},
			last : function() {
				this.toolbar.end();
				return this.toolbar.page;
			},
			gopage : function(page) {
				this.toolbar.movePage(page);
			},
			zoomIn : function() {
				return this.toolbar.zoomin();
			},
			zoomOut : function() {
				return this.toolbar.zoomout();
			},
			zoomScale : function(idx) {
				return this.toolbar.zoomscale(idx);
			},
			refresh : function() {
				this.toolbar.refresh();
			},

			// ====================================================================================================
			// setMenuTextToolbar (Embeded toolbar)
			// ====================================================================================================
			setMenuTextToolbar : function(name, text) {
				if (document.getElementById(this.vid + 'UbiMenu_' + name.toUpperCase())) {
					document.getElementById(this.vid + 'UbiMenu_' + name.toUpperCase()).innerHTML = text;
				}
			},

			// ====================================================================================================
			// setToolbarAlign
			// ====================================================================================================
			setToolbarAlign : function(align) {
				document.getElementById(this.vid + 'UbiToolbar_mainToolbar').align = align;
			},

			// ====================================================================================================
			// setVisibleToolbar (Embeded toolbar)
			// ====================================================================================================
			setVisibleToolbar : function(name, flag) {
				var objid = "";
				name = name.toUpperCase();
				switch (name) {
				case "SAVE":
					objid = "UbiToolbarButton0_Save"; // 감춰야할 HtmlTag범위
					break;
				case "PRINT":
					objid = "UbiToolbarButton0_Print"; // 감춰야할 HtmlTag범위
					break;
				case "PRINTSET":
					objid = "UbiToolbarButton0_PrintSet"; // 감춰야할 HtmlTag범위
					break;
				case "NAVIGATION":
					objid = "UbiToolbarButton0_NAV_GROUP"; // 감춰야할 HtmlTag범위
					break;
				case "ZOOM":
					objid = "UbiToolbarButton0_ZOOM_GROUP"; // 감춰야할 HtmlTag범위
					break;

				case "EXCEL_TYPE1":
					objid = "UbiToolbarButton2_Excel1"; // 감춰야할 HtmlTag범위
					break;
				case "EXCEL_TYPE2":
					objid = "UbiToolbarButton2_Excel2"; // 감춰야할 HtmlTag범위
					break;
				case "PRINT_PDF":
					objid = "UbiToolbarButton1_Print1"; // 감춰야할 HtmlTag범위
					break;
				case "PRINT_HTML":
					objid = "UbiToolbarButton1_Print2"; // 감춰야할 HtmlTag범위
					break;

				case "SAVE_PDF":
					objid = "UbiToolbarButton1_Pdf"; // 감춰야할 HtmlTag범위
					break;
				case "SAVE_EXCEL":
					objid = "UbiToolbarButton1_Excel"; // 감춰야할 HtmlTag범위
					break;
				case "SAVE_RTF":
					objid = "UbiToolbarButton1_Doc"; // 감춰야할 HtmlTag범위
					break;
				case "SAVE_HWP":
					objid = "UbiToolbarButton1_Hwp"; // 감춰야할 HtmlTag범위
					break;
				case "SAVE_PPTX":
					objid = "UbiToolbarButton1_Pptx"; // 감춰야할 HtmlTag범위
					break;
				case "SAVE_HML":
					objid = "UbiToolbarButton1_Hml"; // 감춰야할 HtmlTag범위
					break;
				case "SAVE_DOCX":
					objid = "UbiToolbarButton1_Docx"; // 감춰야할 HtmlTag범위
					break;
				case "FIRST":
					objid = "UbiToolbarButton0_FIRST"; // 감춰야할 HtmlTag범위
					break;
				case "PREV":
					objid = "UbiToolbarButton0_PREV"; // 감춰야할 HtmlTag범위
					break;
				case "PAGE":
					objid = "UbiToolbarButton0_PAGE"; // 감춰야할 HtmlTag범위
					break;
				case "NEXT":
					objid = "UbiToolbarButton0_NEXT"; // 감춰야할 HtmlTag범위
					break;
				case "LAST":
					objid = "UbiToolbarButton0_LAST"; // 감춰야할 HtmlTag범위
					break;

				case "ZOOM_OUT":
					objid = "UbiToolbarButton0_ZOOMOUT"; // 감춰야할 HtmlTag범위
					break;
				case "ZOOM_VALUE":
					objid = "UbiToolbarButton0_ZOOMVALUE"; // 감춰야할 HtmlTag범위
					break;
				case "ZOOM_IN":
					objid = "UbiToolbarButton0_ZOOMIN"; // 감춰야할 HtmlTag범위
					break;
				case "REFRESH":
					objid = "UbiToolbarButton0_REFRESH"; // 감춰야할 HtmlTag범위
					break;
				case "INFO":
					objid = "UbiToolbarButton0_ABOUT"; // 감춰야할 HtmlTag범위
					break;
				}

				if (this.VisibleItems == undefined)
					this.VisibleItems = [];
				this.VisibleItems[objid] = flag;

				if (document.getElementById(this.vid + objid)) {
					document.getElementById(this.vid + objid).style.display = (flag ? '' : 'none');
				}

				// 문서저장항목들이 모두 감춤이면 "저장"메뉴 자체도 감추기
				/*
				 * if(this.VisibleItems['UbiToolbarButton1_Pdf']==false &&
				 * this.VisibleItems['UbiToolbarButton1_Excel']==false &&
				 * this.VisibleItems['UbiToolbarButton1_Doc']==false &&
				 * this.VisibleItems['UbiToolbarButton1_Hwp']==false) {
				 * if(document.getElementById(this.vid+'UbiToolbarButton_Save'))document.getElementById(this.vid+'UbiToolbarButton_Save').style.display='none'; }
				 * else {
				 * if(document.getElementById(this.vid+'UbiToolbarButton_Save'))document.getElementById(this.vid+'UbiToolbarButton_Save').style.display=''; }
				 */

				// 엑셀 팝업 둘다 감춤이면 엑셀메뉴 자체의 화살표 > 도 자동 감춤
				if (this.VisibleItems['UbiToolbarButton2_Excel1'] == false
						&& this.VisibleItems['UbiToolbarButton2_Excel2'] == false) {
					if (document.getElementById(this.vid + 'UbiDropMenu_Print'))
						document.getElementById(this.vid + 'UbiDropMenu_Print').style.display = 'none';
				} else {
					if (document.getElementById(this.vid + 'UbiDropMenu_Print'))
						document.getElementById(this.vid + 'UbiDropMenu_Print').style.display = '';
				}

				// 저장 항목 모두 감춤이면 저장의 오른쪽 드랍메뉴 화살표도 감춤
				if (this.VisibleItems['UbiToolbarButton1_Pdf'] == false
						&& this.VisibleItems['UbiToolbarButton1_Excel'] == false
						&& this.VisibleItems['UbiToolbarButton1_Doc'] == false
						&& this.VisibleItems['UbiToolbarButton1_Pptx'] == false
						&& this.VisibleItems['UbiToolbarButton1_Hml'] == false
						&& this.VisibleItems['UbiToolbarButton1_Hwp'] == false
						&& this.VisibleItems['UbiToolbarButton1_Docx'] == false) {
					for (var i = 2; i <= 4; i++) {
						// 콤보드랍분할선 + 콤보드랍버튼(2칸) [0:아이콘, 1:텍스트 2:분할선 3/4:드랍버튼
						if (document.getElementById(this.vid + 'UbiDropMenu_Save' + i)) {
							document.getElementById(this.vid + 'UbiDropMenu_Save' + i).style.display = 'none';
						}
					}
				} else {
					for (var i = 2; i <= 4; i++) {
						// 콤보드랍분할선 + 콤보드랍버튼(2칸) [0:아이콘, 1:텍스트 2:분할선 3/4:드랍버튼
						if (document.getElementById(this.vid + 'UbiDropMenu_Save' + i)) {
							document.getElementById(this.vid + 'UbiDropMenu_Save' + i).style.display = '';
						}
					}
				}

				// 인쇄 항목 둘다 감춤이면 인쇄의 오른쪽 드랍메뉴 화살표도 감춤
				if (this.VisibleItems['UbiToolbarButton1_Print1'] == false
						&& this.VisibleItems['UbiToolbarButton1_Print2'] == false) {
					for (var i = 2; i <= 4; i++) {
						// 콤보드랍분할선 + 콤보드랍버튼(2칸) [0:아이콘, 1:텍스트 2:분할선 3/4:드랍버튼
						if (document.getElementById(this.vid + 'UbiDropMenu_Print' + i) != null) {
							document.getElementById(this.vid + 'UbiDropMenu_Print' + i).style.display = 'none';
						}
					}
				} else {
					for (var i = 2; i <= 4; i++) {
						// 콤보드랍분할선 + 콤보드랍버튼(2칸) [0:아이콘, 1:텍스트 2:분할선 3/4:드랍버튼
						if (document.getElementById(this.vid + 'UbiDropMenu_Print' + i) != null) {
							document.getElementById(this.vid + 'UbiDropMenu_Print' + i).style.display = '';
						}
					}
				}

				// 네비게이션 항목이 모두 감춤이면 네비게이션 앞의 구분선도 자동 제거
				if (this.VisibleItems['UbiToolbarButton0_FIRST'] == false
						&& this.VisibleItems['UbiToolbarButton0_PREV'] == false
						&& this.VisibleItems['UbiToolbarButton0_PAGE'] == false
						&& this.VisibleItems['UbiToolbarButton0_NEXT'] == false
						&& this.VisibleItems['UbiToolbarButton0_LAST'] == false ||

						this.VisibleItems['UbiToolbarButton0_Save'] == false
						&& this.VisibleItems['UbiToolbarButton0_Print'] == false
						&& document.getElementById(this.vid + 'UbiToolbarButton0_PrintSet').style.display == 'none' // 네비게이션
						// 앞의 인쇄와 저장 버튼이 다 없으면 역시 구분선 제거
				) {
					if (document.getElementById(this.vid + 'UbiToolbarButton0_NAV_SPLIT'))
						document.getElementById(this.vid + 'UbiToolbarButton0_NAV_SPLIT').style.display = 'none';
				}

				// 줌페이지 항목이 모두 감춤이면 줌 앞의 구분선도 자동 제거
				if (this.VisibleItems['UbiToolbarButton0_ZOOMOUT'] == false
						&& this.VisibleItems['UbiToolbarButton0_ZOOMVALUE'] == false
						&& this.VisibleItems['UbiToolbarButton0_ZOOMIN'] == false) {
					if (document.getElementById(this.vid + 'UbiToolbarButton0_ZOOM_SPLIT'))
						document.getElementById(this.vid + 'UbiToolbarButton0_ZOOM_SPLIT').style.display = 'none';
				}

				// 새고고침 항목이 감춤이면 새로고침 앞의 구분선도 자동 제거
				if (this.VisibleItems['UbiToolbarButton0_REFRESH'] == false) {
					if (document.getElementById(this.vid + 'UbiToolbarButton0_REFRESH_SPLIT'))
						document.getElementById(this.vid + 'UbiToolbarButton0_REFRESH_SPLIT').style.display = 'none';
				}
			},

			// ====================================================================================================
			// setEnableToolbar (Embeded toolbar)
			// ====================================================================================================
			MenuEnable : [],
			setEnableToolbar : function(name, flag) {
				name = name.toUpperCase();

				this.MenuEnable[name] = flag;

				if (flag) {
					this.toolbar.toolbarobj.enableItem(name);
				} else {
					this.toolbar.toolbarobj.disableItem(name);
				}
			},

			getEnableToolbar : function(name) {
				name = name.toUpperCase();

				var result = this.MenuEnable[name];
				if (result == undefined) {
					return true; // 기본은 T
				}
				return result;
			},

			// ====================================================================================================
			// setSaveMenu (Embeded toolbar)
			// ====================================================================================================
			setSaveMenu : function(menuType) {

				menuType = menuType.toUpperCase();

				var viewer = this.viewer;
				if (menuType == "EXCEL_TYPE1") {
					viewer.SaveDefaultType = "EXCEL_TYPE1";
				} else if (menuType == "EXCEL_TYPE2") {
					viewer.SaveDefaultType = "EXCEL_TYPE2";
				} else if (menuType == "RTF") {
					viewer.SaveDefaultType = "RTF";
				} else if (menuType == "HWP") {
					viewer.SaveDefaultType = "HWP";
				} else if (menuType == "HML") {
					viewer.SaveDefaultType = "HML";
				} else if (menuType == "PPTX") {
					viewer.SaveDefaultType = "PPTX";
				} else if (menuType == "DOCX") {
					viewer.SaveDefaultType = "DOCX";
				} else if (menuType == "CELL") {
					viewer.SaveDefaultType = "CELL";
				} else {
					viewer.SaveDefaultType = "PDF";
				}
			},

			// ====================================================================================================
			// setPrintMenu (Embeded toolbar)
			// ====================================================================================================
			setPrintMenu : function(menuType) {

				menuType = menuType.toUpperCase();

				var viewer = this.viewer;
				if (menuType == "HTML") {
					viewer.PrintDefaultType = "HTML";
				} else {
					viewer.PrintDefaultType = "PDF";
				}
			},

			getDefaultStyle : function(params) {

				var a = [];
				var i = 0;
				a[i++] = ".previewFrame {";
				a[i++] = "	background-color: #f3f3f3;";
				a[i++] = "}";
				a[i++] = "";

				a[i++] = ".preview {";
				a[i++] = "	position:relative;";
				a[i++] = "	border-top: 1px solid #ccc;";
				a[i++] = "	border-left: 1px solid #ccc;";
				a[i++] = "	border-right: 2px solid #bbb;";
				a[i++] = "	border-bottom: 2px solid #bbb;";
				a[i++] = "	margin: 15px auto 15px auto;";
				a[i++] = "	background-color: #ffffff;";
				a[i++] = "	overflow: auto;";
				a[i++] = "}";

				a[i++] = ".ubiToolbar_standard {";
				a[i++] = "	white-space: nowrap;";
				a[i++] = "	overflow: hidden;";
				a[i++] = "	background-color:#909090;";
				a[i++] = "}";

				a[i++] = "/* UbiReport 팝업메뉴 */";
				a[i++] = "div.ubiToolbarMenu_standard {";
				a[i++] = "	position: absolute;";
				a[i++] = "	margin: 0px;";
				a[i++] = "	padding: 3px;";
				a[i++] = "	border-top: #D2D1D1 1px solid;";
				a[i++] = "	border-left: #D2D1D1 1px solid;";
				a[i++] = "	border-right: #7E7E7E 1px solid;";
				a[i++] = "	border-bottom: #7E7E7E 1px solid;";
				a[i++] = "	overflow: hidden;";
				a[i++] = "	cursor: default;";
				a[i++] = "	background-color:#f0f0f0;";
				a[i++] = "}";

				a[i++] = "/* UbiReport 팝업메뉴 항목 */";
				a[i++] = "div.ubiToolbarMenu_standard div.popupItem {";
				a[i++] = "	position: relative;";
				a[i++] = "	font-family: 맑은고딕, Tahoma;";
				a[i++] = "	font-size: 11px;";
				a[i++] = "	font-weight: normal;";
				a[i++] = "	cursor: default;";
				a[i++] = "	white-space: nowrap;";
				a[i++] = "	-moz-user-select: none;";
				a[i++] = "	color: #333333;";
				a[i++] = "	margin: 0px 0px 0px 0px;";
				a[i++] = "	padding: 2px 6px 2px 4px;";
				a[i++] = "	text-align:left;";
				a[i++] = "	border: #f0f0f0 1px solid;";
				a[i++] = "}";

				a[i++] = "div.ubiToolbarMenu_standard div.popupItemDis {";
				a[i++] = "	position: relative;";
				a[i++] = "	font-family: 맑은고딕, Tahoma;";
				a[i++] = "	font-size: 11px;";
				a[i++] = "	font-weight: normal;";
				a[i++] = "	cursor: default;";
				a[i++] = "	white-space: nowrap;";
				a[i++] = "	-moz-user-select: none;";
				a[i++] = "	color: #999999;";
				a[i++] = "	margin: 0px 0px 0px 0px;";
				a[i++] = "	padding: 2px 6px 2px 4px;";
				a[i++] = "	text-align:left;";
				a[i++] = "	border: #f0f0f0 1px solid;";
				a[i++] = "}";

				a[i++] = "div.ubiToolbarMenu_standard div.popupItemOver {";
				a[i++] = "	position: relative;";
				a[i++] = "	font-family: 맑은고딕, Tahoma;";
				a[i++] = "	font-size: 11px;";
				a[i++] = "	font-weight: normal;";
				a[i++] = "	cursor: default;";
				a[i++] = "	white-space: nowrap;";
				a[i++] = "	-moz-user-select: none;";
				a[i++] = "	color: #333333;";
				a[i++] = "	margin: 0px 0px 0px 0px;";
				a[i++] = "	padding: 2px 6px 2px 4px;";
				a[i++] = "	text-align:left;";

				a[i++] = "	border: #70C0E7 1px solid;";
				a[i++] = "	background-color: #E5F3FB;";
				a[i++] = "}";

				a[i++] = ".ubiToolbar_SelectOption";
				a[i++] = "{";
				a[i++] = "	background-color:#5f6064; /* 선택항목 배경색*/";
				a[i++] = "	color:#cecfd1; /* 선택항목 글자색*/";
				a[i++] = "}";
/*
				a[i++] = ".ubiToolbar_Styled_Select select {";
				a[i++] = "	background: transparent;";
				a[i++] = "	width: 94px;";
				a[i++] = "	padding: 0px;";
				a[i++] = "	padding-bottom:8px;";
				a[i++] = "	font-size: 13px;";
				a[i++] = "	line-height: 1;";
				a[i++] = "	border: 0;";
				a[i++] = "	border-radius: 0;";
				a[i++] = "	color:#cecfd1;";
				a[i++] = "	height: 34px;";
				a[i++] = "	-webkit-appearance: none;";
				a[i++] = "}";
*/
				a[i++] = ".ubiToolbar_Styled_Select {";
				a[i++] = "	width: 74px;";
				a[i++] = "	height: 21px;";
				a[i++] = "	font-family: 맑은고딕, Tahoma;";
				a[i++] = "	font-size: 13px;";
				a[i++] = "	overflow: hidden;";
				a[i++] = "	background: url(\"" + params.resource
						+ "/images/skins/standard/select_arr.gif\") no-repeat right #5f6064;";
				a[i++] = "	border: 0px solid #ccc;";
				a[i++] = "	margin-top:1px; ";
				a[i++] = "	margin-bottom:1px; ";
				a[i++] = "	border:1px solid #ff6600;   ";
				a[i++] = "	border-color:#48494a #48494a #48494a #48494a;   ";
				a[i++] = "}";

				a[i++] = ".ubiToolbar_Styled_Select_List {";
				a[i++] = "	width: 74px;";
				a[i++] = "	height: 21px;";
				a[i++] = "	font-family: 맑은고딕, Tahoma;";
				a[i++] = "	font-size: 13px;";
				a[i++] = "	overflow: auto;";
				a[i++] = "	border: 0px solid #ccc;";
				a[i++] = "	margin-top:1px; ";
				a[i++] = "	margin-bottom:1px; ";
				a[i++] = "	background:#5f6064; ";
				a[i++] = "	border:1px solid #ff6600;   ";
				a[i++] = "	border-color:#48494a #48494a #48494a #48494a;   ";
				a[i++] = "} ";

				a[i++] = ".ubiToolbar_Styled_SelectOption {";
				a[i++] = "	text-decoration:none;";
				a[i++] = "	text-align:left;";
				a[i++] = "	display: block;";
				a[i++] = "	width: 100%;";
				a[i++] = "	height: 20px;";
				a[i++] = "	font-size: 13px;";
				a[i++] = "	font-family: \"Trebuchet MS\", Dotum;";
				a[i++] = "	text-indent: 5px;";
				a[i++] = "	color: #cfcfcf;";
				a[i++] = "	background-color: #5e6063;";
				a[i++] = "}";

				a[i++] = ".ubiToolbar_Styled_SelectOption:hover {";
				a[i++] = "	color: white;";
				a[i++] = "	background-color: #3a9cdb; ";
				a[i++] = "}";
				
				a[i++] = ".ubiAboutBox{";
				a[i++] = "	-webkit-user-select: none;";
				a[i++] = "	-moz-user-select: none;";
				a[i++] = "}";

				a[i++] = ".ubiAboutBox_Title {";
				a[i++] = "	padding-left:18px;";
				a[i++] = "	text-align:left;";
				a[i++] = "	font-weight:bold;";
				a[i++] = "	font-size:16pt;";
				a[i++] = "}";

				a[i++] = ".ubiAboutBox_BuildNo {";
				a[i++] = "	font-size:9pt;";
				a[i++] = "}";

				a[i++] = ".ubiAboutBox_Description {";
				a[i++] = "	font-size:9pt;";
				a[i++] = "}";

				a[i++] = ".ubiAboutBox_Link{";
				a[i++] = "	font-size:9pt;";
				a[i++] = "	text-decoration:none;";
				a[i++] = "}";

				a[i++] = ".ubiToolbar_standard table.ubiToolbarTable_standard {";
				a[i++] = "	height: 100%;";
				a[i++] = "}";

				a[i++] = "table.ubiToolbarTable_standard td {";
				a[i++] = "	white-space: nowrap;";
				a[i++] = "	position: relative;";
				a[i++] = "}";

				a[i++] = "/* td with item's icon and text */";
				a[i++] = "table.ubiToolbarTable_standard td.ubiToolbarIMG {";
				a[i++] = "	padding: 0px 2px;";
				a[i++] = "	-moz-user-select: none;";
				a[i++] = "}";

				a[i++] = "table.ubiToolbarTable_standard td.ubiToolbarIMG img {";
				a[i++] = "}";

				a[i++] = "table.ubiToolbarTable_standard td.ubiToolbarTEXT {";
				a[i++] = "	color:#f0f0f0; /* 메뉴명색상 */";
				a[i++] = "	padding: 2px;";
				a[i++] = "	padding-right: 5px;";
				a[i++] = "	-moz-user-select: none;";
				a[i++] = "	text-align: left;";
				a[i++] = "}";

				a[i++] = "/* item states */";
				a[i++] = "table.ubiToolbarTable_standard table.itemDefault {";
				a[i++] = "	margin: 0px 1px 0px 1px;";
				a[i++] = "	background: none;";
				a[i++] = "	cursor: default;";
				a[i++] = "	color: #000000;";
				a[i++] = "}";

				a[i++] = "table.ubiToolbarTable_standard table.itemDisabled {";
				a[i++] = "	margin: 0px 1px 0px 1px;";
				a[i++] = "	background: none;";
				a[i++] = "	cursor: default;";
				a[i++] = "	color: #999999;";
				a[i++] = "	opacity:0.5;";
				a[i++] = "	filter:alpha(opacity=50); /* For IE8 and earlier */";
				a[i++] = "}";

				a[i++] = "table.ubiToolbarTable_standard table.itemOver {";
				a[i++] = "	border: #70C0E7 1px solid;";
				a[i++] = "	background-color: #E5F3FB;";
				a[i++] = "";
				a[i++] = "	margin-top: 1px;";
				a[i++] = "	margin-bottom: 1px;";
				a[i++] = "cursor: default;";
				a[i++] = "}";

				a[i++] = "table.ubiToolbarTable_standard table.itemPressed {";
				a[i++] = "	border: #66A7E8 1px solid;";
				a[i++] = "	background-color: #D1E8FF;";
				a[i++] = "	";
				a[i++] = "	margin-top: 1px;";
				a[i++] = "	margin-bottom: 1px;";
				a[i++] = "	cursor: default;";
				a[i++] = "	color: #000000;";
				a[i++] = "}";

				a[i++] = "div.ubiToolbarMenu_standard div.buttonSeparator {";
				a[i++] = "	position: relative;";
				a[i++] = "	border-top: #C0C0C0 1px solid;";
				a[i++] = "	font-size: 1px;";
				a[i++] = "}";

				a[i++] = "div.ubiToolbarMenu_standard img.buttonImage {";
				a[i++] = "	position: absolute;";
				a[i++] = "	width: 12px;";
				a[i++] = "	height: 12px;";
				a[i++] = "	top: 2px;";
				a[i++] = "	margin-left: -16px;";
				a[i++] = "}";

				a[i++] = "table.ubiToolbarTable_standard td.ubiToolbarItem span {";
				a[i++] = "	font-family: Tahoma;";
				a[i++] = "	font-size: 12px;";
				a[i++] = "}";

				a[i++] = "/* separator */";
				a[i++] = "table.ubiToolbarTable_standard td.ubiToolbarItem div.ubiToolbarSep {";
				a[i++] = "	width: 0px;";
				a[i++] = "	height: 31px;";
				a[i++] = "	font-size: 2px;";
				a[i++] = "	margin-left: 2px;";
				a[i++] = "	margin-right: 2px;";
				a[i++] = "	margin-top: 1px;";
				a[i++] = "	#margin-right: -1px;";
				a[i++] = "	border-left: #757575 1px solid;";
				a[i++] = "	border-right: #909090 0px solid;";
				a[i++] = "	-moz-user-select: none;";
				a[i++] = "}";

				a[i++] = "table.ubiToolbarTable_standard td.ubiToolbarItem .ubiToolbarSelect {";
				a[i++] = "	-moz-user-select: none;";
				a[i++] = "	height: 20px;";
				a[i++] = "	min-width: 50px;";
				a[i++] = "	";
				a[i++] = "	position: relative;";
				a[i++] = "	border-top: #C0C0C0 1px solid;";
				a[i++] = "	border-left: #C0C0C0 1px solid;";
				a[i++] = "	border-right: #FFFFFF 1px solid;";
				a[i++] = "	border-bottom: #FFFFFF 1px solid;";
				a[i++] = "	background-color: #FEFEFE;";
				a[i++] = "	font-family: Tahoma;";
				a[i++] = "	font-size: 12px;";
				a[i++] = "	margin-top: 1px;";
				a[i++] = "}";

				a[i++] = "td.ubiToolbarArrow";
				a[i++] = "{";
				a[i++] = "	-moz-user-select: none;";
				a[i++] = "}";

				a[i++] = "div.ubiToolbarArrow {";
				a[i++] = "	width: 11px;";
				a[i++] = "	position: relative;";
				a[i++] = "	margin: -1px;";
				a[i++] = "	@margin-top: 1px;";
				a[i++] = "	-moz-user-select: none;";
				a[i++] = "	background-repeat: no-repeat;";
				a[i++] = "	background-position: center;";
				a[i++] = "}";

				a[i++] = "table.ubiToolbarTable_standard td.ubiToolbarItem table.itemDefault div.ubiToolbarArrow {";
				a[i++] = "	background-image: url(\"" + params.resource + "/images/skins/standard/btnarrow.gif\");";
				a[i++] = "}";

				a[i++] = "table.ubiToolbarTable_standard td.ubiToolbarItem table.itemDefault div.ubiToolbarArrow {";
				a[i++] = "	background-image: url(\"" + params.resource + "/images/skins/standard/btnarrow.gif\");";
				a[i++] = "}";

				a[i++] = "table.ubiToolbarTable_standard td.ubiToolbarItem table.itemOver div.ubiToolbarArrow {";
				a[i++] = "	background-image: url(\"" + params.resource + "/images/skins/standard/btnarrow.gif\");";
				a[i++] = "	@margin-top: 0px;";
				a[i++] = "	";
				a[i++] = "}";

				a[i++] = "table.ubiToolbarTable_standard td.ubiToolbarItem table.itemPressed div.ubiToolbarArrow {";
				a[i++] = "	background-image: url(\"" + params.resource + "/images/skins/standard/btnarrow.gif\");";
				a[i++] = "	@margin-top: 0px;";
				a[i++] = "}";

				a[i++] = "table.ubiToolbarTable_standard td.ubiToolbarItem table.itemDisabled div.ubiToolbarArrow {";
				a[i++] = "	background-image: url(\"" + params.resource + "/images/skins/standard/btnarrow_dis.gif\");";
				a[i++] = "}";
				return a.join("");
			}
		});

var PreviewToolbar = Base.extend({

	viewer : null,
	toolbar : null,
	toolbarobj : null,
	divid : "",
	skin : "",
	scale : 100,
	page : 1,
	totalPage : 1,
	scaleCount : 0,
	currScale : 100,
	scaleValues : [],

	constructor : function(params) {

		this.viewer = params.viewer;
//		var viewer = this.viewer;

		this.divid = params.divid;
		this.skin = params.skin;
		this.scale = params.scale;
		this.currScale = params.scale;
		this.toolbar = this;
		// ====================================================================================================
		// AM2013-0412 - ubiToolbarObject 대신 UbiToolbarObject 로 자체 재개발
		// ====================================================================================================
		this.toolbarobj = new UbiToolbarObject(this.viewer, this.viewer.vid, this.divid, this.skin, this.viewer.params.resource);

		// Zoom ComboBox 정의
		var zoomObj = document.getElementById(this.viewer.vid +"UbiToolbarSelect_ZoomList");
		this.scaleValues = [];
		var scaleIndex = -1;
		for (var j = 60; j <= 300; j += 20) {
			this.scaleValues.push(j);
			var obj = document.createElement("a");
			obj.setAttribute("id", this.viewer.vid + "ZoomOption_"+ j);
			obj.setAttribute("class", "ubiToolbar_Styled_SelectOption");
//			obj.setAttribute("href", "javascript:alert('"+ j +"')");
			obj.setAttribute("href", "javascript:UbiChangeZoom('"+ j +"')");
			obj.appendChild(document.createTextNode(""+ j));
			zoomObj.appendChild(obj);
			
			if (this.scale == j)
				scaleIndex = j;
		}
//console.log("constructor : ["+ this.viewer.vid +"]");
		
		this.scaleCount = this.scaleValues.length;
		// zoom text 설정
		var zoomTextObj = document.getElementById(this.viewer.vid +"UbiToolbarSelect_Zoom");
		if (scaleIndex < 0) {
			zoomTextObj.appendChild(document.createTextNode("100"));
		} else {
			zoomTextObj.appendChild(document.createTextNode(""+ this.scale));
		}
/*
		var scaleIndex = 0;
		for (var j = 60; j <= 300; j += 20) {

			if (this.scale == j) {
				this.scale = scaleIndex;
			}
			scaleIndex++;
			this.toolbarobj.appendOption("zoom", j);
		}
*/
		if (this.scale == null || this.scale == "" || parseInt(this.scale) < 60 || parseInt(this.scale) > 300)
			this.scale = 100;
//		this.toolbarobj.setSelectedIndex("zoom", this.scale);
		this.currScale = this.scale;
//		this.scaleCount = this.toolbarobj.getCount("zoom");

		// Toolbar Image Event
		// 툴바 이미지 처리를 객체 내부에서 직접 담당하기 시작해서 맨 아래로 이사갔음 AM2013-0412
	},

	destroy : function() {
		this.toolbarobj.destroy();
	},
	
	initScale : function(iscale) {
		var scaleIndex = 0;
		for (var j = 60; j <= 300; j += 20) {

			if (iscale == j) {
				iscale = scaleIndex;
			}
			scaleIndex++;
		}
		if (iscale < 0 || iscale > 12)
			iscale = 2;
//		this.toolbarobj.setSelectedIndex("zoom", iscale);
		this.currScale = iscale;
//		this.scaleCount = this.toolbarobj.getCount("zoom");
	},

	setNaviState : function() {
		if (this.page == this.totalPage) {

			this.toolbarobj.disableItem("next");
			this.toolbarobj.disableItem("last");
		} else {

			this.toolbarobj.enableItem("next");
			this.toolbarobj.enableItem("last");
		}

		if (this.page == 1) {

			this.toolbarobj.disableItem("previous");
			this.toolbarobj.disableItem("first");
		} else {

			this.toolbarobj.enableItem("previous");
			this.toolbarobj.enableItem("first");
		}

		// web demo // 웹데모사용 폐기예정 AM2013-112
		if (window.UbiViewer_OnPageChange) {
			window.UbiViewer_OnPageChange(this.page);
		}

	},

	setNaviStateInit : function() {

		this.page = 1;
		this.setNaviState();
	},

	setScaleState : function() {
		var scaleindex = -1;
		for (var i=0; i<this.scaleValues.length; i++) {
			if (this.scaleValues[i] == this.currScale) {
				scaleindex = i;
				break;
			}
		}

		if (scaleindex == 0) {

			this.toolbarobj.disableItem("zoomout");
		} else {

			this.toolbarobj.enableItem("zoomout");
		}

		if (scaleindex == (this.scaleCount - 1)) {

			this.toolbarobj.disableItem("zoomin");
		} else {

			this.toolbarobj.enableItem("zoomin");
		}
	},

	setTotalPage : function(totPage) {
		this.totalPage = totPage;
		this.setNaviState();

		// Page ComboBox 정의
		var pageObj = document.getElementById(this.viewer.vid +"UbiToolbarSelect_PageList");
		// 기존 페이지 삭제
		if (pageObj) {
			pageObj.innerHTML = "";
			/*
			var list = pageObj.childNodes;
			for (var i=0; i<list.length; i++) {
				pageObj.removeChild(list[i]);
			}
			*/
		}
		
		// 페이지 콤보의 리스트 설정
		for (var j = 1; j <= totPage; j ++) {
			var obj = document.createElement("a");
			obj.setAttribute("id", this.viewer.vid + "PageOption_"+ j);
			obj.setAttribute("class", "ubiToolbar_Styled_SelectOption");
			obj.appendChild(document.createTextNode(""+ j));
			pageObj.appendChild(obj);
		}
		
		this.setPageText(1);
	},
	
	setPageText : function(page) {
		var textObj = document.getElementById(this.viewer.vid +"UbiToolbarSelect_Page");
		if (textObj) {
			textObj.innerHTML = "";
			textObj.appendChild(document.createTextNode(""+ page));
		}
	},
	
	setScaleText : function(scale) {
		var textObj = document.getElementById(this.viewer.vid +"UbiToolbarSelect_Zoom");
		if (textObj) {
			textObj.innerHTML = "";
			textObj.appendChild(document.createTextNode(""+ scale));
		}
	},
	
	changeScale : function(scale) {
		if (parseInt(scale) == parseInt(this.currScale)) {
			return;
		}
		
		this.currScale = parseInt(scale);
		this.setScaleText(this.currScale);

		if (this.viewer.params.flicking == "true" || this.viewer.params.scrollpage == "true") {
			if (this.viewer.params.scrollpage == "true") {
				this.viewer.initPreviewPage(this.viewer);
			}
			
			var currpage = this.page;
			/*
			 * // 변경 요청 시각 (750ms 내에 여러번 신청 들어와도 마지막 요청만 받아들인다.
			 * viewer.toolbarComboClickTime 로 설정 )
			 * clearTimeout(_ubi_ChangeScaleReservedTimer); var V =
			 * this.viewer.vid; _ubi_ChangeScaleReservedTimer =
			 * setTimeout(function() {_ubi_viewer_drawPage(V); },
			 * this.viewer.toolbarComboClickTime+50);
			 */
			for (var i = 1; i <= this.viewer.totalPage; i++) {
				this.viewer.drawPage(this.viewer, i);
			}

			this.page = currpage;

			if (this.viewer.params.flicking == "true") {
				/*
				 * for (var i=1; i<=this.viewer.totalPage; i++) {
				 * this.viewer.drawPage(this.viewer, i); }
				 */
				this.viewer.flicker.OnChangeScale();
			}
		} else {
			this.viewer.drawPage(this.viewer, this.page);
		}
		this.setScaleState();
	},

	zoomin : function() {
		var zoomIndex = -1;
		for (var i=0; i<this.scaleValues.length; i++) {
			if (this.scaleValues[i] == this.currScale) {
				zoomIndex = i;
				break;
			}
		}
		
		if (zoomIndex+1 < this.scaleValues.length) {
			this.changeScale(this.scaleValues[parseInt(zoomIndex)+1]);
		}
	},

	zoomout : function() {
		var zoomIndex = -1;
		for (var i=0; i<this.scaleValues.length; i++) {
			if (this.scaleValues[i] == this.currScale) {
				zoomIndex = i;
				break;
			}
		}
		
		if (zoomIndex-1 >= 0) {
			this.changeScale(this.scaleValues[parseInt(zoomIndex)-1]);
		}
	},

	zoomscale : function(idx) {

//		this.toolbarobj.setSelectedIndex("zoom", idx);
		this.changeScale();
		return idx;
	},

	// Page Navigation Method
	start : function() {

		this.page = 1;
		this.movePage(this.page);
	},

	back : function() {

		if (this.page > 1) {

			this.page--;
			this.movePage(this.page);
		}
	},

	forward : function() {

		if (this.page < this.totalPage) {

			this.page++;
			this.movePage(this.page);
		}
	},

	end : function() {

		if (this.page < this.totalPage) {

			this.page = this.totalPage;
			this.movePage(this.page);
		}
	},

	changePage : function() {

		var selpage = toolbarobj.getSelectedText("pages");
		if (this.page != selpage) {

			this.page = selpage;
			this.movePage(this.page);
		}
	},

	movePage : function(page, isSkip) {
		if (this.page == page) {
		} else if (this.page < page) {
			this.gDrawDirection = "INC";
		} else {
			this.gDrawDirection = "DEC";
		}

		this.Oldpage = this.page; // scrollPage==true 의 경우 페이지 변화
		// 있을때에만 이벤트 발생하기 위하여 과거비교값 전용 변수
		this.page = page;
		/*
		 * if( this.viewer.params.flicking == "false" )
		 * this.viewer.drawPage(viewer, page); else
		 * this.viewer.flicker.movePage(page);
		 */
		if (this.viewer.params.scrollpage == "true") {
			var id = this.viewer.params.divid + '_preview' + (page == 1 ? "" : "_" + page);

			if (isSkip != true && this.viewer.totalPage != 1) // 전체가 1페이지인데 첫페이지 간다고 스크롤위치 0 으로 가면 한페이지 단위로 보는 기본모드와 달리 살짝 더 위쪽을 보게되는 문제.
			{
				var t = document.documentElement.scrollTop; // 뷰어가 화면보다 커서 메인에도 스크롤바가 생겼다면 튈 수 있다. 백업하고 아래줄에서 복구해줌.

				if (page == 1)// 첫페이지 만큼은 1페이지 내용을 보는 것보다 중요한 것이 최대한 맨위 부분을 보는 것이다.(이렇게 하지 않으면 새로고침등으로 1 페이지 이동시 첫페이지의 중간부분을 보게되어 위쪽 여백이 보이지 않는 현상이 나타남.)
				{
					document.getElementById(this.viewer.params.divid + "_previewframe").scrollTop = 0;
				} else {
					document.getElementById(id).scrollIntoView(); // 해당
					// 페이지로
					// 이동하기
				}

				if (document.getElementById(this.viewer.params.divid)) {
					document.getElementById(this.viewer.params.divid).scrollTop = 0; // 툴바가 스크롤되는것은 막기
				}
			}
			if (isSkip == true && this.Oldpage != this.page) {
				if (this.viewer.onPageMove) {
					this.viewer.onPageMove(this.page);
				}
			}

		} else {
			if (this.viewer.params.isStreaming == "true" && this.viewer.params.scrollpage == "false") {
				this.viewer.requestReportPage(this.viewer, page);
			}
			else if (this.viewer.params.flicking == "false") {
				this.viewer.drawPage(this.viewer, page);
			} else {
				this.viewer.flicker.movePage(page);
			}
		}
/*
		if (this.viewer.params.isStreaming == "true") {
			this.viewer.drawPageStream(viewer, this.page);
		}
*/
//		this.viewer.toolbar.toolbarobj.setSelectedIndex("pages", page - 1);
		this.setPageText(page);
		this.setNaviState();
		if (isSkip != true) { // AM2013-1129-이벤트 중복 발생현상
			if (this.viewer.onPageMove) {
				this.viewer.onPageMove(this.page);
			}
		}
	},

	updatePage : function(ipage) { // 플리킹에서 호출하여 사용
		this.page = ipage; // 플리킹 페이지 자료를 툴바에도 반영함
		this.viewer.toolbar.toolbarobj.setSelectedIndex("pages", ipage - 1);
		this.setNaviState();
	},

	refresh : function(page) {

		// 기존 페이지 정보 삭제
		this.toolbarobj.removeOption("pages");
		// viewer.divPreviewPage.innerHTML = ""; //AM-2013-0314-플리킹때문에
		// 가림
		this.viewer.divPrint.innerHTML = "";

		// isStyled = false; 대교협 스타일 속도 개선 롤백
		clearTimeout(_ubi_ChangeScaleReservedTimer);

		this.viewer.params.reqtype = "0";
		this.viewer.showReport();
		this.setNaviStateInit();
		//this.initScale(this.viewer.params.scale);
		this.movePage(1); // AM-2013-0314-플리킹때문에 추가함
	}
});

// ====================================================================================================
// AM2013-0300 - 플리킹 기능을 담당하는 개체
// ====================================================================================================
var UbiFlicker = Base
		.extend({

			FPS : 25, // 20 FPS 로 애니메이션 보여줌 (손을 놨을 때에 화면이 정리되기까지 타이머가 돈다.)
			ReformRatio : 20, // 25% 이상의 크기를 휘저어야 새로운 페이지로 전환된다.
			RestoreRatio : 20, // 75; // 전체 거리의 몇%씩 복구되나? 50:반씩반씩팍팍 줄어듬..
			// 25:천천히 75:엄청나게빨리

			viewer : null,
			vid : 0,
			thisFlicker : null,

			constructor : function(params) {
				// 변수 초기화 작업
				this.startX = 0; // 마우스다운, 터치다운 좌표
				this.startY = 0; // 마우스다운, 터치다운 좌표

				this.curX = 0; // 마우스무브, 터칭중의 현재 좌표
				this.curY = 0; // 마우스무브, 터칭중의 현재 좌표

				this.endX = 0; // 마우스업, 터치완료의 좌표
				this.endY = 0; // 마우스업, 터치완료의 좌표

				this.distanceX = 0; // 터치다운~업 까지의 거리
				this.isReform = false; // 플리킹을 무시할 것인가 [전환]할 것인가? (25% 기준으로 더
				// 크면 true)
				this.isFlicking = 0; // 현재 플리킹중인가? (=다운과 업 사이의 시간) 0 :플리킹 아님
				// 1:플리킹시동중(누르기 시작했지만 아직 뚜렷하게 좌우 또는 상하
				// 또는 두손가락인지 모르는 초기 상태) 2. 플리킹중(손가락
				// 따라다님)
				this.curPageNo = 0; // 현재 페이지 수. 0 베이스 페이지(사용자는 1베이스 보정해줘야 좋을
				// 듯..)

				this.Finger = 0;

				this.thisFlicker = this;
				this.vid = params.vid;
				UbiViewers[this.vid].flickerObject = this;

				// 개체 ID 얻기
				this.flickingObject = (typeof params.divid == "string") ? document.getElementById(params.divid)
						: params.divid;

				// 한 페이지의 폭 파악
				this.OnePageWidth = this.flickingObject.offsetWidth;

				// 플리킹 컨텐츠 개체에 컨텐츠들을 포함함 (넘치지 않도록 하는 클리핑 기술)
				this.flickingObject.style.position = 'relative'; // 컨테이너 클리핑에
				// 중요 역할
				this.flickingObject.style.overflow = 'hidden'; // 컨테이너 클리핑에 중요
				// 역할

				// 각각의 페이지를 얻고 갯수를 파악함
				this.Pages = this.flickingObject.children;
				this.PageCount = this.flickingObject.children.length;

				// <DIV> 페이지 요소들을 모두 기본위치에 모아놓음
				for (var i = 0; i < this.PageCount; i++) {
					this.Pages[i].style.position = 'absolute';
					this.Pages[i].style.left = -this.OnePageWidth;
					this.Pages[i].style.top = '0px';
					this.Pages[i].style.width = this.OnePageWidth + 'px';
				}

				// 초기 화면 배치
				this.PageReposition(0); // 좌측좌표 0 으로 정확하게 현재의 페이지를 표시함. 8 이라고 하면
				// 8 픽셀만큼 가로 플리킹되니 반드시 0 으로 시작해야된다.

				// ====================================================================================================
				// 선택/드래그 막기
				// ====================================================================================================
				this.mmAddEvent(this.flickingObject, "dragstart", function(e) {
					(e.stopPropagation) ? e.stopPropagation() : window.event.cancelBubble = true;
					if (e.preventDefault)
						e.preventDefault();
					return false;

				});

				// ====================================================================================================
				// 마우스 다운인 경우 플리킹 감시체제에 들어감. 마우스 다운인 순간 다른 동작(버블이벤트 파장을 막음)은 다
				// 막음
				// ====================================================================================================
				this.mmAddEvent(this.flickingObject, "mousedown touchstart", this.OnTouchStart);
				// this.mmAddEvent(document, "mousedown touchstart",
				// this.OnTouchStart);

				// ====================================================================================================
				// 마우스 업인 경우 플리킹 감시 모두 해제
				// ====================================================================================================
				this.mmAddEvent(document, "mouseup touchend", this.OnTouchEnd);

			},

			OnChangeScale : function() {
				// 한 페이지의 폭 파악
				this.OnePageWidth = this.flickingObject.offsetWidth;
				// <DIV> 페이지 요소들을 모두 기본위치에 모아놓음
				for (var i = 0; i < this.PageCount; i++) {
					this.Pages[i].style.position = 'absolute';
					this.Pages[i].style.left = -this.OnePageWidth;
					this.Pages[i].style.top = '0px';
					this.Pages[i].style.width = this.OnePageWidth + 'px';
				}
				this.PageReposition(0); // 좌측좌표 0 으로 정확하게 현재의 페이지를 표시함. 8 이라고 하면
				// 8 픽셀만큼 가로 플리킹되니 반드시 0 으로 시작해야된다.
			},

			// ====================================================================================================
			// 터치 시작되는 순간 호출됨
			// ====================================================================================================
			OnTouchStart : function(e) {
				_ubi_flicking_current_vid = this.vid;
				var viewer = UbiViewers[this.vid];
				var thisFlicker = viewer.flickerObject;
				// --------------------------------------------------------------------------------
				// 이제부터 사용자의 프리킹 중이다.
				// --------------------------------------------------------------------------------
				thisFlicker.isFlicking = 1; // 플리킹 가능성이 커졌음.. 각도와 거리 조사 시작
				// 즉시 프리킹 허용하지 않고, 길이와 각도를 체크한 후에 승인 또는 불허한다.

				// 손가락을 누르기 시작한 최종 위치 기록
				thisFlicker.startX = thisFlicker.mmGetCursorX(e); // → 핵심문
				thisFlicker.startY = thisFlicker.mmGetCursorY(e); // → 핵심문
				thisFlicker.endX = thisFlicker.mmGetCursorX(e);
				thisFlicker.endY = thisFlicker.mmGetCursorY(e);
				thisFlicker.directionX = 0; // 그저 초기화 (지금 안해주면 객체의 인스턴스 변수로 사용시
				// undefined 일수도 있으니까..
				thisFlicker.distanceX = 0;
				thisFlicker.distanceY = 0;

				// --------------------------------------------------------------------------------
				// 움직임에 관심 갖기 시작함
				// --------------------------------------------------------------------------------
				thisFlicker.mmAddEvent(document, "mousemove touchmove", thisFlicker.OnTouchMove);
				// --------------------------------------------------------------------------------
				// 부차적 작업 모두 막음(링크 연결, 체크, 버튼 처리등등의 이벤트 확장처리)
				// --------------------------------------------------------------------------------
				// (e.stopPropagation) ? e.stopPropagation() :
				// window.event.cancelBubble = true;
				// if(e.preventDefault) e.preventDefault();

				thisFlicker.PageReposition(thisFlicker.distanceX);

				return false;

			},

			// ====================================================================================================
			// 마우스 이동인 경우의 처리(움직이는 동안 계속 실행됨)
			// ====================================================================================================
			OnTouchMove : function(e) {

				// _ubi_flicking_current_vid = this.vid;
				var viewer = UbiViewers[_ubi_flicking_current_vid];
				var thisFlicker = viewer.flickerObject;

				/*
				 * 
				 * var sTemp = '' ; if(true) { var debugctl =
				 * document.createElement("div"); debugctl.setAttribute("id",
				 * "debug2"); debugctl.style.position = "absolute";
				 * debugctl.style.left = "50px"; debugctl.style.top = "300px";
				 * debugctl.style.zIndex = "99999999999999";
				 * document.documentElement.appendChild(debugctl); }
				 * if(e.changedTouches) { if(e.touches) { sTemp
				 * +='e.TouchCount:'+e.touches.length+'<br>'; }
				 * 
				 * if(e.changedTouches[0]) { sTemp
				 * +='e.chg_id0:'+e.changedTouches[0].identifier+'
				 * '+e.changedTouches[0].pageX+'<br>'; }
				 * if(e.changedTouches[1]) { sTemp
				 * +='e.chg_id1:'+e.changedTouches[1].identifier+'
				 * '+e.changedTouches[1].pageX+'<br>'; } }
				 * 
				 * sTemp +='vid:'+thisFlicker.vid+'<br>'; sTemp
				 * +='Finger:'+thisFlicker.Finger+'<br>'; sTemp
				 * +='distanceX:'+thisFlicker.distanceX+'<br>'; sTemp
				 * +='distanceY:'+thisFlicker.distanceY+'<br>'; sTemp
				 * +='X2+Y2:'+(thisFlicker.distanceX * thisFlicker.distanceX +
				 * thisFlicker.distanceY * thisFlicker.distanceY) +' vs
				 * '+(48*48)+'<br>'; sTemp +='y/x: '+(thisFlicker.distanceY /
				 * (thisFlicker.distanceX+0.0001))+'<br>'; sTemp
				 * +='directionX:'+thisFlicker.directionX+'<br>'; sTemp
				 * +='endX:'+thisFlicker.endX+'<br>'; sTemp
				 * +='startX:'+thisFlicker.startX+'<br>'; sTemp
				 * +='curX:'+thisFlicker.mmGetCursorX(e)+'<br>'; sTemp
				 * +='isFlicking:'+thisFlicker.isFlicking+'<br>';
				 * 
				 * document.getElementById('debug2').innerHTML = sTemp;
				 */

				// if(thisFlicker.Finger != e.changedTouches[0].identifier)
				// return true; // 눌렀던 그 손가락으로 움직여야지.. 동시에 두손가락 누르면 플리킹 이제 처리
				// 안하고 다 무시함.
				/*
				 * if(thisFlicker.FingerCount!=1){ thisFlicker.FingerCount = 0;
				 * thisFlicker.isFlicking = 0; return true; }
				 */
				if (e.touches)
					if (e.touches.length > 1) { // 멀티터치도 모두 플리킹 처리 대신 기본기능에 충실하기
						return true;
					}

				// 세로스크롤시에는 플리킹 완전 관심 끔
				if (thisFlicker.isFlicking == 3) {
					// (e.stopPropagation) ? e.stopPropagation() :
					// window.event.cancelBubble = true;
					// if(e.preventDefault) e.preventDefault();
					return true;
				}

				if (thisFlicker.isFlicking == 0) {
					return true;
				}

				// 플리킹 검사중일때에는 플리킹할지 계속 알아본다.
				if (thisFlicker.isFlicking == 1) {
					// 플리킹중에는 확대축소스크롤등 다 무시함
					// (e.stopPropagation) ? e.stopPropagation() :
					// window.event.cancelBubble = true;
					// if(e.preventDefault) e.preventDefault();

					thisFlicker.distanceX = Math.abs(thisFlicker.mmGetCursorX(e) - thisFlicker.startX);
					thisFlicker.distanceY = Math.abs(thisFlicker.mmGetCursorY(e) - thisFlicker.startY);

				}

				if (thisFlicker.isFlicking == 1) {
					// 가로세로 48픽셀 - 일정 거리보다 길어야 인식하기 시작함.
					// 기울기 0.5 는 45 도 인데, 그보다 더 X 축에 가까울때에만 가로 플리킹을 인정해줌(Y 축 방향은
					// 세로 스크롤 이벤트 그대로 존중하기)
					if (thisFlicker.distanceX * thisFlicker.distanceX + thisFlicker.distanceY * thisFlicker.distanceY > 24 * 24
							&& (thisFlicker.distanceY / (thisFlicker.distanceX + 0.0001)) > 0.6) {
						thisFlicker.isFlicking = 3;
					} else if (thisFlicker.distanceX * thisFlicker.distanceX + thisFlicker.distanceY
							* thisFlicker.distanceY > 24 * 24
							&& (thisFlicker.distanceY / (thisFlicker.distanceX + 0.0001)) < 0.5) {
						thisFlicker.isFlicking = 2;

						// 셀렉션을 지우고 본격 가로방향 플리킹 모드로 돌입한다.
						_ubi_flicking_clearSelection();
					} else {
						thisFlicker.isFlicking = 1;
						return true;
					}
				}

				// 플리킹 조사중일때에는 플리킹 처리 아직 안하고 기존 이벤트 모두 존중함
				if (thisFlicker.isFlicking == 2) {
					// 플리킹 맞을때에는 모든 타 이벤트는 막고 좌우로만 이동해줌
					(e.stopPropagation) ? e.stopPropagation() : window.event.cancelBubble = true;
					if (e.preventDefault)
						e.preventDefault();

					// 현재 위치를 기록
					thisFlicker.curX = thisFlicker.mmGetCursorX(e);

					// 이전 작업 정리중일때 성질 급해서 또또 마구 플리킹 작업 할 경우 기존 정리작업은 한가하게 애니메이션할
					// 생각말고 바로 정리모드로 들어가서 사용자의 다음 작업에 즉각 대기상태에 돌입한다.
					// thisFlicker.distanceX = 0;
					// thisFlicker.PageReposition(thisFlicker.distanceX);

					// 현재 위치대로 좌/현/우 페이지를 모두 좌표 계산해줌
					thisFlicker.PageReposition(thisFlicker.curX - thisFlicker.startX);

					// 인스턴스가 2개 이상이어도 각각 개별적으로 동작하게끔 처리함
					window["UBFlicker_CurObject"] = thisFlicker.flickingObject.id;
				}

			},

			// ====================================================================================================
			// 터치 끝나는 순간 호출됨
			// ====================================================================================================
			OnTouchEnd : function(e) {
				var viewer = UbiViewers[_ubi_flicking_current_vid];
				var thisFlicker = viewer.flickerObject;

				// if(thisFlicker.Finger != e.changedTouches[0].identifier)
				// return true; // 눌렀던 그 손가락으로 움직여야지.. 동시에 두손가락 누르면 플리킹 이제 처리
				// 안하고 다 무시함.
				if (thisFlicker.isFlicking != 2) {
					thisFlicker.isFlicking = 0;
					return true;
				} // 제대로 된 플리킹 떼기가 아니면 관심을 끈다.
				thisFlicker.Finger = 0; // 여러손가락 하나라도 떼기 작업하면 무조건 다 뗀걸로 처리

				// --------------------------------------------------------------------------------
				// 이제 사용자의 프리킹 작업중이 아님
				// --------------------------------------------------------------------------------
				thisFlicker.isFlicking = 0; // 0 일반 상태 1: 터치다운 후 살짝 이동하는
				// 상태(플리킹인지 조사중인 상태) 2:플리킹 상태(좌우로
				// 플리킹 하는 상태)

				// ====================================================================================================
				// 마우스 업인 경우의 처리(따로 루틴 없이 여기서 실행되고 감시 해제됨)
				// ====================================================================================================
				thisFlicker.endX = thisFlicker.mmGetCursorX(e); // 손가락을 뗀 최종 위치
				// 기록

				// 거리 측정
				thisFlicker.distanceX = thisFlicker.endX - thisFlicker.startX;

				// 방향 측정 (우:1 좌:-1)
				thisFlicker.directionX = (thisFlicker.distanceX > 0) ? 1 : -1;

				// 전환의 의지를 파악함
				if (Math.abs(thisFlicker.endX - thisFlicker.startX) * 100 / thisFlicker.OnePageWidth > thisFlicker.ReformRatio) // 해당
				// 페이지의
				// 25%
				// 이상을
				// 휘저었다면
				// 전환의
				// 의지가
				// 있는걸로
				// 본다.
				{
					// 양쪽 끝에서는 전환의 의지가 있어도 더 이상의 침범을 막아야 한다.
					if (thisFlicker.curPageNo <= 0 && thisFlicker.directionX == 1
							|| thisFlicker.curPageNo >= thisFlicker.PageCount - 1 && thisFlicker.directionX == -1) {
						thisFlicker.isReform = false;
						thisFlicker.directionX = 1;
					} else // 일반적인 전환에 대한 처리
					{
						thisFlicker.isReform = true;
						thisFlicker.distanceX = thisFlicker.distanceX + -thisFlicker.directionX
								* thisFlicker.OnePageWidth;// +thisFlicker.distanceX);
						thisFlicker.curPageNo -= thisFlicker.directionX;
					}
				} else {
					thisFlicker.isReform = false; // 깔짝깔짝 대는건 봐주지 않는다. 도로
					// 복귀되도록 처리.
				}

				// --------------------------------------------------------------------------------
				// 움직임 감시에 더 이상 관심 없음
				// --------------------------------------------------------------------------------
				thisFlicker.mmRemoveEvent(this, "mousemove touchmove", thisFlicker.OnTouchMove);

				// --------------------------------------------------------------------------------
				// 플리킹 화면의 위치 정리를 해야되는 의무감에 시달리기 시작함
				// --------------------------------------------------------------------------------
				// setTimeout(thisFlicker.SetForm,1000/this.FPS); // 1초에 몇 FPS
				// 애니메이션으로 동작할 것인가
				thisFlicker.SetForm(_ubi_flicking_current_vid);
			},

			// ====================================================================================================
			// 모든 페이지 위치 다시 잡기
			// ====================================================================================================
			PageReposition : function(xPos) {
				// 현재 세장(현재+좌+우) 를 제외한 나머지는 꽁꽁 숨겨놓음 (아이패드에서 두손가락으로 난리피우면 가끔 세장을
				// 제외한 화면이 잔상으로 남아있을때가 있음)
				for (var i = 0; i <= this.curPageNo - 1 - 1; i++) {
					this.Pages[i].style.left = -this.OnePageWidth + 'px';
				}
				// 현재 세장(현재+좌+우) 를 제외한 나머지는 꽁꽁 숨겨놓음 (아이패드에서 두손가락으로 난리피우면 가끔 세장을
				// 제외한 화면이 잔상으로 남아있을때가 있음)
				for (var i = this.curPageNo + 2; i < this.PageCount; i++) {
					this.Pages[i].style.left = -this.OnePageWidth + 'px';
				}

				// 현재 페이지의 좌우의 페이지를 각각 좌표를 신경써 줌
				for (var i = this.curPageNo - 1; i <= this.curPageNo + 1; i++) {
					if (0 <= i && i < this.PageCount) { // 범위초과 오류 방지
						// viewer.drawPage(viewer, i);
						this.Pages[i].style.left = ((i - this.curPageNo) * this.OnePageWidth + xPos) + 'px';
					}
				}
			},

			// ====================================================================================================
			// 모든 페이지 위치 다시 잡기
			// ====================================================================================================
			movePage : function(page) {
				window["UBFlicker_CurObject"] = this.flickingObject.id;

				// 가려는 페이지가 현재보다 오른쪽 이동이라면 애니메이션도 오른쪽 전환 애니매이션이어야 한다.
				if (this.curPageNo < page - 1) {
					this.distanceX = this.OnePageWidth;
					this.directionX = 1;
				} else {
					this.distanceX = -this.OnePageWidth;
					this.directionX = -1;
				}

				this.curPageNo = page - 1; // 플리킹은 0 베이스임

				// --------------------------------------------------------------------------------
				// 플리킹 화면의 위치 정리를 해야되는 의무감에 시달리기 시작함
				// --------------------------------------------------------------------------------
				// setTimeout(this.SetForm,1000/this.FPS); // 1초에 몇 FPS 애니메이션으로
				// 동작할 것인가
				this.SetForm(this.vid);
			},

			// ====================================================================================================
			// 정리의 시간이 필요해..(정리타임동안에 타이머로 자주 호출됨)
			// ====================================================================================================
			SetForm : function(vid) {
				var viewer = UbiViewers[vid];
				var thisFlicker = viewer.flickerObject;

				if (thisFlicker.distanceX == 0) {
					return;
				}

				// 해당 인스턴스에서만 애니메이션 처리
				if (thisFlicker.flickingObject.id != window["UBFlicker_CurObject"]) {
					return;
				}

				if (thisFlicker.isFlicking > 0) {
					// 이전 작업 정리중일때 성질 급해서 또또 마구 플리킹 작업 할 경우 기존 정리작업은 한가하게 애니메이션할
					// 생각말고 바로 정리모드로 들어가서 사용자의 다음 작업에 즉각 대기상태에 돌입한다.
					thisFlicker.distanceX = 0;
					thisFlicker.PageReposition(thisFlicker.distanceX);
					return;
				}

				// ====================================================================================================
				// 정리하기 (=오차의 범위의 반 만큼 정리함. 시간이 지날수록 거의 정리가 되어가고, 1픽셀 이하의 차이에서는
				// 종료)
				// ====================================================================================================
				thisFlicker.distanceX = parseInt(thisFlicker.distanceX * (100 - thisFlicker.RestoreRatio) / 100);
				thisFlicker.PageReposition(thisFlicker.distanceX);

				// ====================================================================================================
				// 정리 더 해야할지 파악
				// ====================================================================================================
				if (Math.abs(thisFlicker.distanceX) > 0) // 아직 일이 남아있으면 정리의
				// 시간이 (더!!) 필요함
				{
					// setTimeout(thisFlicker.SetForm,1000/thisFlicker.FPS); //
					// 20 FPS 애니메이션으로 동작함
					thisFlicker.SetForm(vid);
				} else // 정리되었다면 툴바에 업데이트 도 좀 해주자~
				{
					viewer.toolbar.updatePage(thisFlicker.curPageNo + 1); // 플리킹은
					// 페이지가
					// 0
					// 베이스니
					// 주의할
					// 것.
				}

			},

			// ====================================================================================================
			// 이벤트 할당 / 해제문 / 현재 마우스 위치얻기
			// ====================================================================================================
			mmAddEvent : _ubi_gmAddEvent,
			mmRemoveEvent : _ubi_gmRemoveAddEvent,
			mmGetCursorX : function(e) {
				if (e.changedTouches) {
					return e.changedTouches[0].pageX;
				} else {
					e = e || window.event;
					return e.pageX
							|| (e.clientX + document.documentElement.scrollLeft || document.body.scrollLeft || 0);
				}
			},

			mmGetCursorY : function(e) {
				if (e.changedTouches) {
					return e.changedTouches[0].pageY;
				} else {
					e = e || window.event;
					return e.pageY || (e.clientY + document.documentElement.scrollTop || document.body.scrollTop || 0);
				}
			}

		});

// ====================================================================================================
// AM2013-0412 - 툴바개체
// ====================================================================================================
function UbiToolbarObject(ubiviewer, vid, baseId, skin, resource) {
	// this.viewer = viewer;
	var viewer = ubiviewer;

	this.vid = vid;
	this.MenuText = {
		SAVE : 'Save',
		PRINT : 'Print',
		PRINTSET : 'Printset',
		PDF : 'PDF',
		EXCEL : 'Excel',
		RTF : 'RTF',
		HWP : 'HWP',
		HML : 'HML',
		PPTX : 'PPTX',
		DOCX : 'DOCX',
		CELL : 'CELL',
		EXCEL_TYPE1 : 'Print Type',
		EXCEL_TYPE2 : 'Base Type',
		PRINT_PDF : 'PDF Print',
		PRINT_HTML : 'Html Print'
	};

	// RTL 설정
	if (viewer.params.direction == "rtl") {
		_ubi_rtl = true;
	}

	// ====================================================================================================
	// 툴바에 표현될 HTML을 직접 표현함 (툴바 + 1레벨 메뉴 + 2레벨 팝업 메뉴)
	// ====================================================================================================
	this.GetToolbarContent = function() {
		var i = 0;
		var a = [];

		var IE7_ComboStyle = "";
		var IE7_TableStyle = "";

		if (document.documentMode == 7) {
			IE7_ComboStyle = "margin-top:-11px;";
			IE7_TableStyle = "margin-top:6px;";
		}
		if (document.documentMode == 8) {
			IE7_ComboStyle = "margin-top:-6px;";
			IE7_TableStyle = "margin-top:0px;";
		}

		var gSave = [];
		var gPrint = [];
		var gPrintSet = [];
		var gNavi = [];
		var gZoom = [];
		var gRefresh0 = [], gRefresh1 = [];
		var gAbout = [];
		var sTemp;

		// ================================================================================
		// Save 버튼
		// ================================================================================
		gSave[i++] = "<td id='" + this.vid
				+ "UbiToolbarButton0_Save' align='left' class='ubiToolbarItem' title='Save' tabindex='2'>";
		gSave[i++] = "<table border=0 id='" + this.vid
				+ "UbiToolbarButton_Save' class='itemDefault' cellspacing='0' cellpadding='0'><tbody><tr>";

		if (_ubi_rtl) // 구분자
		{
			gSave[i++] = "<td style='margin:0px;padding:0px;' class='ubiToolbarArrow'><div id='" + this.vid
					+ "UbiDropMenu_Save4' class='ubiToolbarArrow'>&nbsp;</div></td>";
			gSave[i++] = "<td id='" + this.vid
					+ "UbiDropMenu_Save1' valign='middle' class='ubiToolbarTEXT' style='padding-left:5px;'><span id='"
					+ this.vid + "UbiMenu_SAVE'>" + this.MenuText['SAVE'] + "</span></td>";
		}
		gSave[i++] = "<td id='" + this.vid + "UbiDropMenu_Save0' valign='middle' class='ubiToolbarIMG'><img id='"
				+ this.vid + "UbiToolbarButton0_SaveButton' src='" + resource + "/images/toolbar/save.png'></td>";
		if (!_ubi_rtl) // 구분자
		{
			gSave[i++] = "<td id='" + this.vid
					+ "UbiDropMenu_Save1' valign='middle' class='ubiToolbarTEXT' style='padding-right:5px;'><span id='"
					+ this.vid + "UbiMenu_SAVE'>" + this.MenuText['SAVE'] + "</span></td>";
			gSave[i++] = "<td style='margin:0px;padding:0px;' class='ubiToolbarArrow'><div id='" + this.vid
					+ "UbiDropMenu_Save4' class='ubiToolbarArrow'>&nbsp;</div></td>";
		}

		gSave[i++] = "</tr></tbody></table>";
		gSave[i++] = "</td>";

		// ================================================================================
		// Print 버튼
		// ================================================================================
		gPrint[i++] = "<td id='" + this.vid
				+ "UbiToolbarButton0_Print' align='left' class='ubiToolbarItem' title='Print' tabindex='2'>";
		gPrint[i++] = "<table border=0 id='" + this.vid
				+ "UbiToolbarButton_Print' class='itemDefault' cellspacing='0' cellpadding='0'><tbody><tr>";

		if (_ubi_rtl) // 구분자
		{
			gPrint[i++] = "<td style='margin:0px;padding:0px;' class='ubiToolbarArrow'><div id='" + this.vid
					+ "UbiDropMenu_Print4' class='ubiToolbarArrow'>&nbsp;</div></td>";
			gPrint[i++] = "<td id='" + this.vid
					+ "UbiDropMenu_Print1' valign='middle' class='ubiToolbarTEXT' style='padding-left:5px;'><span id='"
					+ this.vid + "UbiMenu_PRINT'>" + this.MenuText['PRINT'] + "</span></td>";
		}
		gPrint[i++] = "<td id='" + this.vid + "UbiDropMenu_Print0' valign='middle' class='ubiToolbarIMG'><img id='"
				+ this.vid + "UbiToolbarButton0_PrintButton' src='" + resource + "/images/toolbar/print.png'></td>";
		if (!_ubi_rtl) // 구분자
		{
			gPrint[i++] = "<td id='"
					+ this.vid
					+ "UbiDropMenu_Print1' valign='middle' class='ubiToolbarTEXT' style='padding-right:5px;'><span id='"
					+ this.vid + "UbiMenu_PRINT'>" + this.MenuText['PRINT'] + "</span></td>";
			gPrint[i++] = "<td style='margin:0px;padding:0px;' class='ubiToolbarArrow'><div id='" + this.vid
					+ "UbiDropMenu_Print4' class='ubiToolbarArrow'>&nbsp;</div></td>";
		}

		gPrint[i++] = "</tr></tbody></table>";
		gPrint[i++] = "</td>";

		// ================================================================================
		// PrintSet 버튼
		// ================================================================================
		gPrintSet[i++] = "<td id='" + this.vid
				+ "UbiToolbarButton0_PrintSet' align='left' class='ubiToolbarItem' title='Print Setup' tabindex='3'>";
		gPrintSet[i++] = "<table id='" + this.vid
				+ "UbiToolbarButton_PrintSet' cellspacing='1' cellpadding='0' class='itemDefault'><tbody><tr>";
		if (!_ubi_rtl) // 구분자
		{
			gPrintSet[i++] = "<td valign='middle' class='ubiToolbarIMG'><img id='" + this.vid
					+ "UbiToolbarButton0_PrintSetButton' src='" + resource + "/images/toolbar/printset.png'></td>";
			gPrintSet[i++] = "<td valign='middle' class='ubiToolbarTEXT'><span id='" + this.vid + "UbiMenu_PRINTSET'>"
					+ this.MenuText['PRINTSET'] + "</span></td>";
		}
		if (_ubi_rtl) // 구분자
		{
			gPrintSet[i++] = "<td valign='middle' class='ubiToolbarTEXT'><span id='" + this.vid + "UbiMenu_PRINTSET'>"
					+ this.MenuText['PRINTSET'] + "</span></td>";
			gPrintSet[i++] = "<td valign='middle' class='ubiToolbarIMG'><img id='" + this.vid
					+ "UbiToolbarButton0_PrintSetButton' src='" + resource + "/images/toolbar/printset.png'></td>";
		}

		gPrintSet[i++] = "</tr></tbody></table>";
		gPrintSet[i++] = "</td>";

		// ================================================================================
		// NAVIGATION 그룹
		// ================================================================================
		gNavi[i++] = "<td id='" + this.vid
				+ "UbiToolbarButton0_NAV_GROUP' align='left' class='ubiToolbarItem' title=''>"; // navi
		// group
		gNavi[i++] = "<table style='border-collapse:collapse;border:0px solid red;'><tr>";

		if (!_ubi_rtl) // 구분자
		{
			gNavi[i++] = "<td id='" + this.vid
					+ "UbiToolbarButton0_NAV_SPLIT' align='left' class='ubiToolbarItem' title=''>";
			gNavi[i++] = "<table cellspacing='1' cellpadding='0' class='itemDefault'><tbody><tr>";
			gNavi[i++] = "<td><div class='ubiToolbarSep'>&nbsp;</div></td>";
			gNavi[i++] = "</tr></tbody></table>";
			gNavi[i++] = "</td>";
		}

		// _ubi_rtl = false;
		gNavi[i++] = "<td id='" + this.vid + "UbiToolbarButton0_" + ((_ubi_rtl) ? "LAST" : "FIRST")
				+ "' align='left' class='ubiToolbarItem' title='" + ((_ubi_rtl) ? "Last" : "First")
				+ " page' tabindex='4'>";
		gNavi[i++] = "<table id='" + this.vid + "UbiToolbarButton_" + ((_ubi_rtl) ? "Last" : "First")
				+ "' cellspacing='1' cellpadding='0' class='itemDisabled'><tbody><tr>";
		gNavi[i++] = "<td valign='middle' class='ubiToolbarIMG'><img id='" + this.vid + "UbiToolbarButton0_"
				+ ((_ubi_rtl) ? "Last" : "First") + "Button' src='" + resource + "/images/toolbar/first.png'></td>";
		gNavi[i++] = "<td valign='middle' style='display: none;' class='ubiToolbarTEXT'><span></span></td>";
		gNavi[i++] = "</tr></tbody></table>";
		gNavi[i++] = "</td>";

		gNavi[i++] = "<td id='" + this.vid + "UbiToolbarButton0_" + ((_ubi_rtl) ? "NEXT" : "PREV")
				+ "' align='left' class='ubiToolbarItem' title='" + ((_ubi_rtl) ? "Next" : "Previous")
				+ " page' tabindex='5'>";
		gNavi[i++] = "<table id='" + this.vid + "UbiToolbarButton_" + ((_ubi_rtl) ? "Next" : "Prev")
				+ "' cellspacing='1' cellpadding='0' class='itemDisabled'><tbody><tr>";
		gNavi[i++] = "<td valign='middle' class='ubiToolbarIMG'><img id='" + this.vid + "UbiToolbarButton0_"
				+ ((_ubi_rtl) ? "Next" : "Previous") + "Button' src='" + resource
				+ "/images/toolbar/previous.png'></td>";
		gNavi[i++] = "<td valign='middle' style='display: none;' class='ubiToolbarTEXT'><span></span></td>";
		gNavi[i++] = "</tr></tbody></table>";
		gNavi[i++] = "</td>";

		gNavi[i++] = "<td id='" + this.vid
				+ "UbiToolbarButton0_PAGE' align='left' class='ubiToolbarItem' title='Pages'>";
		gNavi[i++] = "<table cellspacing='1' cellpadding='0' class='itemDefault'><tbody><tr>";
		if (_ubi_rtl) {
			gNavi[i++] = "<td valign='middle' height='25px'><div class='ubiToolbar_Styled_Select_rtl' style='position:relative;left:0px;padding-right:4px;'><select style=\"direction:rtl;position:relative;left:-20px;width:100px;\" style='"
					+ IE7_ComboStyle + "' id='" + this.vid + "UbiToolbarSelect_Page' tabindex='6'></select></div></td>";
		} else {
//			gNavi[i++] = "<td valign='middle' height='25px'><div class='ubiToolbar_Styled_Select'><select style='"
//					+ IE7_ComboStyle + "' id='" + this.vid
//					+ "UbiToolbarSelect_Page' tabindex='6' style='width:100px;'></select></div></td>";
			gNavi[i++] = "<td valign='middle' height='25px'>";
			gNavi[i++] =   "<div id='"+ this.vid +"UbiToolbarSelect_Page' class='ubiToolbar_Styled_Select' style='text-indent:3px; line-height:21px; color:white'>";
			gNavi[i++] = "</div></td>";
		}

		gNavi[i++] = "</tr></tbody></table>";
		gNavi[i++] = "</td>";

		gNavi[i++] = "<td id='" + this.vid + "UbiToolbarButton0_" + ((_ubi_rtl) ? "PREV" : "NEXT")
				+ "' align='left' class='ubiToolbarItem' title='" + ((_ubi_rtl) ? "Previous" : "Next")
				+ " page' tabindex='7'>";
		gNavi[i++] = "<table id='" + this.vid + "UbiToolbarButton_" + ((_ubi_rtl) ? "Prev" : "Next")
				+ "' cellspacing='1' cellpadding='0' class='itemDisabled'><tbody><tr>";
		gNavi[i++] = "<td valign='middle' class='ubiToolbarIMG'><img id='" + this.vid + "UbiToolbarButton0_"
				+ ((_ubi_rtl) ? "Previous" : "Next") + "Button' src='" + resource + "/images/toolbar/next.png'></td>";
		gNavi[i++] = "<td valign='middle' style='display: none;' class='ubiToolbarTEXT'><span></span></td>";
		gNavi[i++] = "</tr></tbody></table>";
		gNavi[i++] = "</td>";

		gNavi[i++] = "<td id='" + this.vid + "UbiToolbarButton0_" + ((_ubi_rtl) ? "FIRST" : "LAST")
				+ "' align='left' class='ubiToolbarItem' title='" + ((_ubi_rtl) ? "First" : "Last")
				+ " page' tabindex='8'>";
		gNavi[i++] = "<table id='" + this.vid + "UbiToolbarButton_" + ((_ubi_rtl) ? "First" : "Last")
				+ "' cellspacing='1' cellpadding='0' class='itemDisabled'><tbody><tr>";
		gNavi[i++] = "<td valign='middle' class='ubiToolbarIMG'><img id='" + this.vid + "UbiToolbarButton0_"
				+ ((_ubi_rtl) ? "First" : "Last") + "Button' src='" + resource + "/images/toolbar/last.png'></td>";
		gNavi[i++] = "<td valign='middle' style='display: none;' class='ubiToolbarTEXT'><span></span></td>";
		gNavi[i++] = "</tr></tbody></table>";
		gNavi[i++] = "</td>";
		gNavi[i++] = "</tr></table>";

		if (_ubi_rtl) // 구분자
		{
			gNavi[i++] = "<td id='" + this.vid
					+ "UbiToolbarButton0_NAV_SPLIT' align='left' class='ubiToolbarItem' title=''>";
			gNavi[i++] = "<table cellspacing='1' cellpadding='0' class='itemDefault'><tbody><tr>";
			gNavi[i++] = "<td><div class='ubiToolbarSep'>&nbsp;</div></td>";
			gNavi[i++] = "</tr></tbody></table>";
			gNavi[i++] = "</td>";
		}

		gNavi[i++] = "</td>"; // navi group

		// ================================================================================
		// ZOOM 그룹
		// ================================================================================
		gZoom[i++] = "<td id='" + this.vid
				+ "UbiToolbarButton0_ZOOM_GROUP' align='left' class='ubiToolbarItem' title=''>"; // zoom
		// group
		gZoom[i++] = "<table style='border-collapse:collapse;border:0px solid red;'><tr>";

		if (!_ubi_rtl) // 구분자
		{
			gZoom[i++] = "<td id='" + this.vid
					+ "UbiToolbarButton0_ZOOM_SPLIT' align='left' class='ubiToolbarItem' title=''>";
			gZoom[i++] = "<table cellspacing='1' cellpadding='0' class='itemDefault'><tbody><tr>";
			gZoom[i++] = "<td><div class='ubiToolbarSep'>&nbsp;</div></td>";
			gZoom[i++] = "</tr></tbody></table>";
			gZoom[i++] = "</td>";
		}

		if (_ubi_rtl) {
			gZoom[i++] = "<td id='" + this.vid
					+ "UbiToolbarButton0_ZOOMIN' align='left' class='ubiToolbarItem' title='Zoom In' tabindex='11'>";
			gZoom[i++] = "<table id='" + this.vid
					+ "UbiToolbarButton_In' cellspacing='1' cellpadding='0' class='itemDefault'><tbody><tr>";
			gZoom[i++] = "<td valign='middle' class='ubiToolbarIMG'><img id='" + this.vid
					+ "UbiToolbarButton0_ZoomInButton' src='" + resource + "/images/toolbar/zoomin.png'></td>";
			gZoom[i++] = "<td valign='middle' style='display: none;' class='ubiToolbarTEXT'><span></span></td>";
			gZoom[i++] = "</tr></tbody></table>";
			gZoom[i++] = "</td>";
		} else {
			gZoom[i++] = "<td id='" + this.vid
					+ "UbiToolbarButton0_ZOOMOUT' align='left' class='ubiToolbarItem' title='Zoom Out' tabindex='9'>";
			gZoom[i++] = "<table id='" + this.vid
					+ "UbiToolbarButton_Out' cellspacing='1' cellpadding='0' class='itemDefault'><tbody><tr>";
			gZoom[i++] = "<td valign='middle' class='ubiToolbarIMG'><img id='" + this.vid
					+ "UbiToolbarButton0_ZoomOutButton' src='" + resource + "/images/toolbar/zoomout.png'></td>";
			gZoom[i++] = "<td valign='middle' style='display: none;' class='ubiToolbarTEXT'><span></span></td>";
			gZoom[i++] = "</tr></tbody></table>";
			gZoom[i++] = "</td>";
		}

		gZoom[i++] = "<td id='" + this.vid
				+ "UbiToolbarButton0_ZOOMVALUE' align='left' class='ubiToolbarItem' title='zoom'>";
		gZoom[i++] = "<table cellspacing='1' cellpadding='0' class='itemDefault'><tbody><tr>";

		if (_ubi_rtl) {
			gZoom[i++] = "<td valign='middle' height='25px'><div class='ubiToolbar_Styled_Select_rtl' style='position:relative;left:0px;padding-right:4px;'><select style=\"direction:rtl;position:relative;left:-20px;width:100px;\" id='"
					+ this.vid
					+ "UbiToolbarSelect_Zoom' style='"
					+ IE7_ComboStyle
					+ "' tabindex='10'></select></div></td>";
		} else {
//			gZoom[i++] = "<td valign='middle' height='25px'><div class='ubiToolbar_Styled_Select''><select id='"
//				+ this.vid + "UbiToolbarSelect_Zoom' style='" + IE7_ComboStyle
//				+ " width:100px;' tabindex='-1'></select></div></td>";
			gZoom[i++] = "<td valign='middle' height='25px'>";
			gZoom[i++] =   "<div id='"+ this.vid +"UbiToolbarSelect_Zoom' class='ubiToolbar_Styled_Select' style='text-indent:3px; line-height:21px; color:white'>";
			gZoom[i++] = "</div></td>";
		}

		gZoom[i++] = "</tr></tbody></table>";
		gZoom[i++] = "</td>";

		if (_ubi_rtl) {
			gZoom[i++] = "<td id='" + this.vid
					+ "UbiToolbarButton0_ZOOMOUT' align='left' class='ubiToolbarItem' title='Zoom Out' tabindex='9'>";
			gZoom[i++] = "<table id='" + this.vid
					+ "UbiToolbarButton_Out' cellspacing='1' cellpadding='0' class='itemDefault'><tbody><tr>";
			gZoom[i++] = "<td valign='middle' class='ubiToolbarIMG'><img id='" + this.vid
					+ "UbiToolbarButton0_ZoomOutButton' src='" + resource + "/images/toolbar/zoomout.png'></td>";
			gZoom[i++] = "<td valign='middle' style='display: none;' class='ubiToolbarTEXT'><span></span></td>";
			gZoom[i++] = "</tr></tbody></table>";
			gZoom[i++] = "</td>";
		} else {
			gZoom[i++] = "<td id='" + this.vid
					+ "UbiToolbarButton0_ZOOMIN' align='left' class='ubiToolbarItem' title='Zoom In' tabindex='11'>";
			gZoom[i++] = "<table id='" + this.vid
					+ "UbiToolbarButton_In' cellspacing='1' cellpadding='0' class='itemDefault'><tbody><tr>";
			gZoom[i++] = "<td valign='middle' class='ubiToolbarIMG'><img id='" + this.vid
					+ "UbiToolbarButton0_ZoomInButton' src='" + resource + "/images/toolbar/zoomin.png'></td>";
			gZoom[i++] = "<td valign='middle' style='display: none;' class='ubiToolbarTEXT'><span></span></td>";
			gZoom[i++] = "</tr></tbody></table>";
			gZoom[i++] = "</td>";
		}

		if (_ubi_rtl) // 구분자
		{
			gZoom[i++] = "<td id='" + this.vid
					+ "UbiToolbarButton0_ZOOM_SPLIT' align='left' class='ubiToolbarItem' title=''>";
			gZoom[i++] = "<table cellspacing='1' cellpadding='0' class='itemDefault'><tbody><tr>";
			gZoom[i++] = "<td><div class='ubiToolbarSep'>&nbsp;</div></td>";
			gZoom[i++] = "</tr></tbody></table>";
			gZoom[i++] = "</td>";
		}
		gZoom[i++] = "</tr></table>";
		gZoom[i++] = "</td>"; // zoom group

		// ================================================================================
		// REFRESH 그룹
		// ================================================================================
		gRefresh0[i++] = "<td id='" + this.vid
				+ "UbiToolbarButton0_REFRESH_SPLIT' align='left' class='ubiToolbarItem' title=''>";
		gRefresh0[i++] = "<table cellspacing='1' cellpadding='0' class='itemDefault'><tbody><tr>";
		gRefresh0[i++] = "<td><div class='ubiToolbarSep'>&nbsp;</div></td>";
		gRefresh0[i++] = "</tr></tbody></table>";
		gRefresh0[i++] = "</td>";
		gRefresh1[i++] = "<td id='" + this.vid
				+ "UbiToolbarButton0_REFRESH' align='left' class='ubiToolbarItem' title='Refresh' tabindex='12'>";
		gRefresh1[i++] = "<table id='" + this.vid
				+ "UbiToolbarButton_Refresh' cellspacing='1' cellpadding='0' class='itemDefault'><tbody><tr>";
		gRefresh1[i++] = "<td valign='middle' class='ubiToolbarIMG'><img id='" + this.vid
				+ "UbiToolbarButton0_RefreshButton' src='" + resource + "/images/toolbar/refresh.png'></td>";
		gRefresh1[i++] = "<td valign='middle' style='display: none;' class='ubiToolbarTEXT'><span></span></td>";
		gRefresh1[i++] = "</tr></tbody></table>";
		gRefresh1[i++] = "</td>";

		// ================================================================================
		// AboutBox 버튼
		// ================================================================================
		gAbout[i++] = "<table" + ((_ubi_rtl) ? "" : " width='100%'")
				+ " cellspacing='0' cellpadding='0' align='left' class='ubiToolbarTable_standard'><tbody><tr>";
		gAbout[i++] = (!_ubi_rtl) ? "<td width='3'></td>" : "";
		gAbout[i++] = "<td id='" + this.vid
				+ "UbiToolbarButton0_ABOUT' align='right' class='ubiToolbarItem' title='About' tabindex='12'>";
		gAbout[i++] = "<table id='" + this.vid
				+ "UbiToolbarButton_About' cellspacing='1' cellpadding='0' class='itemDefault'><tbody><tr>";
		gAbout[i++] = "<td valign='middle' class='ubiToolbarIMG'><img id='" + this.vid
				+ "UbiToolbarButton0_InfoButton' src='" + resource + "/images/toolbar/info.png'></td>";
		gAbout[i++] = "<td valign='middle' style='display: none;' class='ubiToolbarTEXT'><span></span></td>";
		gAbout[i++] = "</tr></tbody></table>";
		gAbout[i++] = "</td>";
		gAbout[i++] = (_ubi_rtl) ? "<td width='3'></td>" : "";
		gAbout[i++] = "</tr></tbody></table>";

		// ================================================================================
		// _ubi_rtl에 따른 버튼 배치
		// ================================================================================
		if (_ubi_rtl) {
			// 컨테이너(툴바와 AboutBox를 감싼)
			a[i++] = "<table id='"
					+ this.vid
					+ "UbiToolbar_ctnToolbar' border=0 cellspacing='0' cellpadding='0' width='100%' height='100%'><tbody><tr><td style='padding:0px;'>"; // 컨테이너(툴바와
			// AboutBox를
			// 감싸는)
			a[i++] = gAbout.join("");
			a[i++] = "</td><td style='padding:0px;' align=right>"; // 컨테이너(툴바와
			// AboutBox를
			// 감싸는)

			// 툴바(AboutBox를 제외한)의 시작
			a[i++] = "<table style='"
					+ IE7_TableStyle
					+ "' id='"
					+ this.vid
					+ "UbiToolbar_mainToolbar' cellspacing='0' cellpadding='0' align='right' class='ubiToolbarTable_standard'><tbody><tr>";
			a[i++] = "<td width='3'></td>";

			a[i++] = gRefresh1.join("") + gRefresh0.join("") + gZoom.join("") + gNavi.join("") + gPrintSet.join("")
					+ gPrint.join("") + gSave.join("");

			a[i++] = "<td>&nbsp;</td></tr></tbody></table>"; // 툴바의 끝

			a[i++] = "</td></tr></tbody></table>"; // 컨테이너(툴바와 AboutBox를 감싼)
		}
		// ================================================================================
		// [일반배치]
		// ================================================================================
		else {
			// 컨테이너(툴바와 AboutBox를 감싼)
			a[i++] = "<table id='"
					+ this.vid
					+ "UbiToolbar_ctnToolbar' cellspacing='0' cellpadding='0' width='100%' height='100%'><tbody><tr><td style='padding:0px;'>"; // 컨테이너(툴바와
			// AboutBox를
			// 감싸는)
			// 툴바(AboutBox를 제외한)의 시작
			a[i++] = "<table style='"
					+ IE7_TableStyle
					+ "' id='"
					+ this.vid
					+ "UbiToolbar_mainToolbar' cellspacing='0' cellpadding='0' align='left' class='ubiToolbarTable_standard'><tbody><tr>";
			a[i++] = "<td width='3'></td><td>";

			a[i++] = gSave.join("") + gPrint.join("") + gPrintSet.join("") + gNavi.join("") + gZoom.join("")
					+ gRefresh0.join("") + gRefresh1.join("");

			a[i++] = "</td><td>&nbsp;</td></tr></tbody></table>"; // 툴바의 끝
			a[i++] = "</td><td align='right'>"; // 컨테이너(툴바와 AboutBox를 감싼)
			a[i++] = gAbout.join("");
			a[i++] = "</td></tr></tbody></table>"; // 컨테이너(툴바와 AboutBox를 감싼)
		}

		if (_ubi_rtl) {
			// 1 레벨 팝업
			a[i++] = "<div id='"
					+ this.vid
					+ "UbiToolbarPop1_Save' style='display:none;z-index: 999999101; left: 7px; top: 50px;' class='ubiToolbarMenu_standard'>";
			a[i++] = "<div id='" + this.vid
					+ "UbiToolbarButton1_Pdf' class='popupItem' style='text-align:right;'><span id='" + this.vid
					+ "UbiMenu_PDF'>" + this.MenuText['PDF'] + "</span><img align=absmiddle id='" + this.vid
					+ "UbiToolbarButton1_PdfButton' src='" + resource + "/images/toolbar/pdf.png'></div>";
			a[i++] = "<div id='"
					+ this.vid
					+ "UbiToolbarButton1_Excel' class='popupItem' style='text-align:right;'><span>&nbsp;&nbsp;</span><span id='"
					+ this.vid
					+ "UbiDropMenu_Print' style='background-image: url("
					+ resource
					+ "/images/skins/standard/left_arrow.gif);background-repeat: no-repeat right;margin:0px 10px 0px 0px;'>&nbsp;&nbsp;</span>";
			a[i++] = "&nbsp;&nbsp;<span id='" + this.vid + "UbiMenu_EXCEL'>" + this.MenuText['EXCEL']
					+ "</span><img align=absmiddle id='" + this.vid + "UbiToolbarButton1_XlsButton' src='" + resource
					+ "/images/toolbar/xls.png'></div>";
			a[i++] = "<div id='" + this.vid
					+ "UbiToolbarButton1_Doc' class='popupItem' style='text-align:right;'><span id='" + this.vid
					+ "UbiMenu_RTF'>" + this.MenuText['RTF'] + "</span><img align=absmiddle id='" + this.vid
					+ "UbiToolbarButton1_RtfButton' src='" + resource + "/images/toolbar/rtf.png'></div>";
			a[i++] = "<div id='" + this.vid
					+ "UbiToolbarButton1_Docx' class='popupItem' style='text-align:right;'><span id='" + this.vid
					+ "UbiMenu_DOCX'>" + this.MenuText['DOCX'] + "</span><img align=absmiddle id='" + this.vid
					+ "UbiToolbarButton1_DocxButton' src='" + resource + "/images/toolbar/rtf.png'></div>";
			a[i++] = "<div id='" + this.vid
					+ "UbiToolbarButton1_Pptx' class='popupItem' style='text-align:right;'><span id='" + this.vid
					+ "UbiMenu_PPTX'>" + this.MenuText['PPTX'] + "</span><img align=absmiddle id='" + this.vid
					+ "UbiToolbarButton1_PptxButton' src='" + resource + "/images/toolbar/ppt.png'></div>";
			a[i++] = "<div id='" + this.vid
					+ "UbiToolbarButton1_Hwp' class='popupItem' style='text-align:right;'><span id='" + this.vid
					+ "UbiMenu_HWP'>" + this.MenuText['HWP'] + "</span><img align=absmiddle id='" + this.vid
					+ "UbiToolbarButton1_HwpButton' src='" + resource + "/images/toolbar/hwp.png'></div>";
			a[i++] = "<div id='" + this.vid
					+ "UbiToolbarButton1_Hml' class='popupItem' style='text-align:right;'><span id='" + this.vid
					+ "UbiMenu_HML'>" + this.MenuText['HML'] + "</span><img align=absmiddle id='" + this.vid
					+ "UbiToolbarButton1_HmlButton' src='" + resource + "/images/toolbar/hwp.png'></div>";
			a[i++] = "</div>";

			// 2 레벨 팝업
			a[i++] = "<div id='"
					+ this.vid
					+ "UbiToolbarPop2_Excel' style='display:none;z-index: 999999102; left: 100px; top: 50px;' class='ubiToolbarMenu_standard'>";
			a[i++] = "<div id='" + this.vid
					+ "UbiToolbarButton2_Excel1' class='popupItem'><div style='text-align:right'><span id='" + this.vid
					+ "UbiMenu_EXCEL_TYPE1'>" + this.MenuText['EXCEL_TYPE1'] + "</span><img align=absmiddle id='"
					+ this.vid + "UbiToolbarButton2_XlsButton1' src='" + resource
					+ "/images/toolbar/print_form.png'></div></div>";
			a[i++] = "<div id='" + this.vid
					+ "UbiToolbarButton2_Excel2' class='popupItem'><div style='text-align:right'><span id='" + this.vid
					+ "UbiMenu_EXCEL_TYPE2'>" + this.MenuText['EXCEL_TYPE2'] + "</span><img align=absmiddle id='"
					+ this.vid + "UbiToolbarButton2_XlsButton2' src='" + resource
					+ "/images/toolbar/default_form.png'></div></div>";
			a[i++] = "</div>";

			// 1 레벨 팝업
			a[i++] = "<div id='"
					+ this.vid
					+ "UbiToolbarPop1_Print' style='display:none;z-index: 999999103; left: 7px; top: 50px; ' class='ubiToolbarMenu_standard'>";
			a[i++] = "<div id='" + this.vid
					+ "UbiToolbarButton1_Print1' class='popupItem' style='text-align:right;'><span id='" + this.vid
					+ "UbiMenu_PRINT_PDF'>" + this.MenuText['PRINT_PDF'] + "</span><img align=absmiddle id='"
					+ this.vid + "UbiToolbarButton1_Print1Button' src='" + resource + "/images/toolbar/pdf.png'></div>";
			a[i++] = "<div id='" + this.vid
					+ "UbiToolbarButton1_Print2' class='popupItem' style='text-align:right;'><span id='" + this.vid
					+ "UbiMenu_PRINT_HTML'>" + this.MenuText['PRINT_HTML'] + "</span><img align=absmiddle id='"
					+ this.vid + "UbiToolbarButton1_Print2Button' src='" + resource
					+ "/images/toolbar/html.png'></div>";
			a[i++] = "</div>";
		} else {
			// 1 레벨 팝업
			a[i++] = "<div id='"
					+ this.vid
					+ "UbiToolbarPop1_Save' style='display:none;z-index: 999999101; left: 7px; top: 50px;' class='ubiToolbarMenu_standard'>";
			a[i++] = "<div id='" + this.vid + "UbiToolbarButton1_Pdf' class='popupItem'><img align=absmiddle id='"
					+ this.vid + "UbiToolbarButton1_PdfButton' src='" + resource
					+ "/images/toolbar/pdf.png'><span id='" + this.vid + "UbiMenu_PDF'>" + this.MenuText['PDF']
					+ "</span></div>";
			a[i++] = "<div id='"
					+ this.vid
					+ "UbiToolbarButton1_Excel' class='popupItem'><img align=absmiddle id='"
					+ this.vid
					+ "UbiToolbarButton1_XlsButton' src='"
					+ resource
					+ "/images/toolbar/xls.png'><span id='"
					+ this.vid
					+ "UbiMenu_EXCEL'>"
					+ this.MenuText['EXCEL']
					+ "</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span id='"
					+ this.vid
					+ "UbiDropMenu_Print' style='background-image: url("
					+ resource
					+ "/images/skins/standard/right_arrow.gif);background-repeat: no-repeat right;margin:0px 0px 0px 10px;'>&nbsp;&nbsp;</span></div>";
			a[i++] = "<div id='" + this.vid + "UbiToolbarButton1_Doc' class='popupItem'><img align=absmiddle id='"
					+ this.vid + "UbiToolbarButton1_RtfButton' src='" + resource
					+ "/images/toolbar/rtf.png'><span id='" + this.vid + "UbiMenu_RTF'>" + this.MenuText['RTF']
					+ "</span></div>";
			a[i++] = "<div id='" + this.vid + "UbiToolbarButton1_Docx' class='popupItem'><img align=absmiddle id='"
					+ this.vid + "UbiToolbarButton1_DocxButton' src='" + resource
					+ "/images/toolbar/rtf.png'><span id='" + this.vid + "UbiMenu_DOCX'>" + this.MenuText['DOCX']
					+ "</span></div>";
			a[i++] = "<div id='" + this.vid + "UbiToolbarButton1_Pptx' class='popupItem'><img align=absmiddle id='"
					+ this.vid + "UbiToolbarButton1_PptxButton' src='" + resource
					+ "/images/toolbar/ppt.png'><span id='" + this.vid + "UbiMenu_PPTX'>" + this.MenuText['PPTX']
					+ "</span></div>";
			a[i++] = "<div id='" + this.vid + "UbiToolbarButton1_Hwp' class='popupItem'><img align=absmiddle id='"
					+ this.vid + "UbiToolbarButton1_HwpButton' src='" + resource
					+ "/images/toolbar/hwp.png'><span id='" + this.vid + "UbiMenu_HWP'>" + this.MenuText['HWP']
					+ "</span></div>";
			a[i++] = "<div id='" + this.vid + "UbiToolbarButton1_Hml' class='popupItem'><img align=absmiddle id='"
					+ this.vid + "UbiToolbarButton1_HmlButton' src='" + resource
					+ "/images/toolbar/hwp.png'><span id='" + this.vid + "UbiMenu_HML'>" + this.MenuText['HML']
					+ "</span></div>";
			a[i++] = "</div>";

			// 2 레벨 팝업
			a[i++] = "<div id='"
					+ this.vid
					+ "UbiToolbarPop2_Excel' style='display:none;z-index: 999999102; left: 100px; top: 50px;' class='ubiToolbarMenu_standard'>";
			a[i++] = "<div id='" + this.vid + "UbiToolbarButton2_Excel1' class='popupItem'><img align=absmiddle id='"
					+ this.vid + "UbiToolbarButton2_XlsButton1' src='" + resource
					+ "/images/toolbar/print_form.png'><span id='" + this.vid + "UbiMenu_EXCEL_TYPE1'>"
					+ this.MenuText['EXCEL_TYPE1'] + "</span></div>";
			a[i++] = "<div id='" + this.vid + "UbiToolbarButton2_Excel2' class='popupItem'><img align=absmiddle id='"
					+ this.vid + "UbiToolbarButton2_XlsButton2' src='" + resource
					+ "/images/toolbar/default_form.png'><span id='" + this.vid + "UbiMenu_EXCEL_TYPE2'>"
					+ this.MenuText['EXCEL_TYPE2'] + "</span></div>";
			a[i++] = "</div>";

			// 1 레벨 팝업
			a[i++] = "<div id='"
					+ this.vid
					+ "UbiToolbarPop1_Print' style='display:none;z-index: 999999103; left: 7px; top: 50px; ' class='ubiToolbarMenu_standard'>";
			a[i++] = "<div id='" + this.vid + "UbiToolbarButton1_Print1' class='popupItem'><img align=absmiddle id='"
					+ this.vid + "UbiToolbarButton1_Print1Button' src='" + resource
					+ "/images/toolbar/pdf.png'><span id='" + this.vid + "UbiMenu_PRINT_PDF'>"
					+ this.MenuText['PRINT_PDF'] + "</span></div>";
			a[i++] = "<div id='" + this.vid + "UbiToolbarButton1_Print2' class='popupItem'><img align=absmiddle id='"
					+ this.vid + "UbiToolbarButton1_Print2Button' src='" + resource
					+ "/images/toolbar/html.png'><span id='" + this.vid + "UbiMenu_PRINT_HTML'>"
					+ this.MenuText['PRINT_HTML'] + "</span></div>";
			a[i++] = "</div>";
		}
		
		a[i++] = "<div id='"+ this.vid +"UbiToolbarSelect_ZoomList' class='ubiToolbar_Styled_Select_List' style='display: none; position: absolute; z-index: 999999101;'></div>";
		a[i++] = "<div id='"+ this.vid +"UbiToolbarSelect_PageList' class='ubiToolbar_Styled_Select_List' style='display: none; position: absolute; z-index: 999999101;'></div>";

		// about 박스
		a[i++] = "<div id='"
				+ this.vid
				+ "UbiToolbarPop1_About' style='display:none;position:absolute;z-index:999999104;left:50%;top:50%;%;width:320px;height:200px;margin-left:-160px;margin-top:-100px;background-image:url("
				+ resource + "/images/about" + ((_ubi_rtl) ? "_rtl" : "") + ".png);'>";

		a[i++] = "<div style='height:40px'>";
		a[i++] = "</div>";
		a[i++] = "<div style='height:56px'>";
		a[i++] = " <div style='height:18px;'></div>";
		a[i++] = "	<div class='ubiAboutBox_BuildNo'>";
		a[i++] = "	" + _UBI_REPORT_BUILD_NO;
		a[i++] = "	</div>";
		a[i++] = "	<div class='ubiAboutBox_Description'>";
		a[i++] = "	This copy is licensed to UbiDecision.";
		a[i++] = "	</div>";
		a[i++] = "</div>";
		a[i++] = "<div style='height:57px'>";
		a[i++] = " <div style='height:20px;'></div>";
		a[i++] = "	<div class='ubiAboutBox_Link'>";
		a[i++] = "	<a target='ubireport_new' style='text-decoration:none;' href=\"http:/"
				+ "/www.ubireport.com\">www.ubireport.com</a>";
		a[i++] = "	</div>";
		a[i++] = "</div>";
		a[i++] = "<div style='height:32px;padding-top:13px'>";

		a[i++] = "<span class=\"ubiButton gray\"><button onclick=\"document.getElementById('"
				+ this.vid
				+ "UbiToolbarPop1_About').style.display='none';\" onMouseOut=\"this.parentNode.className='ubiButton gray';\" onMouseOver=\"this.parentNode.className='ubiButton blue';\" type=\"button\">"
				+ _ubi_msg[viewer.params.language].Button_OK + "</button></span>"; // 확인
		a[i++] = "</div>";

		a[i++] = "</div>";

		// PrintDlg 박스
		a[i++] = "<div id='"
				+ this.vid
				+ "UbiToolbarPop1_PrintDlg' style='display:none;position:absolute;z-index:999999104;left:50%;top:50%;%;width:320px;height:200px;margin-left:-160px;margin-top:-100px;background-image:url("
				+ resource + "/images/printdlg" + ((_ubi_rtl) ? "_rtl" : "") + ".png);'>";

		a[i++] = "<div style='height:40px'>";
		a[i++] = "</div>";
		a[i++] = "<div style='height:115px;padding:0px;line-height:100%;'>";
		a[i++] = " <div style='height:8px;'></div>";
		a[i++] = " <div class='ubiPrintDialog_FromTo'"
				+ ((_ubi_rtl) ? " style='text-align:right;padding-right:24px;'" : "")
				+ "><div style='margin:0px 0px 0px 0px'>" + _ubi_msg[viewer.params.language].PrintDlgTitle + "</div>"; // 인쇄범위를
		// 설정합니다.

		a[i++] = " <div style='height:8px;'></div>";

		a[i++] = " <div>"; // 페이지 지정

		if (!_ubi_rtl) {
			a[i++] = " <input type=radio name='UbiPrintOption' id='" + this.vid + "UbiPrintOptionAll' checked>";
		}
		a[i++] = "&nbsp;" + _ubi_msg[viewer.params.language].PrintDlgAll; // 모두 /
		if (_ubi_rtl) {
			a[i++] = " <input type=radio name='UbiPrintOption' id='" + this.vid + "UbiPrintOptionAll' checked>";
		}
		a[i++] = " </div>"; // 페이지 지정

		a[i++] = " <div style='height:6px;'></div>";

		a[i++] = " <div>"; // 페이지 지정

		if (!_ubi_rtl) {
			a[i++] = " <input type=radio name='UbiPrintOption' id='" + this.vid + "UbiPrintOptionCur'>";
		}
		a[i++] = "&nbsp;" + _ubi_msg[viewer.params.language].PrintDlgCurrent; // 현재
		// 페이지
		if (_ubi_rtl) {
			a[i++] = " <input type=radio name='UbiPrintOption' id='" + this.vid + "UbiPrintOptionCur'>";
		}

		a[i++] = " </div>"; // 페이지 지정

		a[i++] = " <div style='height:6px;'></div>";

		a[i++] = " <div style='display:block;bottom:0px;'>"; // 페이지 지정
		if (!_ubi_rtl) {
			a[i++] = " <input type=radio name='UbiPrintOption' id='" + this.vid + "UbiPrintOptionFT'>";
			a[i++] = "&nbsp;" + _ubi_msg[viewer.params.language].PrintDlgFromTo; // 페이지
			// 지정
			a[i++] = " <input type=text onFocus=\"UbiViewers['"
					+ this.vid
					+ "'].PrintDlgFocus()\" id='"
					+ this.vid
					+ "UbiPrintOptionFrom' style='position:relative;width:32px;height:16px;left:-1px;top:-4px;margin:0px;padding:2px;border:1px solid #999;'>&nbsp;"
					+ _ubi_msg[viewer.params.language].PrintDlgFrom; // 부터
			a[i++] = " <input type=text onFocus=\"UbiViewers['"
					+ this.vid
					+ "'].PrintDlgFocus()\" id='"
					+ this.vid
					+ "UbiPrintOptionTo' style='position:relative;width:32px;height:16px;left:-1px;top:-4px;margin:0px;padding:2px;border:1px solid #999;'>&nbsp;"
					+ _ubi_msg[viewer.params.language].PrintDlgTo; // 까지
		}
		if (_ubi_rtl) {
			a[i++] = _ubi_msg[viewer.params.language].PrintDlgTo; // 까지
			a[i++] = " <input type=text onFocus=\"UbiViewers['"
					+ this.vid
					+ "'].PrintDlgFocus()\" id='"
					+ this.vid
					+ "UbiPrintOptionTo' style='position:relative;width:32px;height:16px;left:-1px;top:-4px;margin:0px;padding:2px;border:1px solid #999;'>";
			a[i++] = _ubi_msg[viewer.params.language].PrintDlgFrom; // 부터
			a[i++] = " <input type=text onFocus=\"UbiViewers['"
					+ this.vid
					+ "'].PrintDlgFocus()\" id='"
					+ this.vid
					+ "UbiPrintOptionFrom' style='position:relative;width:32px;height:16px;left:-1px;top:-4px;margin:0px;padding:2px;border:1px solid #999;'>";
			a[i++] = _ubi_msg[viewer.params.language].PrintDlgFromTo;
			a[i++] = " <input type=radio name='UbiPrintOption' id='" + this.vid + "UbiPrintOptionFT'>";
		}
		a[i++] = " </div>"; // 페이지 지정

		a[i++] = " <div style='height:1px;'></div>";
		// 인쇄량이 많아서 부분 인쇄만 지원됨
		// ※ 인쇄량이 많아서 10 장씩 인쇄 가능합니다.
		a[i++] = " <div id='" + this.vid + "UbiPrintOptionAllMsg' class='UbiPrintOptionAllMsg' style='display:none;'> "
				+ _ubi_msg[viewer.params.language].PrintDlgMent + "</div>";
		// "+ubiviewer.params.printlimit+" \uC7A5\uC529 \uC778\uC1C4
		// \uAC00\uB2A5\uD569\uB2C8\uB2E4.</div>";
		a[i++] = "	</div>";
		a[i++] = "</div>";
		a[i++] = "<div style='height:32px;padding-top:11px'>";

		var btnOk = "	<span class=\"ubiButton gray\"><button onclick=\"UbiViewers['"
				+ this.vid
				+ "'].PrintDlgOk();\" onMouseOut=\"this.parentNode.className='ubiButton gray';\" onMouseOver=\"this.parentNode.className='ubiButton blue';\" type=\"button\">"
				+ _ubi_msg[viewer.params.language].Button_OK + "</button></span>"; // 확인
		var btnSpace = "&nbsp;";
		var btnCancel = "	<span class=\"ubiButton gray\"><button onclick=\"document.getElementById('"
				+ this.vid
				+ "UbiToolbarPop1_PrintDlg').style.display='none';\" onMouseOut=\"this.parentNode.className='ubiButton gray';\" onMouseOver=\"this.parentNode.className='ubiButton blue';\" type=\"button\">"
				+ _ubi_msg[viewer.params.language].Button_Cancel + "</button></span>"; // 취소

		if (_ubi_rtl) {
			a[i++] = btnCancel + btnSpace + btnOk;
		} else {
			a[i++] = btnOk + btnSpace + btnCancel;
		}

		a[i++] = "</div>";

		a[i++] = "</div>";

		// 배열처리로 속도저하를 막음
		return a.join("");
	};

	// ====================================================================================================
	// 툴바의 이벤트 담당 모듈
	// ====================================================================================================
	this.mAddEvent = function(obj, evt, fn) {
		evt = (evt.indexOf(" ") != -1) ? evt.split(" ") : [ evt ];
		for (i in evt) {
			var e = evt[i];
			if (e == "mousewheel") {
				if (obj.addEventListener)
					obj.addEventListener('DOMMouseScroll', fn, false);
				obj.onmousewheel = fn;
				break;
			}
			if (obj.addEventListener)
				obj.addEventListener((e == "mousewheel") ? "DOMMouseScroll" : e, fn, false);
			else if (obj.attachEvent)
				obj.attachEvent('on' + e, fn);
		}
	};

	// ====================================================================================================
	// 툴바의 이벤트 담당 모듈 (이벤트 감시 해제 용도)
	// ====================================================================================================
	this.mRemoveEvent = function(obj, evt, fn) {

		evt = (evt.indexOf(" ") != -1) ? evt.split(" ") : [ evt ];
		for (i in evt) {
			var e = evt[i];
			if (e == "mousewheel") {
				if (obj.removeEventListener)
					obj.removeEventListener('DOMMouseScroll', fn, false);
				obj.onmousewheel = null;
				break;
			}
			if (obj.removeEventListener)
				obj.removeEventListener((e == "mousewheel") ? "DOMMouseScroll" : e, fn, false);
			else if (obj.detachEvent)
				obj.detachEvent('on' + e, fn);
		}
	};

	// ====================================================================================================
	// 버튼이나 메뉴항목을 찾아내는 내부 함수
	// ====================================================================================================
	this.GetParentID = function(eventTarget) {
		if (eventTarget && eventTarget.id) {
			if (eventTarget.id.indexOf("UbiToolbar") > -1) {
				return eventTarget;
			} else {
				return this.GetParentID(eventTarget.parentElement);
			}
		} else {
			return null;
		}
	};

	// ====================================================================================================
	// 특정 툴바 버튼의 표시감춤을 위한 함수
	// ====================================================================================================
	this.hideItem = function(id) {
		if (id == 'printset') {
			if (document.getElementById(this.vid + 'UbiToolbarButton0_PrintSet'))
				document.getElementById(this.vid + 'UbiToolbarButton0_PrintSet').style.display = 'none';
		}
	};

	// ====================================================================================================
	// 개체의 초기화 처리
	// ====================================================================================================
	this.cont = (typeof (baseId) != "object") ? document.getElementById(baseId) : baseId;
	while (this.cont.childNodes.length > 0)
		this.cont.removeChild(this.cont.childNodes[0]);

	// this.cont.dir = "ltr";
	this.cont.innerHTML += this.GetToolbarContent();
	this.cont.className = 'ubiToolbar_standard';
	// this.cont.style.outline='1px solid red';
	this.align = "left";

	viewer.setVisibleToolbar('PRINT_PDF', false);
	viewer.setVisibleToolbar('PRINT_HTML', false);

	this.setAlign = function(align) {
		this.align = (align == "right" ? "right" : "left");
		this.base.className = (align == "right" ? "float_right" : "float_left");
		if (this._spacer)
			this._spacer.className = "dhxtoolbar_spacer " + (align == "right" ? " float_left" : " float_right");
	};

	if (_isIE) {
		if (window.XMLHttpRequest == null)
			this._ieVersion = 6;
	}

	this._isIPad = (navigator.userAgent.search(/iPad/gi) >= 0);

	// --------------------------------------------------------------------------------
	// 주석 풀었더니 아이패드만 인식이 안되었었음. AM2013-0410 (아이패드 테스트 결과)
	// --------------------------------------------------------------------------------
	/*
	 * if (this._isIPad) { this.cont.ontouchstart = function(e){ e = e||event;
	 * e.returnValue = false; e.cancelBubble = true; return false; } }
	 */

	// IE 에서만 의미가 있는 PrintSet 를 지원함
	if (!_isIE)
		this.hideItem("printset");

	function changed(e) {
		this.vid = vid;
		var theButton = null;
		var eventTarget = e.target || e.srcElement;
		if (eventTarget.id.substring(0, vid.length) != vid) {
			return;
		}

		theButton = eventTarget;

		var theButton_id = '';

		if (theButton) {
			theButton_id = theButton.id;
			theButton_id = theButton_id.substring(this.vid.length);

		}

		switch (theButton_id) {
		case "UbiToolbarSelect_Zoom":
			viewer.toolbar.toolbarobj.changeZoom();
			// viewer.toolbar.toolbarobj.changeZoom();
			break;

		case "UbiToolbarSelect_Page":
			viewer.toolbar.toolbarobj.changePage();
			break;
		}
	}

	function clicked(e) {
		var theButton = null;
		var theButton2 = null; // 콤보드랍메뉴만을 체크하기 위해서 사용
		var eventTarget = e.target || e.srcElement;
		// 해당 뷰어가 아니면 무시하기
		if (!eventTarget || !eventTarget.id) {
			return;
		}
		if (eventTarget.id.substring(0, vid.length) != vid) {
			// 다른 뷰어에서 발생한 이벤트는 여기서 처리하지 않음
			return;
		}
		this.vid = vid;
		theButton = viewer.toolbar.toolbarobj.GetParentID(eventTarget);
		theButton2 = eventTarget;
		var theButton2_id = theButton2.id.substring(this.vid.length);
		var theButton_id = '';

		if (theButton == null) {
			theButton = document.getElementById(this.vid + theButton2_id);
		}

		if (theButton) {
			theButton_id = theButton.id;
			theButton_id = theButton_id.substring(this.vid.length);

			// 버튼에 disabled 신호가 들어와 있다면 아무리 눌러도 동작하지 않도록 처리한다.
			if (theButton.enabled) {
				if (theButton.enabled == 'F') {
					return;
				}
			}
		}
		if (theButton_id == '' && theButton2_id != '') {
			theButton_id = theButton2_id;
		}

		// 메뉴 외의 영역 클릭시 팝업 자동 닫기
		if (theButton_id == '' || theButton_id.substring(0, 8) == "_preview") {
			_ubi_PopupMenuHiddenAll();
			return;
		}
		switch (theButton_id) {
		case "UbiToolbarButton0_InfoButton":
			viewer.aboutBox();
			_ubi_PopupMenuHiddenAll();
			break;

		case "UbiToolbarButton1_Print1Button": // PDF인쇄 아이콘클릭
		case "UbiToolbarButton1_Print1": // PDF인쇄 메뉴명클릭
			if (_ubiDaemonValidation == true) {
				viewer.print(viewer);
			}
			_ubi_PopupMenuHiddenAll();
			break;
		case "UbiToolbarButton1_Print2Button": // HTML 인쇄 아이콘클릭
		case "UbiToolbarButton1_Print2": // HTML 인쇄 메뉴명클릭
			if (_ubiDaemonValidation == true) {
				viewer.printHTML(viewer);
			}
			_ubi_PopupMenuHiddenAll();
			break;

		case "UbiMenu_SAVE": // 저장글자(글자만)
		case "UbiDropMenu_Save1": // 저장글자 주변영역
		case "UbiDropMenu_Save4": // 저장 드랍 콤보버튼
		case "UbiToolbarButton0_SaveButton": // 저장아이콘
		case "UbiToolbarButton_Save": // [저장아이콘] / [저장글자] 0레벨
			// 저장메뉴

			// 콤보드랍메뉴 눌렀을때에만 팝업메뉴 처리
			if (theButton2_id == 'UbiDropMenu_Save3' || theButton2_id == 'UbiDropMenu_Save4') // 콤보드랍목록버튼
			{
				// Save 메뉴 클릭시 1레벨 메뉴를 보여줌(단, 이미 보이고 있다면 다시 감춰줌)
				if (_ubiDaemonValidation) // 저장메뉴 보여주기
				{
					if (viewer.getEnableToolbar("SAVE") == true
							&& document.getElementById(this.vid + 'UbiToolbarPop1_Save').style.display == 'none') {
						_ubi_PopupMenuHiddenAll();
						document.getElementById(this.vid + 'UbiToolbarPop1_Save').style.display = '';

						var iMainToolbarTop = document.getElementById(
								this.vid + "UbiToolbar_ctnToolbar").getBoundingClientRect().top;
						var iMainToolbarWidth = document.getElementById(
								this.vid + "UbiToolbar_ctnToolbar").getBoundingClientRect().right
								- document.getElementById(this.vid + "UbiToolbar_ctnToolbar")
										.getBoundingClientRect().left;
						var iSavePopWidth = document.getElementById(this.vid + "UbiToolbarPop1_Save")
								.getBoundingClientRect().right
								- document.getElementById(this.vid + "UbiToolbarPop1_Save")
										.getBoundingClientRect().left;

						// 저장 팝업메뉴 위치
						document.getElementById(this.vid + 'UbiToolbarPop1_Save').style.top = viewer.toolbarHeight
								+ "px";
						/*
						 * if(document.getElementById(this.vid+"UbiToolbarPop1_Save").getBoundingClientRect().top<document.getElementById(this.vid+"UbiToolbar_ctnToolbar").getBoundingClientRect().top+document.getElementById(this.vid+"UbiToolbar_ctnToolbar").getBoundingClientRect().height) {
						 * document.getElementById(this.vid+'UbiToolbarPop1_Save').style.top=
						 * iMainToolbarTop+viewer.toolbarHeight +
						 * "px"; }
						 */

						document.getElementById(this.vid + 'UbiToolbarPop1_Save').style.left = ((_ubi_rtl) ? (iMainToolbarWidth - iSavePopWidth)
								+ "px"
								: "-2px"); // 0px 가 맞지만 아이콘 세로선
						// 맞추기 위해서 살짝 조정함.
					} else {
						document.getElementById(this.vid + 'UbiToolbarPop1_Save').style.display = 'none';
						document.getElementById(this.vid + 'UbiToolbarPop2_Excel').style.display = 'none';
					}
				}
			} else {
				if (theButton_id == 'UbiToolbarButton_Save') // 인쇄
				// 아이콘이나
				// 인쇄
				// 글자
				{
					document.getElementById(this.vid + 'UbiToolbarPop1_Save').style.display = 'none'; // 실행 및
					// 팝업닫기
					// 기본 인쇄메뉴 실행하기
				}
			}

			if (theButton2_id.indexOf("DropMenu_Save2") == -1
					&& theButton2_id.indexOf("DropMenu_Save3") == -1
					&& theButton2_id.indexOf("DropMenu_Save4") == -1) // 드랍메뉴는 저장하지 말아야 한다.
			{
				if (viewer.SaveDefaultType == "EXCEL_TYPE1") {
					if (_ubiDaemonValidation == true)
						viewer.exportExcel(viewer);
				} else if (viewer.SaveDefaultType == "EXCEL_TYPE2") {
					if (_ubiDaemonValidation == true)
						viewer.exportExcelNo(viewer);
				} else if (viewer.SaveDefaultType == "RTF") {
					if (_ubiDaemonValidation == true)
						viewer.exportRtf(viewer);
				} else if (viewer.SaveDefaultType == "HWP") {
					if (_ubiDaemonValidation == true)
						viewer.exportHwp(viewer);
				} else if (viewer.SaveDefaultType == "HML") {
					if (_ubiDaemonValidation == true)
						viewer.exportHml(viewer);
				} else if (viewer.SaveDefaultType == "PPTX") {
					if (_ubiDaemonValidation == true)
						viewer.exportPptx(viewer);
				} else if (viewer.SaveDefaultType == "DOCX") {
					if (_ubiDaemonValidation == true)
						viewer.exportDocx(viewer);
				} else if (viewer.SaveDefaultType == "CELL") {
					if (_ubiDaemonValidation == true)
						viewer.exportCell(viewer);
				} else {
					if (_ubiDaemonValidation == true)
						viewer.exportPdf(viewer);
				}

				_ubi_PopupMenuHiddenAll();
			}
			break;

		case "UbiMenu_PRINT": // 인쇄글자(글자만)
		case "UbiDropMenu_Print1": // 인쇄글자(주변영역)
		case "UbiDropMenu_Print4": // 인쇄 드랍 콤보버튼
		case "UbiToolbarButton0_PrintButton": // 인쇄 아이콘
		case "UbiToolbarButton_Print": // [인쇄아이콘] [인쇄글자] 0레벨
			// 인쇄메뉴

			// 콤보드랍메뉴 눌렀을때에만 팝업메뉴 처리
			if (theButton2_id == 'UbiDropMenu_Print3' || theButton2_id == 'UbiDropMenu_Print4') // 콤보드랍목록버튼
			{
				// Print 메뉴 클릭시 1레벨 메뉴를 보여줌(단, 이미 보이고 있다면 다시
				// 감춰줌)
				if (_ubiDaemonValidation) // 저장메뉴 보여주기
				{
					if (viewer.getEnableToolbar("PRINT") == true
							&& document.getElementById(this.vid + 'UbiToolbarPop1_Print').style.display == 'none') {
						_ubi_PopupMenuHiddenAll();
						document.getElementById(this.vid + 'UbiToolbarPop1_Print').style.display = '';
						document.getElementById(this.vid + 'UbiToolbarPop1_Print').style.position = 'absolute';

						var iMainToolbarTop = document.getElementById(
								this.vid + "UbiToolbar_ctnToolbar").getBoundingClientRect().top;
						var iMainToolbarWidth = document.getElementById(
								this.vid + "UbiToolbar_ctnToolbar").getBoundingClientRect().right
								- document.getElementById(this.vid + "UbiToolbar_ctnToolbar")
										.getBoundingClientRect().left;
						var iPrintPopWidth = document.getElementById(this.vid + "UbiToolbarPop1_Print")
								.getBoundingClientRect().right
								- document.getElementById(this.vid + "UbiToolbarPop1_Print")
										.getBoundingClientRect().left;
						var iSaveButtonWidth = document.getElementById(
								this.vid + "UbiToolbarButton_Save").getBoundingClientRect().right
								- document.getElementById(this.vid + "UbiToolbarButton_Save")
										.getBoundingClientRect().left;

						// 인쇄 팝업메뉴 위치
						document.getElementById(this.vid + 'UbiToolbarPop1_Print').style.top = viewer.toolbarHeight
								+ "px";
						/*
						 * if(document.getElementById(this.vid+"UbiToolbarPop1_Print").getBoundingClientRect().top<document.getElementById(this.vid+"UbiToolbar_ctnToolbar").getBoundingClientRect().top+document.getElementById(this.vid+"UbiToolbar_ctnToolbar").getBoundingClientRect().height) {
						 * document.getElementById(this.vid+'UbiToolbarPop1_Print').style.top=
						 * iMainToolbarTop+viewer.toolbarHeight +
						 * "px"; }
						 */

						document.getElementById(this.vid + 'UbiToolbarPop1_Print').style.left = ((_ubi_rtl) ? (iMainToolbarWidth
								- iPrintPopWidth - iSaveButtonWidth)
								+ "px"
								: (iSaveButtonWidth - 2) + "px");
					} else {
						document.getElementById(this.vid + 'UbiToolbarPop1_Print').style.display = 'none';
					}
				}
			} else {
				// UbiMenu_PRINT /
				if (theButton_id == 'UbiMenu_PRINT' || theButton_id == 'UbiDropMenu_Print1'
						|| theButton_id == 'UbiToolbarButton0_PrintButton') {
					if (viewer.PrintDefaultType == "PDF") {
						if (_ubiDaemonValidation == true)
							viewer.print(viewer);
					} else {
						if (_ubiDaemonValidation == true)
							viewer.printHTML(viewer);
					}
					return;
				}
			}

			if (theButton2_id.indexOf("DropMenu_Print2") == -1
					&& theButton2_id.indexOf("DropMenu_Print3") == -1
					&& theButton2_id.indexOf("DropMenu_Print4") == -1) // 드랍메뉴는
			// 인쇄하지
			// 말아야
			// 한다.
			{
				if (viewer.PrintDefaultType == "PDF") {
					if (_ubiDaemonValidation == true)
						viewer.print(viewer);
				} else {
					if (_ubiDaemonValidation == true)
						viewer.printHTML(viewer);
				}

				_ubi_PopupMenuHiddenAll();
			}
			break;

		case "UbiMenu_PRINTSET":
		case "UbiToolbarButton0_PrintSetButton": // [아이콘]
		case "UbiToolbarButton_PrintSet": // [메뉴]
			if (_ubiDaemonValidation == true)
				viewer.printSet(viewer);
			_ubi_PopupMenuHiddenAll();
			break;

		case "UbiToolbarButton1_PdfButton": // [아이콘]
		case "UbiToolbarButton1_Pdf": // [메뉴]
			if (_ubiDaemonValidation == true)
				viewer.exportPdf(viewer);
			_ubi_PopupMenuHiddenAll();
			break;

		case "UbiToolbarButton1_RtfButton":
		case "UbiToolbarButton1_Doc":
			if (_ubiDaemonValidation == true)
				viewer.exportRtf(viewer);
			_ubi_PopupMenuHiddenAll();
			break;

		case "UbiToolbarButton1_HwpButton":
		case "UbiToolbarButton1_Hwp":
			if (_ubiDaemonValidation == true)
				viewer.exportHwp(viewer);
			_ubi_PopupMenuHiddenAll();
			break;

		case "UbiToolbarButton1_HmlButton":
		case "UbiToolbarButton1_Hml":
			if (_ubiDaemonValidation == true)
				viewer.exportHml(viewer);
			_ubi_PopupMenuHiddenAll();
			break;

		case "UbiToolbarButton1_DocxButton":
		case "UbiToolbarButton1_Docx":
			if (_ubiDaemonValidation == true)
				viewer.exportDocx(viewer);
			_ubi_PopupMenuHiddenAll();
			break;

		case "UbiToolbarButton1_PptxButton":
		case "UbiToolbarButton1_Pptx":
			if (_ubiDaemonValidation == true)
				viewer.exportPptx(viewer);
			_ubi_PopupMenuHiddenAll();
			break;

		case "UbiToolbarButton1_Excel": // 팝업메뉴가 모두 사라진 경우에만
			// 동작함.
			if (viewer.VisibleItems['UbiToolbarButton2_Excel1'] == false
					&& viewer.VisibleItems['UbiToolbarButton2_Excel2'] == false) {
				if (_ubiDaemonValidation == true) {
					if (viewer.SaveExcelDefaultType == "EXCEL_TYPE1") {
						viewer.exportExcel(viewer);
					} else {
						viewer.exportExcelNo(viewer);
					}
				}
			}
			break;

		case "UbiToolbarButton2_XlsButton1":
		case "UbiToolbarButton2_Excel1":
			if (_ubiDaemonValidation == true)
				viewer.exportExcel(viewer);
			_ubi_PopupMenuHiddenAll();
			break;

		case "UbiToolbarButton2_XlsButton2":
		case "UbiToolbarButton2_Excel2":
			if (_ubiDaemonValidation == true)
				viewer.exportExcelNo(viewer);
			_ubi_PopupMenuHiddenAll();
			break;

		// UbiToolbarButton_First

		case "UbiToolbarButton0_FirstButton":
			viewer.toolbar.start();
			_ubi_PopupMenuHiddenAll();
			break;
		case "UbiToolbarButton0_PreviousButton":
			viewer.toolbar.back();
			_ubi_PopupMenuHiddenAll();
			break;
		case "UbiToolbarButton0_NextButton":
			viewer.toolbar.forward();
			_ubi_PopupMenuHiddenAll();
			break;
		case "UbiToolbarButton0_LastButton":
			viewer.toolbar.end();
			_ubi_PopupMenuHiddenAll();
			break;

		case "UbiToolbarButton0_ZoomOutButton":
			viewer.toolbar.zoomout();
			_ubi_PopupMenuHiddenAll();
			break;
		case "UbiToolbarButton0_ZoomInButton":
			viewer.toolbar.zoomin();
			_ubi_PopupMenuHiddenAll();
			break;

		case "UbiToolbarButton0_RefreshButton":
			viewer.toolbar.refresh();
			_ubi_PopupMenuHiddenAll();
			break;

		case "UbiToolbarSelect_Zoom":
			showComboBox("zoom");
//console.log(document.getElementById(this.vid + 'UbiToolbarSelect_Zoom'));
//			viewer.toolbar.toolbarobj.changeZoom();
			break;

		case "UbiToolbarSelect_Page":
			showComboBox("page");
//			viewer.toolbar.toolbarobj.changePage();
			break;

		}
	}
	
	function showComboBox(type) {
		
		var groupTag = "";
		var idTag = "";
		var listTag = "";
		
		if (type == "zoom") {
			groupTag = "UbiToolbarButton0_ZOOM_GROUP";
			idTag = "UbiToolbarButton0_ZOOMVALUE";
			listTag = "UbiToolbarSelect_ZoomList";
		} else if (type == "page") {
			groupTag = "UbiToolbarButton0_NAV_GROUP";
			idTag = "UbiToolbarButton0_PAGE";
			listTag = "UbiToolbarSelect_PageList";
		}

		var comboObj = document.getElementById(viewer.vid + listTag);
//console.log("showComboBox : ["+ comboObj.style.display +"]");
		if (comboObj.style.display == '') {
			comboObj.style.display = 'none';
			return;
		}

		// toolbar의 X Position 도출
		var obj = document.getElementById(viewer.vid +"UbiToolbar_mainToolbar");
		var list = obj.childNodes;
		var comboGroupId = viewer.vid + groupTag;
		var comboId = viewer.vid + idTag;
		var comboPosX = 3;
		var comboPosY = 0;
		if (list) {
			// tbody
			if (list[0]) {
				// tr
				if (list[0].childNodes && list[0].childNodes[0]) {
					list = list[0].childNodes[0].childNodes;
					for (var i=0; i<list.length; i++) {
						if (list[i].id == comboGroupId) {
							if (list[i].childNodes) {
								var list2 = list[i].childNodes;
								// table
								if (list2[0] && list2[0].childNodes) {
									// tbody
									if (list2[0].childNodes[0] && list2[0].childNodes[0].childNodes) {
										// tr
										if (list2[0].childNodes[0].childNodes[0]) {
											list2 = list2[0].childNodes[0].childNodes[0].childNodes;
											for (var j=0; j<list2.length; j++) {
												if (list2[j].id == comboId) {
													comboPosY = parseInt(list2[j].clientHeight);
													break;
												} else {
													comboPosX += parseInt(list2[j].clientWidth);
												}
											}
										}
									}
								}
							}
							break;
						} else {
							comboPosX += parseInt(list[i].clientWidth);
						}
					}
				}
			}
		}

		// ComboList의 위치 정의
		comboObj.style.display = '';
		comboObj.style.top = comboPosY + "px";
		comboObj.style.left = comboPosX + "px";
		// ComboList의 높이 정의
		var viewerObj = document.getElementById(viewer.vid);
		var toolbarObj = document.getElementById(viewer.vid + "_toolbar");
		var baseHeight = 20;
		var listHeight = 0;
		if (type == "zoom") {
			listHeight = Math.min(baseHeight*viewer.toolbar.scaleCount, baseHeight*15);
		} else if (type == "page") {
			listHeight = Math.min(baseHeight*viewer.totalPage, baseHeight*15);
		}
		var viewerHeight = viewerObj.scrollHeight;
		if (toolbarObj && toolbarObj.style.display != "none") {
			viewerHeight -= toolbarObj.scrollHeight;
		}
		
		if (listHeight < baseHeight) {
			listHeight = baseHeight;
		} else {
			listHeight = Math.min(listHeight, viewerHeight);
		}
//console.log(comboPosX +", "+ comboPosY +", "+ listHeight);

		comboObj.style.height = listHeight +"px";
	}
	
	function evtMouseDown(e) {
		var theButton = null;
		var eventTarget = e.target || e.srcElement;
				
//console.log(eventTarget.id);
		if (eventTarget.id) {
			if (eventTarget.id.substring(0, vid.length) != vid) {
				// 다른 뷰어에서 발생한 이벤트는 여기서 처리하지 않음
				// Popup Menu 닫기
				document.getElementById(vid +"UbiToolbarSelect_ZoomList").style.display = 'none';
				document.getElementById(vid +"UbiToolbarSelect_PageList").style.display = 'none';
				return;
			}
		}

		if (eventTarget.id == (vid +"UbiToolbarSelect_ZoomList") || eventTarget.id == (vid +"UbiToolbarSelect_PageList")) {
			return;
		}

//console.log(eventTarget.id);
		if (eventTarget.id != (vid +"UbiToolbarSelect_Zoom")) {
			document.getElementById(vid +"UbiToolbarSelect_ZoomList").style.display = 'none';
		}
		if (eventTarget.id != (vid +"UbiToolbarSelect_Page")) {
			document.getElementById(vid +"UbiToolbarSelect_PageList").style.display = 'none';
		}
		
		// combo가 선택되었을 경우
//console.log("eventTarget.id : "+ eventTarget.id);
		if (eventTarget.id.indexOf(vid +"ZoomOption_") == 0) {
			var scale = eventTarget.id.substring(eventTarget.id.lastIndexOf("_")+1);
			viewer.toolbar.changeScale(scale);
		}
		else if (eventTarget.id.indexOf(vid +"PageOption_") == 0) {
			var page = eventTarget.id.substring(eventTarget.id.lastIndexOf("_")+1);
			viewer.toolbar.movePage(page);
		}
		
		this.vid = vid;
		
		theButton = viewer.toolbar.toolbarobj.GetParentID(eventTarget);

		var theButton_id = '';
		if (theButton) {
			theButton_id = theButton.id;
			theButton_id = theButton_id.substring(this.vid.length);

			// 버튼에 disabled 신호가 들어와 있다면 아무리 눌러도 동작하지 않도록 처리한다.
			if (theButton.enabled)
				if (theButton.enabled == 'F') {
					return;
				}
		}
	}
	
	function dragstart(e) {
		(e.stopPropagation) ? e.stopPropagation() : window.event.cancelBubble = true;
		if (e.preventDefault)
			e.preventDefault();
		return false;
	}

	function selectstart(e) {
		if (e.srcElement.id == "UbiPrintOptionFrom" || e.srcElement.id == "UbiPrintOptionTo") // 인쇄 대화창 - 범위항목
		// 선택가능하도록 허용 (IE)
		{
			return true;
		} else {
			(e.stopPropagation) ? e.stopPropagation() : window.event.cancelBubble = true;
			if (e.preventDefault)
				e.preventDefault();
			return false;
		}
	}
	
	function focus(e) {
		var eventTarget = e.target || e.srcElement;
		eventTarget.blur();
	}

	function mouseover(e) {
		this.vid = vid;
		var theButton = null;
		var theButton_id = '';
		var eventTarget = e.target || e.srcElement;
		if (eventTarget.id.substring(0, vid.length) != vid) {
			// 다른 뷰어에서 발생한 이벤트는 여기서 처리하지 않음
			return;
		}
		theButton = viewer.toolbar.toolbarobj.GetParentID(eventTarget);
		if (theButton) {
			theButton_id = theButton.id;
			theButton_id = theButton_id.substring(this.vid.length);
			if (theButton.enabled == 'F') // 버튼 불가의 경우 오버해도 반응하지 말자.
			{
				return;
			}

			if (theButton.parentNode) // 1레벨 메뉴 속에 이미지도 마찬가지임.
			{
				if (theButton.parentNode.enabled == 'F') {
					return;
				}
			}
			if (theButton.parentNode.parentNode) // 2레벨 메뉴 속에 이미지도 마찬가지임.
			{
				if (theButton.parentNode.parentNode.enabled == 'F') {
					return;
				}
			}
			if (theButton.parentNode.parentNode.parentNode) // 2레벨 메뉴 속에 이미지도 마찬가지임.
			{
				if (theButton.parentNode.parentNode.parentNode.enabled == 'F') {
					return;
				}
			}
		}

		// 마우스 오버 이미지
		if (theButton_id == 'UbiToolbarButton0_SaveButton' || theButton_id == 'UbiToolbarButton_Save') // 저장 아이콘 + 저장 메뉴명
		{
			document.getElementById(this.vid + 'UbiToolbarButton0_SaveButton').src = viewer.params.resource
					+ "/images/toolbar/save_over.png";
		}
		if (theButton_id == 'UbiToolbarButton0_PrintButton' || theButton_id == 'UbiToolbarButton_Print') // 인쇄아이콘 + 인쇄메뉴명
		{
			document.getElementById(this.vid + 'UbiToolbarButton0_PrintButton').src = viewer.params.resource
					+ "/images/toolbar/print_over.png";
		}
		if (theButton_id == 'UbiToolbarButton0_PrintSetButton'
				|| theButton_id == 'UbiToolbarButton_PrintSet') // 인쇄설정아이콘 + 메뉴명
		{
			document.getElementById(this.vid + 'UbiToolbarButton0_PrintSetButton').src = viewer.params.resource
					+ "/images/toolbar/printset_over.png";
		}

		var imageFileTag = "_over";
		if (theButton) {
			if (theButton.parentNode.parentNode.parentNode) // 2레벨 메뉴 속의 이미지도 마찬가지임.
			{
				if (theButton.parentNode.parentNode.parentNode.enabled == 'F') {
					imageFileTag = "_d";
				}
			}
		}

		if (theButton_id == 'UbiToolbarButton0_FirstButton') {
			document.getElementById(this.vid + 'UbiToolbarButton0_FirstButton').src = viewer.params.resource
					+ "/images/toolbar/" + ((_ubi_rtl) ? "last" : "first") + imageFileTag + ".png";
		}
		if (theButton_id == 'UbiToolbarButton0_PreviousButton') {
			document.getElementById(this.vid + 'UbiToolbarButton0_PreviousButton').src = viewer.params.resource
					+ "/images/toolbar/" + ((_ubi_rtl) ? "next" : "previous") + imageFileTag + ".png";
		}
		if (theButton_id == 'UbiToolbarButton0_NextButton') {
			document.getElementById(this.vid + 'UbiToolbarButton0_NextButton').src = viewer.params.resource
					+ "/images/toolbar/" + ((_ubi_rtl) ? "previous" : "next") + imageFileTag + ".png";
		}
		if (theButton_id == 'UbiToolbarButton0_LastButton') {
			document.getElementById(this.vid + 'UbiToolbarButton0_LastButton').src = viewer.params.resource
					+ "/images/toolbar/" + ((_ubi_rtl) ? "first" : "last") + imageFileTag + ".png";
		}

		if (theButton_id == 'UbiToolbarButton0_ZoomInButton') {
			document.getElementById(this.vid + 'UbiToolbarButton0_ZoomInButton').src = viewer.params.resource
					+ "/images/toolbar/zoomin" + imageFileTag + ".png";
		}
		if (theButton_id == 'UbiToolbarButton0_ZoomOutButton') {
			document.getElementById(this.vid + 'UbiToolbarButton0_ZoomOutButton').src = viewer.params.resource
					+ "/images/toolbar/zoomout" + imageFileTag + ".png";
		}

		if (theButton_id == 'UbiToolbarButton0_RefreshButton') {
			document.getElementById(this.vid + 'UbiToolbarButton0_RefreshButton').src = viewer.params.resource
					+ "/images/toolbar/refresh_over.png";
		}
		if (theButton_id == 'UbiToolbarButton0_InfoButton') {
			document.getElementById(this.vid + 'UbiToolbarButton0_InfoButton').src = viewer.params.resource
					+ "/images/toolbar/info_over.png";
		}

		// [팝업메뉴] 마우스 오버 이미지
		if (theButton_id == 'UbiToolbarButton1_PdfButton' || theButton_id == 'UbiToolbarButton1_Pdf') // 아이콘 또는 메뉴명칭에서 오버시..
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_PdfButton').src = viewer.params.resource
					+ "/images/toolbar/pdf_over.png";
		}
		if (theButton_id == 'UbiToolbarButton1_XlsButton' || theButton_id == 'UbiToolbarButton1_Excel') // 아이콘 또는 메뉴명칭에서 오버시..
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_XlsButton').src = viewer.params.resource
					+ "/images/toolbar/xls_over.png";
		}
		if (theButton_id == 'UbiToolbarButton1_RtfButton' || theButton_id == 'UbiToolbarButton1_Doc') // 아이콘 또는 메뉴명칭에서 오버시..
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_RtfButton').src = viewer.params.resource
					+ "/images/toolbar/rtf_over.png";
		}
		if (theButton_id == 'UbiToolbarButton1_PptxButton' || theButton_id == 'UbiToolbarButton1_Pptx') // 아이콘 또는 메뉴명칭에서 오버시..
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_PptxButton').src = viewer.params.resource
					+ "/images/toolbar/ppt_over.png";
		}
		if (theButton_id == 'UbiToolbarButton1_HwpButton' || theButton_id == 'UbiToolbarButton1_Hwp') // 아이콘 또는 메뉴명칭에서 오버시..
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_HwpButton').src = viewer.params.resource
					+ "/images/toolbar/hwp_over.png";
		}
		if (theButton_id == 'UbiToolbarButton1_HmlButton' || theButton_id == 'UbiToolbarButton1_Hml') // 아이콘 또는 메뉴명칭에서 오버시..
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_HmlButton').src = viewer.params.resource
					+ "/images/toolbar/hwp_over.png";
		}
		if (theButton_id == 'UbiToolbarButton1_DocxButton' || theButton_id == 'UbiToolbarButton1_Docx') // 아이콘 또는 메뉴명칭에서 오버시..
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_DocxButton').src = viewer.params.resource
					+ "/images/toolbar/rtf_over.png";
		}

		if (theButton_id == 'UbiToolbarButton2_XlsButton1' || theButton_id == 'UbiToolbarButton2_Excel1') // 아이콘 또는 메뉴명칭에서 오버시..
		{
			document.getElementById(this.vid + 'UbiToolbarButton2_XlsButton1').src = viewer.params.resource
					+ "/images/toolbar/print_form_over.png";
		}
		if (theButton_id == 'UbiToolbarButton2_XlsButton2'
				|| theButton_id == 'UbiToolbarButton2_Excel2') // 아이콘  또는 메뉴명칭에서 오버시..
		{
			document.getElementById(this.vid + 'UbiToolbarButton2_XlsButton2').src = viewer.params.resource
					+ "/images/toolbar/default_form_over.png";
		}

		if (theButton_id == 'UbiToolbarButton1_Print1Button'
				|| theButton_id == 'UbiToolbarButton1_Print1') // 아이콘 또는 메뉴명칭에서
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Print1Button').src = viewer.params.resource
					+ "/images/toolbar/pdf_over.png";
		}
		if (theButton_id == 'UbiToolbarButton1_Print2Button'
				|| theButton_id == 'UbiToolbarButton1_Print2') // 아이콘 또는 메뉴명칭에서
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Print2Button').src = viewer.params.resource
					+ "/images/toolbar/html_over.png";
		}

		if (theButton_id.indexOf("UbiToolbarButton_") > -1) {
			// 엑셀 메뉴에 들어오면 2레벨 팝업을 띄움
			if (theButton_id == 'UbiToolbarButton_Save') {

			} else {
				// 다른 주요 메뉴로 이동시에는 모든 팝업 메뉴들을 다 닫음.
				document.getElementById(this.vid + 'UbiToolbarPop1_Save').style.display = 'none';
				document.getElementById(this.vid + 'UbiToolbarPop2_Excel').style.display = 'none';
			}

			// 엑셀 메뉴에 들어오면 2레벨 팝업을 띄움
			if (theButton_id == 'UbiToolbarButton_Print') {

			} else {
				// 다른 주요 메뉴로 이동시에는 모든 팝업 메뉴들을 다 닫음.
				document.getElementById(this.vid + 'UbiToolbarPop1_Print').style.display = 'none';
			}
		}

		if (theButton_id.indexOf("UbiToolbarButton1_Pdf") > -1
				|| theButton_id.indexOf("UbiToolbarButton1_PdfButton") > -1) // 1 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Pdf').className = "popupItemOver";
		} else if (theButton_id.indexOf("UbiToolbarButton1_Hwp") > -1
				|| theButton_id.indexOf("UbiToolbarButton1_HwpButton") > -1) // 1 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Hwp').className = "popupItemOver";
		} else if (theButton_id.indexOf("UbiToolbarButton1_Hml") > -1
				|| theButton_id.indexOf("UbiToolbarButton1_HmlButton") > -1) // 1 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Hml').className = "popupItemOver";
		} else if (theButton_id.indexOf("UbiToolbarButton1_Docx") > -1
				|| theButton_id.indexOf("UbiToolbarButton1_DocxButton") > -1) // 1 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Docx').className = "popupItemOver";
		} else if (theButton_id.indexOf("UbiToolbarButton1_Pptx") > -1
				|| theButton_id.indexOf("UbiToolbarButton1_PptxButton") > -1) // 1 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Pptx').className = "popupItemOver";
		} else if (theButton_id.indexOf("UbiToolbarButton1_Doc") > -1
				|| theButton_id.indexOf("UbiToolbarButton1_RtfButton") > -1) // 1 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Doc').className = "popupItemOver";
		} else if (theButton_id.indexOf("UbiToolbarButton1_Excel") > -1
				|| theButton_id.indexOf("UbiToolbarButton1_XlsButton") > -1) // 1 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Excel').className = "popupItemOver";
		} else if (theButton_id.indexOf("UbiToolbarButton2_Excel1") > -1
				|| theButton_id.indexOf("UbiToolbarButton2_XlsButton1") > -1) // 2 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton2_Excel1').className = "popupItemOver";
		} else if (theButton_id.indexOf("UbiToolbarButton2_Excel2") > -1
				|| theButton_id.indexOf("UbiToolbarButton2_XlsButton2") > -1) // 2 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton2_Excel2').className = "popupItemOver";
		}

		if (theButton_id.indexOf("UbiToolbarButton1_Print1") > -1
				|| theButton_id.indexOf("UbiToolbarButton1_Print1Button") > -1) // 1 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Print1').className = "popupItemOver";
		}
		if (theButton_id.indexOf("UbiToolbarButton1_Print2") > -1
				|| theButton_id.indexOf("UbiToolbarButton1_Print2Button") > -1) // 1 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Print2').className = "popupItemOver";
		}

		if (theButton_id.indexOf("UbiToolbarButton1_") > -1) // 1 레벨
		{
			// 엑셀 메뉴에 들어오면 2레벨 팝업을 띄움
			if (theButton_id == 'UbiToolbarButton1_Excel') {
				if (document.getElementById(this.vid + 'UbiDropMenu_Print').style.display != 'none') // 엑셀
				// 팝업
				// 화살표가
				// 있을때에만
				// 동작처리함.
				{
					// 엑셀 메뉴에 오면 2레벨 보여줌
					_ubi_PopupMenuHiddenAll(this.vid + "UbiToolbarPop1_Save"); // 2레벨
					// 펼칠메뉴의
					// 부모팝업메뉴는
					// 지우면
					// 안된다.
					document.getElementById(this.vid + 'UbiToolbarPop2_Excel').style.display = '';

					// 엑셀 2레벨 팝업메뉴
					var iMainToolbarWidth = document.getElementById(this.vid + "UbiToolbar_ctnToolbar")
							.getBoundingClientRect().right
							- document.getElementById(this.vid + "UbiToolbar_ctnToolbar")
									.getBoundingClientRect().left;
					var iSaveButtonWidth = document.getElementById(this.vid + "UbiToolbarPop1_Save")
							.getBoundingClientRect().right
							- document.getElementById(this.vid + "UbiToolbarPop1_Save")
									.getBoundingClientRect().left;
					var iSavePopWidth = document.getElementById(this.vid + "UbiToolbarPop1_Save")
							.getBoundingClientRect().right
							- document.getElementById(this.vid + "UbiToolbarPop1_Save")
									.getBoundingClientRect().left;
					var iExcelPopWidth = document.getElementById(this.vid + "UbiToolbarPop2_Excel")
							.getBoundingClientRect().right
							- document.getElementById(this.vid + "UbiToolbarPop2_Excel")
									.getBoundingClientRect().left;
					var iPdfButtonHeight = document.getElementById(this.vid + "UbiToolbarButton1_Pdf")
							.getBoundingClientRect().bottom
							- document.getElementById(this.vid + "UbiToolbarButton1_Pdf")
									.getBoundingClientRect().top;
					var iMainToolbarTop = document.getElementById(this.vid + "UbiToolbar_ctnToolbar")
							.getBoundingClientRect().top;

					document.getElementById(this.vid + 'UbiToolbarPop2_Excel').style.top = parseInt(document
							.getElementById(this.vid + 'UbiToolbarPop1_Save').style.top)
							+ iPdfButtonHeight + "px";
					document.getElementById(this.vid + 'UbiToolbarPop2_Excel').style.left = ((_ubi_rtl) ? (iMainToolbarWidth
							- iSavePopWidth - iExcelPopWidth)
							+ "px"
							: (iSaveButtonWidth - 2) + "px");

					// 엑셀 메뉴가 아닌 메뉴들에게 가면 해당 2레벨 감춰줌
					if (theButton_id.indexOf("UbiToolbarPop2_") > -1) // 1 레벨
					{
						document.getElementById(this.vid + 'UbiToolbarPop2_Excel').style.display = 'none';
					}
				}

			} else {
				document.getElementById(this.vid + 'UbiToolbarPop2_Excel').style.display = 'none';
			}
		}

	}
	
	function mouseout(e) {
//		this.vid = vid;
		var theButton = null;
		var theButton_id = '';
		var eventTarget = e.target || e.srcElement;

		if (eventTarget.id.substring(0, vid.length) != vid) {
			// 다른 뷰어에서 발생한 이벤트는 여기서 처리하지 않음
			return;
		}

		theButton = viewer.toolbar.toolbarobj.GetParentID(eventTarget);

		if (theButton) {
			theButton_id = theButton.id;
			theButton_id = theButton_id.substring(this.vid.length);
			if (theButton.enabled == 'F') // 버튼 불가의 경우 오버해도
			// 반응하지 말자.
			{
				return;
			}
			if (theButton.parentNode) // 1레벨 메뉴 속의 이미지도 마찬가지임.
			{
				if (theButton.parentNode.enabled == 'F') {
					return;
				}
			}
			if (theButton.parentNode.parentNode) // 2레벨 메뉴 속의
			// 이미지도
			// 마찬가지임.
			{
				if (theButton.parentNode.parentNode.enabled == 'F') {
					return;
				}
			}
			if (theButton.parentNode.parentNode.parentNode) // 2레벨
			// 메뉴
			// 속의
			// 이미지도
			// 마찬가지임.
			{
				if (theButton.parentNode.parentNode.parentNode.enabled == 'F') {
					return;
				}
			}

		}

		if (theButton_id == 'UbiToolbarButton0_SaveButton' || theButton_id == 'UbiToolbarButton_Save') // 저장
		// 아이콘
		// +
		// 메뉴명
		{
			document.getElementById(this.vid + 'UbiToolbarButton0_SaveButton').src = viewer.params.resource
					+ "/images/toolbar/save.png";
		}
		if (theButton_id == 'UbiToolbarButton0_PrintButton' || theButton_id == 'UbiToolbarButton_Print') // 인쇄
		// 아이콘
		// +
		// 메뉴명
		{
			document.getElementById(this.vid + 'UbiToolbarButton0_PrintButton').src = viewer.params.resource
					+ "/images/toolbar/print.png";
		}
		if (theButton_id == 'UbiToolbarButton0_PrintSetButton' || theButton_id == 'UbiToolbarButton_PrintSet') // 인쇄설정
		// 아이콘
		// +
		// 메뉴명
		{
			document.getElementById(this.vid + 'UbiToolbarButton0_PrintSetButton').src = viewer.params.resource
					+ "/images/toolbar/printset.png";
		}
		if (theButton_id == 'UbiToolbarButton0_RefreshButton') {
			document.getElementById(this.vid + 'UbiToolbarButton0_RefreshButton').src = viewer.params.resource
					+ "/images/toolbar/refresh.png";
		}
		if (theButton_id == 'UbiToolbarButton0_InfoButton') {
			document.getElementById(this.vid + 'UbiToolbarButton0_InfoButton').src = viewer.params.resource
					+ "/images/toolbar/info.png";
		}

		var imageFileTag = "";
		if (theButton) {
			if (theButton.parentNode.parentNode.parentNode) // 2레벨
			// 메뉴
			// 속의
			// 이미지도
			// 마찬가지임.
			{
				if (theButton.parentNode.parentNode.parentNode.enabled == 'F') {
					imageFileTag = "_d";
				}
			}
		}

		if (theButton_id == 'UbiToolbarButton0_FirstButton') {
			document.getElementById(this.vid + 'UbiToolbarButton0_FirstButton').src = viewer.params.resource
					+ "/images/toolbar/" + ((_ubi_rtl) ? "last" : "first") + imageFileTag + ".png";
		}
		if (theButton_id == 'UbiToolbarButton0_PreviousButton') {
			document.getElementById(this.vid + 'UbiToolbarButton0_PreviousButton').src = viewer.params.resource
					+ "/images/toolbar/" + ((_ubi_rtl) ? "next" : "previous") + imageFileTag + ".png";
		}
		if (theButton_id == 'UbiToolbarButton0_NextButton') {
			document.getElementById(this.vid + 'UbiToolbarButton0_NextButton').src = viewer.params.resource
					+ "/images/toolbar/" + ((_ubi_rtl) ? "previous" : "next") + imageFileTag + ".png";
		}
		if (theButton_id == 'UbiToolbarButton0_LastButton') {
			document.getElementById(this.vid + 'UbiToolbarButton0_LastButton').src = viewer.params.resource
					+ "/images/toolbar/" + ((_ubi_rtl) ? "first" : "last") + imageFileTag + ".png";
		}
		if (theButton_id == 'UbiToolbarButton0_ZoomInButton') {
			document.getElementById(this.vid + 'UbiToolbarButton0_ZoomInButton').src = viewer.params.resource
					+ "/images/toolbar/zoomin" + imageFileTag + ".png";
		}
		if (theButton_id == 'UbiToolbarButton0_ZoomOutButton') {
			document.getElementById(this.vid + 'UbiToolbarButton0_ZoomOutButton').src = viewer.params.resource
					+ "/images/toolbar/zoomout" + imageFileTag + ".png";
		}

		// [팝업메뉴] 마우스 아웃 이미지
		if (theButton_id == 'UbiToolbarButton1_PdfButton' || theButton_id == 'UbiToolbarButton1_Pdf') // 아이콘
		// 또는
		// 메뉴명칭에서
		// 오버시..
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_PdfButton').src = viewer.params.resource
					+ "/images/toolbar/pdf.png";
		}
		if (theButton_id == 'UbiToolbarButton1_XlsButton' || theButton_id == 'UbiToolbarButton1_Excel') // 아이콘
		// 또는
		// 메뉴명칭에서
		// 오버시..
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_XlsButton').src = viewer.params.resource
					+ "/images/toolbar/xls.png";
		}
		if (theButton_id == 'UbiToolbarButton1_RtfButton' || theButton_id == 'UbiToolbarButton1_Doc') // 아이콘
		// 또는
		// 메뉴명칭에서
		// 오버시..
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_RtfButton').src = viewer.params.resource
					+ "/images/toolbar/rtf.png";
		}
		if (theButton_id == 'UbiToolbarButton1_PptxButton' || theButton_id == 'UbiToolbarButton1_Pptx') // 아이콘
		// 또는
		// 메뉴명칭에서
		// 오버시..
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_PptxButton').src = viewer.params.resource
					+ "/images/toolbar/ppt.png";
		}
		if (theButton_id == 'UbiToolbarButton1_HwpButton' || theButton_id == 'UbiToolbarButton1_Hwp') // 아이콘
		// 또는
		// 메뉴명칭에서
		// 오버시..
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_HwpButton').src = viewer.params.resource
					+ "/images/toolbar/hwp.png";
		}
		if (theButton_id == 'UbiToolbarButton1_HmlButton' || theButton_id == 'UbiToolbarButton1_Hml') // 아이콘
		// 또는
		// 메뉴명칭에서
		// 오버시..
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_HmlButton').src = viewer.params.resource
					+ "/images/toolbar/hwp.png";
		}
		if (theButton_id == 'UbiToolbarButton1_DocxButton' || theButton_id == 'UbiToolbarButton1_Docx') // 아이콘
		// 또는
		// 메뉴명칭에서
		// 오버시..
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_DocxButton').src = viewer.params.resource
					+ "/images/toolbar/rtf.png";
		}
		if (theButton_id == 'UbiToolbarButton2_XlsButton1' || theButton_id == 'UbiToolbarButton2_Excel1') // 아이콘
		// 또는
		// 메뉴명칭에서
		// 오버시..
		{
			document.getElementById(this.vid + 'UbiToolbarButton2_XlsButton1').src = viewer.params.resource
					+ "/images/toolbar/print_form.png";
		}
		if (theButton_id == 'UbiToolbarButton2_XlsButton2' || theButton_id == 'UbiToolbarButton2_Excel2') // 아이콘
		// 또는
		// 메뉴명칭에서
		// 오버시..
		{
			document.getElementById(this.vid + 'UbiToolbarButton2_XlsButton2').src = viewer.params.resource
					+ "/images/toolbar/default_form.png";
		}

		if (theButton_id == 'UbiToolbarButton1_Print1Button' || theButton_id == 'UbiToolbarButton1_Print1') // 아이콘
		// 또는
		// 메뉴명칭에서
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Print1Button').src = viewer.params.resource
					+ "/images/toolbar/pdf.png";
		}
		if (theButton_id == 'UbiToolbarButton1_Print2Button' || theButton_id == 'UbiToolbarButton1_Print2') // 아이콘
		// 또는
		// 메뉴명칭에서
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Print2Button').src = viewer.params.resource
					+ "/images/toolbar/html.png";
		}

		if (theButton_id.indexOf("UbiToolbarButton_") > -1) {
			theButton.className = 'itemDefault';

			if (theButton.enabled) {
				if (theButton.enabled == 'F') {
					theButton.className = 'itemDisabled';
				}
			}
		}

		if (theButton_id.indexOf("UbiToolbarButton1_") > -1) // 1 레벨
		{
			// 1레벨 모든 항목들을 out 처리함
			document.getElementById(this.vid + 'UbiToolbarButton1_Pdf').className = (document.getElementById(this.vid
					+ 'UbiToolbarButton1_Pdf').enabled != "F") ? "popupItem" : "popupItemDis";
			document.getElementById(this.vid + 'UbiToolbarButton1_Excel').className = (document.getElementById(this.vid
					+ 'UbiToolbarButton1_Excel').enabled != "F") ? "popupItem" : "popupItemDis";
			document.getElementById(this.vid + 'UbiToolbarButton1_Doc').className = (document.getElementById(this.vid
					+ 'UbiToolbarButton1_Doc').enabled != "F") ? "popupItem" : "popupItemDis";
			document.getElementById(this.vid + 'UbiToolbarButton1_Docx').className = (document.getElementById(this.vid
					+ 'UbiToolbarButton1_Docx').enabled != "F") ? "popupItem" : "popupItemDis";
			document.getElementById(this.vid + 'UbiToolbarButton1_Hwp').className = (document.getElementById(this.vid
					+ 'UbiToolbarButton1_Hwp').enabled != "F") ? "popupItem" : "popupItemDis";
			document.getElementById(this.vid + 'UbiToolbarButton1_Hml').className = (document.getElementById(this.vid
					+ 'UbiToolbarButton1_Hml').enabled != "F") ? "popupItem" : "popupItemDis";
			document.getElementById(this.vid + 'UbiToolbarButton1_Pptx').className = (document.getElementById(this.vid
					+ 'UbiToolbarButton1_Pptx').enabled != "F") ? "popupItem" : "popupItemDis";
			document.getElementById(this.vid + 'UbiToolbarButton1_Print1').className = (document
					.getElementById(this.vid + 'UbiToolbarButton1_Print1').enabled != "F") ? "popupItem"
					: "popupItemDis";
			document.getElementById(this.vid + 'UbiToolbarButton1_Print2').className = (document
					.getElementById(this.vid + 'UbiToolbarButton1_Print2').enabled != "F") ? "popupItem"
					: "popupItemDis";
		}

		// 메뉴항목별 마우스 아웃 처리 (아이콘 + 메뉴명칭)
		if (theButton_id.indexOf("UbiToolbarButton1_Pdf") > -1
				|| theButton_id.indexOf("UbiToolbarButton1_PdfButton") > -1) // 1 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Pdf').className = "popupItem";
		}
		if (theButton_id.indexOf("UbiToolbarButton1_Pptx") > -1
				|| theButton_id.indexOf("UbiToolbarButton1_PptxButton") > -1) // 1 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Pptx').className = "popupItem";
		}
		if (theButton_id.indexOf("UbiToolbarButton1_Doc") > -1
				|| theButton_id.indexOf("UbiToolbarButton1_RtfButton") > -1) // 1 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Doc').className = "popupItem";
		}
		if (theButton_id.indexOf("UbiToolbarButton1_Excel") > -1
				|| theButton_id.indexOf("UbiToolbarButton1_XlsButton") > -1) // 1 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Excel').className = "popupItem";
		}
		if (theButton_id.indexOf("UbiToolbarButton2_Excel1") > -1
				|| theButton_id.indexOf("UbiToolbarButton2_XlsButton1") > -1) // 2 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton2_Excel1').className = "popupItem";
		}
		if (theButton_id.indexOf("UbiToolbarButton2_Excel2") > -1
				|| theButton_id.indexOf("UbiToolbarButton2_XlsButton2") > -1) // 2 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton2_Excel2').className = "popupItem";
		}
		if (theButton_id.indexOf("UbiToolbarButton1_Print1") > -1
				|| theButton_id.indexOf("UbiToolbarButton1_Print1Button") > -1) // 1 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Print1').className = "popupItem";
		}
		if (theButton_id.indexOf("UbiToolbarButton1_Print2") > -1
				|| theButton_id.indexOf("UbiToolbarButton1_Print2Button") > -1) // 1 레벨
		{
			document.getElementById(this.vid + 'UbiToolbarButton1_Print2').className = "popupItem";
		}

	}	
	
	// --------------------------------------------------------------------------------
	// 툴바버튼, 콤보, 메뉴항목, 팝업메뉴 등에서 발생하는 이벤트를 모두 잡아 분석함
	// --------------------------------------------------------------------------------
	this.mAddEvent(document, "change", changed);

	// --------------------------------------------------------------------------------
	// 툴바버튼, 콤보, 메뉴항목, 팝업메뉴, 아이콘, 글메뉴 등에서 발생하는 이벤트를 모두 잡아 분석함
	// --------------------------------------------------------------------------------
	this.mAddEvent(document, "click", clicked);

	// --------------------------------------------------------------------------------
	// 마우스 다운에 대한 감시
	// --------------------------------------------------------------------------------
//	this.mAddEvent(document, "mousedown", evtMouseDown);
	this.mAddEvent(document.body, "mousedown", evtMouseDown);

	// --------------------------------------------------------------------------------
	// 긁기 금지
	// --------------------------------------------------------------------------------
	this.mAddEvent(this.cont, "dragstart", dragstart);
	
	// --------------------------------------------------------------------------------
	// 긁기 금지
	// --------------------------------------------------------------------------------
	this.mAddEvent(this.cont, "selectstart", selectstart);

	// --------------------------------------------------------------------------------
	// 포커스 금지
	// --------------------------------------------------------------------------------
	this.mAddEvent(this.cont, "focus", focus);

	// --------------------------------------------------------------------------------
	// 마우스 오버에 대한 감시
	// --------------------------------------------------------------------------------
	this.mAddEvent(this.cont, "mouseover", mouseover);

	// --------------------------------------------------------------------------------
	// 마우스 아웃에 대한 감시
	// --------------------------------------------------------------------------------
	this.mAddEvent(this.cont, "mouseout", mouseout);

	// --------------------------------------------------------------------------------
	// 팝업메뉴 1레벨 + 2 레벨 모두 닫기 / 예외항목 입력 가능(2레벨 메뉴를 가진 1레벨 메뉴만 가능함)
	// --------------------------------------------------------------------------------
	this.mHidePopup = function(visibleMenuID) {
		if (document.getElementById(this.vid + 'UbiToolbarPop1_Save').style.display != 'none'
				&& visibleMenuID != this.vid + 'UbiToolbarPop1_Save') {
			document.getElementById(this.vid + 'UbiToolbarPop1_Save').style.display = 'none';
		}
		if (document.getElementById(this.vid + 'UbiToolbarPop2_Excel').style.display != 'none') {
			document.getElementById(this.vid + 'UbiToolbarPop2_Excel').style.display = 'none';
		}
		if (document.getElementById(this.vid + 'UbiToolbarPop1_Print').style.display != 'none') {
			document.getElementById(this.vid + 'UbiToolbarPop1_Print').style.display = 'none';
		}
	};

	// --------------------------------------------------------------------------------
	// 기존 개체의 기능 그대로 포팅 - 특정 콤보항목에서 1개의 선택항목을 추가함
	// --------------------------------------------------------------------------------
	this.appendOption = function(id, idx) {
		var oOption = document.createElement("OPTION"); // Option 객체를 생성
		oOption.text = idx; // Text(Keyword)를 입력
		oOption.value = idx; // Value를 입력
		oOption.className = 'ubiToolbar_SelectOption';

		if (id == "pages") {
			document.getElementById(this.vid + 'UbiToolbarSelect_Page').add(oOption);
		}
		if (id == "zoom") {
			document.getElementById(this.vid + 'UbiToolbarSelect_Zoom').add(oOption);
		}
	};

	// --------------------------------------------------------------------------------
	// 기존 개체의 기능 그대로 포팅 - 의미없어 보여서 구현안함
	// --------------------------------------------------------------------------------
	this.setTabIndex = function(id, idx) {
		// alert("setTab "+id);
	};

	// --------------------------------------------------------------------------------
	// 기존 개체의 기능 그대로 포팅 - 특정 콤보콘트롤에 최종 선택한 항목의 인덱스 설정
	// --------------------------------------------------------------------------------
	this.setSelectedIndex = function(id, v) {
		if (id == "pages") {
			document.getElementById(this.vid + 'UbiToolbarSelect_Page').selectedIndex = v;
		}

		if (id == "zoom") {
			document.getElementById(this.vid + 'UbiToolbarSelect_Zoom').selectedIndex = v;
		}
	};

	//--------------------------------------------------------------------------------
	// 기존 개체의 기능 그대로 포팅 - 특정 콤보콘트롤에 최종 선택한 항목의 인덱스 얻기
	//--------------------------------------------------------------------------------
	this.getSelectedIndex = function(id) {
		if (id == "pages") {
			return document.getElementById(this.vid + 'UbiToolbarSelect_Page').selectedIndex;
		}

		if (id == "zoom") {
			return document.getElementById(this.vid + 'UbiToolbarSelect_Zoom').selectedIndex;
		}
	};

	//--------------------------------------------------------------------------------
	// 기존 개체의 기능 그대로 포팅 - 특정 콤보콘트롤에 최종 선택한 항목의 문자열 얻기
	//--------------------------------------------------------------------------------
	this.getSelectedText = function(id) {
		if (id == "pages") {
			return document.getElementById(this.vid + 'UbiToolbarSelect_Page').options[document.getElementById(this.vid
					+ 'UbiToolbarSelect_Page').selectedIndex].text;
		}

		if (id == "zoom") {
			return document.getElementById(this.vid + 'UbiToolbarSelect_Zoom').options[document.getElementById(this.vid
					+ 'UbiToolbarSelect_Zoom').selectedIndex].text;
		}
	};

	//--------------------------------------------------------------------------------
	// 기존 개체의 기능 그대로 포팅 - 특정 선택항목의 갯수 리턴함수
	//--------------------------------------------------------------------------------
	this.getCount = function(id) {
		if (id == "pages") {
			return document.getElementById(this.vid + 'UbiToolbarSelect_Page').options.length;
		}

		if (id == "zoom") {
			if (document.getElementById(this.vid + 'UbiToolbarSelect_Zoom'))
				return document.getElementById(this.vid + 'UbiToolbarSelect_Zoom').options.length;
			else
				return 1;
		}
	};

	//--------------------------------------------------------------------------------
	// 선택항목 제거에 대한 처리
	//--------------------------------------------------------------------------------
	this.removeOption = function(id) {
		if (id == "pages") {
			var mylistbox = document.getElementById(this.vid + 'UbiToolbarSelect_Page');
			while (mylistbox.length > 0) {
				mylistbox.remove(0);
			}
		}

		if (id == "zoom") {
			var mylistbox = document.getElementById(this.vid + 'UbiToolbarSelect_Zoom');
			while (mylistbox.length > 0) {
				mylistbox.remove(0);
			}
		}
	};

	//--------------------------------------------------------------------------------
	// 페이지 이동에 대한 처리
	//--------------------------------------------------------------------------------
	this.changePage = function() {
		var selpage = this.getSelectedText("pages");
		viewer.toolbar.movePage(selpage);

	};

	//--------------------------------------------------------------------------------
	// 확대/축소에 대한 처리
	//--------------------------------------------------------------------------------
	this.changeZoom = function(value) {
//		var idx = this.getSelectedIndex("zoom");
//		viewer.toolbar.zoomscale(idx);

	};

	//--------------------------------------------------------------------------------
	// 툴바버튼, 콤보, 메뉴항목, 팝업메뉴 등에서 발생하는 가능/불가 처리의 담당
	//--------------------------------------------------------------------------------
	this.getObjFromID = function(id) {
		var obj;
		switch (id) {
		case "first":
			obj = 'UbiToolbarButton_First';
			break;
		case "previous":
			obj = 'UbiToolbarButton_Prev';
			break;
		case "next":
			obj = 'UbiToolbarButton_Next';
			break;
		case "last":
			obj = 'UbiToolbarButton_Last';
			break;
		case "zoomin":
			obj = 'UbiToolbarButton_In';
			break;
		case "zoomout":
			obj = 'UbiToolbarButton_Out';
			break;
		case "excel1":
		case "EXCEL_TYPE1":
			obj = 'UbiToolbarButton2_Excel1';
			break;
		case "excel2":
		case "EXCEL_TYPE2":
			obj = 'UbiToolbarButton2_Excel2';
			break;

		case "SAVE_PDF":
			obj = 'UbiToolbarButton1_Pdf';
			break;
		case "SAVE_EXCEL":
			obj = 'UbiToolbarButton1_Excel';
			break;
		case "SAVE_RTF":
			obj = 'UbiToolbarButton1_Doc';
			break;
		case "SAVE_HWP":
			obj = 'UbiToolbarButton1_Hwp';
			break;
		case "SAVE_HML":
			obj = 'UbiToolbarButton1_Hml';
			break;
		case "SAVE_PPTX":
			obj = 'UbiToolbarButton1_Pptx';
			break;
		case "SAVE_DOCX":
			obj = 'UbiToolbarButton1_Docx';
			break;
		case "PRINT_PDF":
			obj = 'UbiToolbarButton1_Print1';
			break;
		case "PRINT_HTML":
			obj = 'UbiToolbarButton1_Print2';
			break;
		case "SAVE":
			obj = 'UbiToolbarButton_Save';
			break;
		case "PRINT":
			obj = 'UbiToolbarButton_Print';
			break;
		case "PRINTSET":
			obj = 'UbiToolbarButton_PrintSet';
			break;
		case "REFRESH":
			obj = 'UbiToolbarButton_Refresh';
			break;
		}
		return this.vid + obj;
	};

	//--------------------------------------------------------------------------------
	// 툴바버튼, 콤보, 메뉴항목, 팝업메뉴 등에서 발생하는 가능/불가 처리의 담당
	//--------------------------------------------------------------------------------
	this.enableItem = function(id) {
		viewer.MenuEnable[id] = true;

		var obj = this.getObjFromID(id);
		if (!obj) {
			return;
		}
		var vobj = obj.substring(this.vid.length);

		// 이미지 버튼들의 가능/불가처리 (0레벨 - 툴바메뉴를 의미함)
		if (obj.indexOf("UbiToolbarButton_") > -1 || obj.indexOf("UbiToolbarButton0_") > -1) {
			if (document.getElementById(obj)) {
				document.getElementById(obj).className = 'itemDefault';
				document.getElementById(obj).enabled = 'T';

				if (vobj == 'UbiToolbarButton_Save') {
					document.getElementById(this.vid + 'UbiToolbarButton0_SaveButton').src = viewer.params.resource
							+ "/images/toolbar/save.png";
					document.getElementById(this.vid + 'UbiToolbarButton0_SaveButton').enabled = 'T'; //아이콘 메뉴
					document.getElementById(this.vid + 'UbiMenu_SAVE').enabled = 'T'; //글자메뉴
				}
				if (vobj == 'UbiToolbarButton_Print') {
					document.getElementById(this.vid + 'UbiToolbarButton0_PrintButton').src = viewer.params.resource
							+ "/images/toolbar/print.png";
					document.getElementById(this.vid + 'UbiToolbarButton0_PrintButton').enabled = 'T'; //아이콘 메뉴
					document.getElementById(this.vid + 'UbiMenu_PRINT').enabled = 'T'; //글자메뉴
				}
				if (vobj == 'UbiToolbarButton_PrintSet') {
					document.getElementById(this.vid + 'UbiToolbarButton0_PrintSetButton').src = viewer.params.resource
							+ "/images/toolbar/printset.png";
					document.getElementById(this.vid + 'UbiToolbarButton0_PrintSetButton').enabled = 'T'; //아이콘 메뉴
					document.getElementById(this.vid + 'UbiMenu_PRINTSET').enabled = 'T'; //글자메뉴
				}

				if (vobj == 'UbiToolbarButton_First') {
					document.getElementById(this.vid + 'UbiToolbarButton0_FirstButton').src = viewer.params.resource
							+ "/images/toolbar/" + ((_ubi_rtl) ? "last" : "first") + ".png";
					document.getElementById(this.vid + 'UbiToolbarButton0_FirstButton').enabled = 'T';
				}
				if (vobj == 'UbiToolbarButton_Prev') {
					document.getElementById(this.vid + 'UbiToolbarButton0_PreviousButton').src = viewer.params.resource
							+ "/images/toolbar/" + ((_ubi_rtl) ? "next" : "previous") + ".png";
					document.getElementById(this.vid + 'UbiToolbarButton0_PreviousButton').enabled = 'T';
				}
				if (vobj == 'UbiToolbarButton_Next') {
					document.getElementById(this.vid + 'UbiToolbarButton0_NextButton').src = viewer.params.resource
							+ "/images/toolbar/" + ((_ubi_rtl) ? "previous" : "next") + ".png";
					document.getElementById(this.vid + 'UbiToolbarButton0_NextButton').enabled = 'T';
				}
				if (vobj == 'UbiToolbarButton_Last') {
					document.getElementById(this.vid + 'UbiToolbarButton0_LastButton').src = viewer.params.resource
							+ "/images/toolbar/" + ((_ubi_rtl) ? "first" : "last") + ".png";
					document.getElementById(this.vid + 'UbiToolbarButton0_LastButton').enabled = 'T';
				}
				if (vobj == 'UbiToolbarButton_In') {
					document.getElementById(this.vid + 'UbiToolbarButton0_ZoomInButton').src = viewer.params.resource
							+ "/images/toolbar/zoomin.png";
					document.getElementById(this.vid + 'UbiToolbarButton0_ZoomInButton').enabled = 'T';
				}
				if (vobj == 'UbiToolbarButton_Out') {
					document.getElementById(this.vid + 'UbiToolbarButton0_ZoomOutButton').src = viewer.params.resource
							+ "/images/toolbar/zoomout.png";
					document.getElementById(this.vid + 'UbiToolbarButton0_ZoomOutButton').enabled = 'T';
				}

			}
		}
		// 팝업메뉴항목들의 가능/불가처리 (1레벨~2레벨) (팝업메뉴를 의미함)
		if (obj.indexOf("UbiToolbarButton1_") > -1 || obj.indexOf("UbiToolbarButton2_") > -1) {
			if (document.getElementById(obj)) {
				document.getElementById(obj).className = 'popupItem';
				document.getElementById(obj).enabled = 'T';
			}

			if (vobj == 'UbiToolbarButton1_Pdf') {
				document.getElementById(this.vid + 'UbiToolbarButton1_PdfButton').src = viewer.params.resource
						+ "/images/toolbar/pdf.png";
				document.getElementById(this.vid + 'UbiToolbarButton1_PdfButton').enabled = 'T';

			}
			if (vobj == 'UbiToolbarButton1_Excel') {
				document.getElementById(this.vid + 'UbiToolbarButton1_XlsButton').src = viewer.params.resource
						+ "/images/toolbar/xls.png";
				document.getElementById(this.vid + 'UbiToolbarButton1_XlsButton').enabled = 'T';
			}
			if (vobj == 'UbiToolbarButton1_Doc') {
				document.getElementById(this.vid + 'UbiToolbarButton1_RtfButton').src = viewer.params.resource
						+ "/images/toolbar/rtf.png";
				document.getElementById(this.vid + 'UbiToolbarButton1_RtfButton').enabled = 'T';
			}
			if (vobj == 'UbiToolbarButton1_Hwp') {
				document.getElementById(this.vid + 'UbiToolbarButton1_HwpButton').src = viewer.params.resource
						+ "/images/toolbar/hwp.png";
				document.getElementById(this.vid + 'UbiToolbarButton1_HwpButton').enabled = 'T';
			}
			if (vobj == 'UbiToolbarButton1_Hml') {
				document.getElementById(this.vid + 'UbiToolbarButton1_HmlButton').src = viewer.params.resource
						+ "/images/toolbar/hwp.png";
				document.getElementById(this.vid + 'UbiToolbarButton1_HmlButton').enabled = 'T';
			}
			if (vobj == 'UbiToolbarButton1_Pptx') {
				document.getElementById(this.vid + 'UbiToolbarButton1_PptxButton').src = viewer.params.resource
						+ "/images/toolbar/ppt.png";
				document.getElementById(this.vid + 'UbiToolbarButton1_PptxButton').enabled = 'T';
			}
			if (vobj == 'UbiToolbarButton1_Docx') {
				document.getElementById(this.vid + 'UbiToolbarButton1_DocxButton').src = viewer.params.resource
						+ "/images/toolbar/rtf.png";
				document.getElementById(this.vid + 'UbiToolbarButton1_DocxButton').enabled = 'T';
			}
			if (vobj == 'UbiToolbarButton2_Excel1') {
				document.getElementById(this.vid + 'UbiToolbarButton2_XlsButton1').src = viewer.params.resource
						+ "/images/toolbar/print_form.png";
				document.getElementById(this.vid + 'UbiToolbarButton2_XlsButton1').enabled = 'T';
			}
			if (vobj == 'UbiToolbarButton2_Excel2') {
				document.getElementById(this.vid + 'UbiToolbarButton2_XlsButton2').src = viewer.params.resource
						+ "/images/toolbar/default_form.png";
				document.getElementById(this.vid + 'UbiToolbarButton2_XlsButton2').enabled = 'T';
			}
			if (vobj == 'UbiToolbarButton1_Print1') {
				document.getElementById(this.vid + 'UbiToolbarButton1_Print1Button').src = viewer.params.resource
						+ "/images/toolbar/pdf.png";
				document.getElementById(this.vid + 'UbiToolbarButton1_Print1Button').enabled = 'T';
			}
			if (vobj == 'UbiToolbarButton1_Print2') {
				document.getElementById(this.vid + 'UbiToolbarButton1_Print2Button').src = viewer.params.resource
						+ "/images/toolbar/html.png";
				document.getElementById(this.vid + 'UbiToolbarButton1_Print2Button').enabled = 'T';
			}

		}

		// 엑셀이 Disable 이면 화살표도 사라져야 한다.
		if (document.getElementById(this.vid + 'UbiToolbarButton1_Excel').enabled == "T") {
			document.getElementById(this.vid + 'UbiDropMenu_Print').style.display = '';
		}

	};

	//--------------------------------------------------------------------------------
	// 툴바버튼, 콤보, 메뉴항목, 팝업메뉴 등에서 발생하는 가능/불가 처리의 담당
	//--------------------------------------------------------------------------------
	this.disableItem = function(id) {
		viewer.MenuEnable[id] = false;

		var obj = this.getObjFromID(id);
		if (!obj)
			return;
		var vobj = obj.substring(this.vid.length);

		// 이미지 버튼들의 가능/불가처리
		if (obj.indexOf("UbiToolbarButton_") > -1 || obj.indexOf("UbiToolbarButton0_") > -1) {
			if (document.getElementById(obj)) {
				document.getElementById(obj).enabled = 'F';

				if (vobj == 'UbiToolbarButton_Save') {
					document.getElementById(this.vid + 'UbiToolbarButton0_SaveButton').src = viewer.params.resource
							+ "/images/toolbar/save_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton0_SaveButton').enabled = 'F'; //아이콘 메뉴
					document.getElementById(this.vid + 'UbiMenu_SAVE').enabled = 'F'; //글자메뉴
				}
				if (vobj == 'UbiToolbarButton_Print') {
					document.getElementById(this.vid + 'UbiToolbarButton0_PrintButton').src = viewer.params.resource
							+ "/images/toolbar/print_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton0_PrintButton').enabled = 'F'; //아이콘 메뉴
					document.getElementById(this.vid + 'UbiMenu_PRINT').enabled = 'F'; //글자메뉴
				}
				if (vobj == 'UbiToolbarButton_PrintSet') {
					document.getElementById(this.vid + 'UbiToolbarButton0_PrintSetButton').src = viewer.params.resource
							+ "/images/toolbar/printset_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton0_PrintSetButton').enabled = 'F'; //아이콘 메뉴
					document.getElementById(this.vid + 'UbiMenu_PRINTSET').enabled = 'F'; //글자메뉴
				}
				if (vobj == 'UbiToolbarButton_First') {
					document.getElementById(this.vid + 'UbiToolbarButton0_FirstButton').src = viewer.params.resource
							+ "/images/toolbar/" + ((_ubi_rtl) ? "last" : "first") + "_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton0_FirstButton').enabled = 'F';
				}
				if (vobj == 'UbiToolbarButton_Prev') {
					document.getElementById(this.vid + 'UbiToolbarButton0_PreviousButton').src = viewer.params.resource
							+ "/images/toolbar/" + ((_ubi_rtl) ? "next" : "previous") + "_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton0_PreviousButton').enabled = 'F';
				}
				if (vobj == 'UbiToolbarButton_Next') {
					document.getElementById(this.vid + 'UbiToolbarButton0_NextButton').src = viewer.params.resource
							+ "/images/toolbar/" + ((_ubi_rtl) ? "previous" : "next") + "_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton0_NextButton').enabled = 'F';
				}
				if (vobj == 'UbiToolbarButton_Last') {
					document.getElementById(this.vid + 'UbiToolbarButton0_LastButton').src = viewer.params.resource
							+ "/images/toolbar/" + ((_ubi_rtl) ? "first" : "last") + "_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton0_LastButton').enabled = 'F';
				}
				if (vobj == 'UbiToolbarButton_In') {
					document.getElementById(this.vid + 'UbiToolbarButton0_ZoomInButton').src = viewer.params.resource
							+ "/images/toolbar/zoomin_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton0_ZoomInButton').enabled = 'F';
				}
				if (vobj == 'UbiToolbarButton_Out') {
					document.getElementById(this.vid + 'UbiToolbarButton0_ZoomOutButton').src = viewer.params.resource
							+ "/images/toolbar/zoomout_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton0_ZoomOutButton').enabled = 'F';
				}

				//document.getElementById(obj).className = 'itemDisabled';
			}
		}

		// 팝업메뉴항목들의 가능/불가처리 (1레벨~2레벨)
		if (obj.indexOf("UbiToolbarButton1_") > -1 || obj.indexOf("UbiToolbarButton2_") > -1) {
			if (document.getElementById(obj)) {
				document.getElementById(obj).className = 'popupItemDis';
				document.getElementById(obj).enabled = 'F';

				if (vobj == 'UbiToolbarButton1_Pdf') {
					document.getElementById(this.vid + 'UbiToolbarButton1_PdfButton').src = viewer.params.resource
							+ "/images/toolbar/pdf_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton1_PdfButton').enabled = 'F';

				}
				if (vobj == 'UbiToolbarButton1_Excel') {
					document.getElementById(this.vid + 'UbiToolbarButton1_XlsButton').src = viewer.params.resource
							+ "/images/toolbar/xls_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton1_XlsButton').enabled = 'F';
				}
				if (vobj == 'UbiToolbarButton1_Doc') {
					document.getElementById(this.vid + 'UbiToolbarButton1_RtfButton').src = viewer.params.resource
							+ "/images/toolbar/rtf_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton1_RtfButton').enabled = 'F';
				}
				if (vobj == 'UbiToolbarButton1_Hwp') {
					document.getElementById(this.vid + 'UbiToolbarButton1_HwpButton').src = viewer.params.resource
							+ "/images/toolbar/hwp_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton1_HwpButton').enabled = 'F';
				}
				if (vobj == 'UbiToolbarButton1_Hml') {
					document.getElementById(this.vid + 'UbiToolbarButton1_HmlButton').src = viewer.params.resource
							+ "/images/toolbar/hwp_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton1_HmlButton').enabled = 'F';
				}
				if (vobj == 'UbiToolbarButton1_Pptx') {
					document.getElementById(this.vid + 'UbiToolbarButton1_PptxButton').src = viewer.params.resource
							+ "/images/toolbar/ppt_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton1_PptxButton').enabled = 'F';
				}
				if (vobj == 'UbiToolbarButton1_Docx') {
					document.getElementById(this.vid + 'UbiToolbarButton1_DocxButton').src = viewer.params.resource
							+ "/images/toolbar/rtf_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton1_DocxButton').enabled = 'F';
				}

				if (vobj == 'UbiToolbarButton2_Excel1') {
					document.getElementById(this.vid + 'UbiToolbarButton2_XlsButton1').src = viewer.params.resource
							+ "/images/toolbar/print_form_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton2_XlsButton1').enabled = 'F';
				}
				if (vobj == 'UbiToolbarButton2_Excel2') {
					document.getElementById(this.vid + 'UbiToolbarButton2_XlsButton2').src = viewer.params.resource
							+ "/images/toolbar/default_form_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton2_XlsButton2').enabled = 'F';
				}
				if (vobj == 'UbiToolbarButton1_Print1') {
					document.getElementById(this.vid + 'UbiToolbarButton1_Print1Button').src = viewer.params.resource
							+ "/images/toolbar/pdf_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton1_Print1Button').enabled = 'F';
				}
				if (vobj == 'UbiToolbarButton1_Print2') {
					document.getElementById(this.vid + 'UbiToolbarButton1_Print2Button').src = viewer.params.resource
							+ "/images/toolbar/html_d.png";
					document.getElementById(this.vid + 'UbiToolbarButton1_Print2Button').enabled = 'F';
				}

			}
		}

		// 엑셀이 Disable 이면 화살표도 사라져야 한다.
		if (document.getElementById(this.vid + 'UbiToolbarButton1_Excel').enabled == "F") {
			document.getElementById(this.vid + 'UbiDropMenu_Print').style.display = 'none';
		}
	};
	
	this.destroy = function() {
		this.mRemoveEvent(document, "change", changed);
		this.mRemoveEvent(document, "click", clicked);
//		this.mRemoveEvent(document, "mousedown", evtMouseDown);
		this.mRemoveEvent(document.body, "mousedown", evtMouseDown);
		this.mRemoveEvent(this.cont, "dragstart", dragstart);
		this.mRemoveEvent(this.cont, "selectstart", selectstart);
		this.mRemoveEvent(this.cont, "focus", focus);
		this.mRemoveEvent(this.cont, "mouseover", mouseover);
		this.mRemoveEvent(this.cont, "mouseout", mouseout);
	};
}
}