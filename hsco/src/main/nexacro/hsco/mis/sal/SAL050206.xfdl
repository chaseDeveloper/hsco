<?xml version="1.0" encoding="utf-8"?>
<FDL version="1.5">
  <TypeDefinition url="..\..\default_typedef.xml"/>
  <Form id="SAL050206" classname="SAL050206" left="0" top="0" width="1059" height="735" titletext="연말정산계산관리" oninit="SAL050206_oninit" onload="SAL050206_onload">
    <Layouts>
      <Layout>
        <Div id="div_search" taborder="0" left="0" top="0" right="28" height="115" cssclass="div_WFSA_Box">
          <Layouts>
            <Layout>
              <Static id="Static18" taborder="1" text="5" visible="false" left="74" top="2" right="951" height="120" style="background:#00ffff66;"/>
              <Static id="Static07" taborder="5" text="5" visible="false" left="88" top="0" right="903" height="5" style="background:#fa794f66;align:center middle;"/>
              <Static id="Static03" taborder="6" text="15" visible="false" left="0" top="-5" right="1016" height="57" style="background:#00ffff66;"/>
              <Static id="Static01" taborder="7" text="정산구분" cssclass="sta_WFSA_Label" left="15" top="5" width="66" height="21"/>
              <Button id="btn_cre" taborder="3" text="계산" onclick="div_search_btn_cre_onclick" cssclass="btn_WF_CRUD" left="78" top="83" width="50" height="25"/>
              <CheckBox id="chk_del" taborder="4" text="자료삭제" value="N" truevalue="Y" falsevalue="N" onchanged="div_search_chk_del_onchanged" left="134" top="85" width="83" height="20"/>
              <Static id="Static00" taborder="8" text="5" visible="false" left="80" top="26" right="911" height="5" style="background:#fa794f66;align:center middle;"/>
              <Static id="Static04" taborder="9" text="5" visible="false" left="82" top="52" right="909" height="5" style="background:#fa794f66;align:center middle;"/>
              <Static id="Static05" taborder="10" text="5" visible="false" left="80" top="78" right="911" height="5" style="background:#fa794f66;align:center middle;"/>
              <Static id="Static06" taborder="11" text="정산년도" cssclass="sta_WFSA_Label" left="15" top="31" width="66" height="21"/>
              <Static id="Static08" taborder="12" text="성명" cssclass="sta_WFSA_Label" left="15" top="57" width="66" height="21"/>
              <Static id="Static02" taborder="13" text="5" visible="false" left="80" top="108" right="911" height="5" style="background:#fa794f66;align:center middle;"/>
              <Radio id="rad_excclcSe" taborder="14" index="0" codecolumn="codecolumn" datacolumn="datacolumn" value="1" direction="vertical" onitemclick="div_search_rad_excclcSe_onitemclick" cssclass="rdo_WF_Essential" left="78" top="6" width="193" height="21">
                <Dataset id="innerdataset">
                  <ColumnInfo>
                    <Column id="codecolumn" size="256"/>
                    <Column id="datacolumn" size="256"/>
                  </ColumnInfo>
                  <Rows>
                    <Row>
                      <Col id="codecolumn">1</Col>
                      <Col id="datacolumn">연말정산</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">2</Col>
                      <Col id="datacolumn">중도퇴직정산</Col>
                    </Row>
                  </Rows>
                </Dataset>
              </Radio>
              <Spin id="spn_excclcYear" taborder="0" value="2015" max="3000" min="2010" cssclass="spn_WF_Essential" left="78" top="31" width="80" height="21"/>
              <Div id="div_EMP" taborder="2" url="com::empno.xfdl" text="Div00" left="78" top="57" width="162" height="21" onkeyup="div_SEARCH_div_EMP_onkeyup" async="false"/>
            </Layout>
          </Layouts>
        </Div>
        <Static id="Static00" taborder="1" text="15" visible="false" left="1031" top="0" right="13" height="735" style="background:#1b3cd23c;align:center middle;"/>
        <Static id="Static01" taborder="2" text="스&#13;&#10;크&#13;&#10;롤&#13;&#10;13" visible="false" left="1046" top="0" right="0" height="735" style="background:#d07b173c;align:center middle;"/>
        <Static id="Static08" taborder="3" text="10" visible="false" left="0" top="115" right="28" height="10" style="background:#dc143c3c;align:center middle;"/>
        <Static id="Static31" taborder="4" text="연말정산계산내역" cssclass="sta_WF_Title01" left="0" top="122" width="170" height="19"/>
        <Static id="Static02" taborder="5" text="5" visible="false" left="0" top="137" right="28" height="5" style="background:#dc143c3c;align:center middle;"/>
        <Grid id="grd_mtSalaryCreat" taborder="6" binddataset="ds_yndExcclcCreat" useinputpanel="false" autofittype="none" left="0" top="141" right="28" bottom="0" onheadclick="grd_mtSalaryCreat_onheadclick">
          <Formats>
            <Format id="default">
              <Columns>
                <Column size="40"/>
                <Column size="54"/>
                <Column size="83"/>
                <Column size="68"/>
                <Column size="121"/>
                <Column size="70"/>
                <Column size="77"/>
                <Column size="69"/>
                <Column size="62"/>
                <Column size="90"/>
                <Column size="90"/>
                <Column size="90"/>
                <Column size="90"/>
                <Column size="90"/>
                <Column size="90"/>
              </Columns>
              <Rows>
                <Row size="24" band="head"/>
                <Row size="24"/>
                <Row size="24" band="summ"/>
              </Rows>
              <Band id="head">
                <Cell text="번호"/>
                <Cell col="1" text="정산년도"/>
                <Cell col="2" text="정산구분"/>
                <Cell col="3" text="급여적용"/>
                <Cell col="4" text="부서명"/>
                <Cell col="5" text="사번"/>
                <Cell col="6" text="사원명"/>
                <Cell col="7" text="직위"/>
                <Cell col="8" text="직종"/>
                <Cell col="9" text="징수소득세"/>
                <Cell col="10" text="징수지방소득세"/>
                <Cell col="11" text="징수농특세"/>
                <Cell col="12" text="환급소득세"/>
                <Cell col="13" text="환급지방소득세"/>
                <Cell col="14" text="환급농특세"/>
              </Band>
              <Band id="body">
                <Cell displaytype="number" text="expr:currow+1"/>
                <Cell col="1" text="bind:EXCCLC_YEAR"/>
                <Cell col="2" displaytype="combo" text="bind:EXCCLC_SE" combodataset="ds_yndse" combocodecol="code" combodatacol="name"/>
                <Cell col="3" text="bind:PYMNT_YM"/>
                <Cell col="4" text="bind:DEPT_NM"/>
                <Cell col="5" text="bind:EMPNO"/>
                <Cell col="6" text="bind:EMPNM"/>
                <Cell col="7" displaytype="combo" text="bind:OFCPS" combodataset="ds_ofcps" combocodecol="CODE" combodatacol="CODE_NM"/>
                <Cell col="8" displaytype="combo" text="bind:EMPL_SE" combodataset="ds_jssfc" combocodecol="CODE" combodatacol="CODE_NM"/>
                <Cell col="9" displaytype="number" style="align:right;" text="bind:DDCT_LEV_INCMTAX"/>
                <Cell col="10" displaytype="number" style="align:right;" text="bind:DDCT_LEV_LCLTY_INCMTAX"/>
                <Cell col="11" displaytype="number" style="align:right;" text="bind:DDCT_LEV_AGSPT"/>
                <Cell col="12" displaytype="number" style="align:right;" text="bind:DDCT_RETUN_INCMTAX"/>
                <Cell col="13" displaytype="number" style="align:right;" text="bind:DDCT_RETUN_LCLTY_INCMTAX"/>
                <Cell col="14" displaytype="number" style="align:right;" text="bind:DDCT_RETUN_AGSPT"/>
              </Band>
              <Band id="summary">
                <Cell/>
                <Cell col="1"/>
                <Cell col="2"/>
                <Cell col="3"/>
                <Cell col="4"/>
                <Cell col="5"/>
                <Cell col="6"/>
                <Cell col="7"/>
                <Cell col="8"/>
                <Cell col="9"/>
                <Cell col="10"/>
                <Cell col="11"/>
                <Cell col="12"/>
                <Cell col="13"/>
                <Cell col="14"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
        <Div id="div_pymntYm" taborder="7" url="common::frmMonCal.xfdl" top="117" right="68" width="86" height="21" async="false"/>
        <Static id="sta_CLSF_CODE" taborder="8" text="급여적용년월" cssclass="sta_WF_Title02" top="118" right="154" width="92" height="21" style="align:left middle;"/>
        <Button id="btn_Cre" taborder="9" text="적용" onclick="div_cont_btn_Cre_onclick" cssclass="btn_WF_Process" top="117" right="28" width="40" height="21"/>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="ds_cond00" firefirstcount="0" firenextcount="0" useclientlayout="true" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="EXCCLC_YEAR" type="STRING" size="256"/>
          <Column id="EXCCLC_SE" type="STRING" size="256"/>
          <Column id="EMPNO" type="STRING" size="256"/>
          <Column id="PYMNT_YM" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_year" firefirstcount="0" firenextcount="0" useclientlayout="true" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="year" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="ds_validation" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="compId" type="STRING" size="256"/>
          <Column id="colId" type="STRING" size="256"/>
          <Column id="PK" type="STRING" size="256"/>
          <Column id="notNull" type="STRING" size="256"/>
          <Column id="type" type="STRING" size="256"/>
          <Column id="nlength" type="STRING" size="256"/>
          <Column id="from" type="STRING" size="256"/>
          <Column id="to" type="STRING" size="256"/>
          <Column id="lengthChkGb" type="STRING" size="256"/>
          <Column id="msgId" type="STRING" size="256"/>
          <Column id="expr" type="STRING" size="256"/>
          <Column id="func" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="colId">EXCCLC_YEAR</Col>
            <Col id="compId">ds_cond00</Col>
            <Col id="PK">Y</Col>
            <Col id="notNull">Y</Col>
            <Col id="msgId">정산년도</Col>
          </Row>
          <Row>
            <Col id="compId">ds_cond00</Col>
            <Col id="colId">EXCCLC_SE</Col>
            <Col id="PK">Y</Col>
            <Col id="notNull">Y</Col>
            <Col id="msgId">정산구분</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="ds_yndExcclcDetail" firefirstcount="0" firenextcount="0" useclientlayout="true" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="EXCCLC_YEAR" type="STRING" size="256"/>
          <Column id="EXCCLC_SE" type="STRING" size="256"/>
          <Column id="EMPNO" type="STRING" size="256"/>
          <Column id="EMPNM" type="STRING" size="256"/>
          <Column id="CLSF_CODE" type="STRING" size="256"/>
          <Column id="EXCCLC_BGNDE" type="STRING" size="256"/>
          <Column id="EXCCLC_ENDDE" type="STRING" size="256"/>
          <Column id="DEPT_CODE" type="STRING" size="256"/>
          <Column id="DEPT_NM" type="STRING" size="256"/>
          <Column id="SRCLS" type="STRING" size="256"/>
          <Column id="OFCPS_CODE" type="STRING" size="256"/>
          <Column id="ECNY_SE" type="STRING" size="256"/>
          <Column id="ECNY_DE" type="STRING" size="256"/>
          <Column id="RETIRE_DE" type="STRING" size="256"/>
          <Column id="LAYOFF_BEGIN_DE" type="STRING" size="256"/>
          <Column id="LAYOFF_ENDDE" type="STRING" size="256"/>
          <Column id="ZIP" type="STRING" size="256"/>
          <Column id="ADRES" type="STRING" size="256"/>
          <Column id="NOW_WORK_SALARY_AMOUNT" type="STRING" size="256"/>
          <Column id="NOW_WORK_BNS_AMOUNT" type="STRING" size="256"/>
          <Column id="NOW_WORK_RCOGN_BNS_AMOUNT" type="STRING" size="256"/>
          <Column id="BEFORE_WORK_1_SALARY" type="STRING" size="256"/>
          <Column id="BEFORE_WORK_1_BNS" type="STRING" size="256"/>
          <Column id="BEFORE_WORK_1_RCOGN_BNS" type="STRING" size="256"/>
          <Column id="BEFORE_WORK_2_SALARY" type="STRING" size="256"/>
          <Column id="BEFORE_WORK_2_BNS" type="STRING" size="256"/>
          <Column id="BEFORE_WORK_2_RCOGN_BNS" type="STRING" size="256"/>
          <Column id="TAXXMPT_OUTNATN_INCOME" type="STRING" size="256"/>
          <Column id="TAXXMPT_NIGHT_ERNM" type="STRING" size="256"/>
          <Column id="ETC_TAXXMPT" type="STRING" size="256"/>
          <Column id="SALARY_TOT_AMOUNT" type="STRING" size="256"/>
          <Column id="BNS_TOT_AMOUNT" type="STRING" size="256"/>
          <Column id="RCOGN_BNS_TOT_AMOUNT" type="STRING" size="256"/>
          <Column id="ERNM_INCME_AMOUNT" type="STRING" size="256"/>
          <Column id="ERNM_DDC" type="STRING" size="256"/>
          <Column id="ERNM_AMOUNT" type="STRING" size="256"/>
          <Column id="BSIS_DDC" type="STRING" size="256"/>
          <Column id="SPOUSE_DDC" type="STRING" size="256"/>
          <Column id="DNTMY_DDC" type="STRING" size="256"/>
          <Column id="COURS_PVLTRT_DDC_65" type="STRING" size="256"/>
          <Column id="COURS_PVLTRT_DDC_70" type="STRING" size="256"/>
          <Column id="DSPSN_DDC" type="STRING" size="256"/>
          <Column id="LADY_HSHLDR_DDC" type="STRING" size="256"/>
          <Column id="MNYCH_BRP_DDC" type="STRING" size="256"/>
          <Column id="CHLDBRTH_ADP_DDC" type="STRING" size="256"/>
          <Column id="MNYCH_DDC" type="STRING" size="256"/>
          <Column id="PARNTS_1_DDC" type="STRING" size="256"/>
          <Column id="HN_DDC_AMOUNT_SM" type="STRING" size="256"/>
          <Column id="IRNCF_DDC" type="STRING" size="256"/>
          <Column id="MCP_DDC" type="STRING" size="256"/>
          <Column id="EDCCT_DDC" type="STRING" size="256"/>
          <Column id="CASH_RCIPT_AMOUNT" type="STRING" size="256"/>
          <Column id="LFSTS_INTR" type="STRING" size="256"/>
          <Column id="PNINT_RPAY_AMOUNT" type="STRING" size="256"/>
          <Column id="BRRW_INTR_RPAY_AMOUNT" type="STRING" size="256"/>
          <Column id="HOUSE_PREPRTN_SVINGS" type="STRING" size="256"/>
          <Column id="MTHT_AM" type="STRING" size="256"/>
          <Column id="HOUSE_CPTAL_DDC" type="STRING" size="256"/>
          <Column id="CTBNY_DDC" type="STRING" size="256"/>
          <Column id="MRRG_INTR_FNRL_DDC" type="STRING" size="256"/>
          <Column id="STD_DDC" type="STRING" size="256"/>
          <Column id="ANNTY_IRNCF" type="STRING" size="256"/>
          <Column id="DDCT_INCOME_AMOUNT" type="STRING" size="256"/>
          <Column id="INDVDL_ANNTY_SVINGS_INCOME_DDC" type="STRING" size="256"/>
          <Column id="ANNTY_SVINGS_INCOME_DDC" type="STRING" size="256"/>
          <Column id="SPT_HNF_TCHNLGY_DDC" type="STRING" size="256"/>
          <Column id="INVT_MXTR_INCOME_DDC" type="STRING" size="256"/>
          <Column id="CREDTCARD_DDC" type="STRING" size="256"/>
          <Column id="GNRLZ_STDTAX" type="STRING" size="256"/>
          <Column id="COMPUT_TAXAMT" type="STRING" size="256"/>
          <Column id="ERNM_TAXAMT_DDC_AMOUNT" type="STRING" size="256"/>
          <Column id="TAXAMT_DDC_6_BELOW" type="STRING" size="256"/>
          <Column id="HOUSE_BRRW_AMOUNT" type="STRING" size="256"/>
          <Column id="FRNTN_PAY" type="STRING" size="256"/>
          <Column id="CNTR_POLITC_CPTAL" type="STRING" size="256"/>
          <Column id="LABRR_STOCK_SVINGS" type="STRING" size="256"/>
          <Column id="INORG_STOCK_SVINGS" type="STRING" size="256"/>
          <Column id="TAXAMT_DDC_SM" type="STRING" size="256"/>
          <Column id="RDCXPT_TAXAMT" type="STRING" size="256"/>
          <Column id="DECSN_TAXAMT_INCMTAX" type="STRING" size="256"/>
          <Column id="DECSN_TAXAMT_AGSPT" type="STRING" size="256"/>
          <Column id="DECSN_TAXAMT_LCLTY_INCMTAX" type="STRING" size="256"/>
          <Column id="DECSN_TAXAMT_EMPLYMINSRNC" type="STRING" size="256"/>
          <Column id="DECSN_TAXAMT_ENCRG_ENDW" type="STRING" size="256"/>
          <Column id="BEFORE_WORK_INCMTAX" type="STRING" size="256"/>
          <Column id="BEFORE_WORK_AGSPT" type="STRING" size="256"/>
          <Column id="BEFORE_WORK_LCLTY_INCMTAX" type="STRING" size="256"/>
          <Column id="NOW_LEV_PREARNGE_INCMTAX" type="STRING" size="256"/>
          <Column id="NOW_LEV_PREARNGE_AGSPT" type="STRING" size="256"/>
          <Column id="NOW_LEV_PREARNGE_LCLTY_INCMTAX" type="STRING" size="256"/>
          <Column id="NOW_LEV_PREARNGE_EMPLYMINSRNC" type="STRING" size="256"/>
          <Column id="NOW_LEV_PREARNGE_ENCRG_ENDW" type="STRING" size="256"/>
          <Column id="NOW_LEV_RESULT_INCMTAX" type="STRING" size="256"/>
          <Column id="NOW_LEV_RESULT_AGSPT" type="STRING" size="256"/>
          <Column id="NOW_LEV_RESULT_LCLTY_INCMTAX" type="STRING" size="256"/>
          <Column id="NOW_LEV_RESULT_EMPLYMINSRNC" type="STRING" size="256"/>
          <Column id="NOW_LEV_RESULT_ENCRG_ENDW" type="STRING" size="256"/>
          <Column id="DDCT_LEV_INCMTAX" type="STRING" size="256"/>
          <Column id="DDCT_LEV_AGSPT" type="STRING" size="256"/>
          <Column id="DDCT_LEV_LCLTY_INCMTAX" type="STRING" size="256"/>
          <Column id="DDCT_LEV_EMPLYMINSRNC" type="STRING" size="256"/>
          <Column id="DDCT_LEV_ENCRG_ENDW" type="STRING" size="256"/>
          <Column id="DDCT_RETUN_INCMTAX" type="STRING" size="256"/>
          <Column id="DDCT_RETUN_AGSPT" type="STRING" size="256"/>
          <Column id="DDCT_RETUN_LCLTY_INCMTAX" type="STRING" size="256"/>
          <Column id="DDCT_RETUN_EMPLYMINSRNC" type="STRING" size="256"/>
          <Column id="DDCT_RETUN_ENCRG_ENDW" type="STRING" size="256"/>
          <Column id="ETC_INCOME_DDC_SM" type="STRING" size="256"/>
          <Column id="GNRLZ_LMT_EXCESS_AMOUNT" type="STRING" size="256"/>
          <Column id="ANNTY_SVINGS_TAXAMT" type="STRING" size="256"/>
          <Column id="IRNCF_TAXAMT" type="STRING" size="256"/>
          <Column id="MCP_TAXAMT" type="STRING" size="256"/>
          <Column id="EDCCT_TAXAMT" type="STRING" size="256"/>
          <Column id="CNTR_POLITC_TAXAMT" type="STRING" size="256"/>
          <Column id="CNTR_POLITC_UP" type="STRING" size="256"/>
          <Column id="CNTR_POLITC_UP_TAXAMT" type="STRING" size="256"/>
          <Column id="LEGAL_CNTR" type="STRING" size="256"/>
          <Column id="LEGAL_CNTR_TAXAMT" type="STRING" size="256"/>
          <Column id="APPN_CNTR" type="STRING" size="256"/>
          <Column id="APPN_CNTR_TAXAMT" type="STRING" size="256"/>
          <Column id="MTHT_AM_TAXXAMT" type="STRING" size="256"/>
          <Column id="GRNT_IRNCF" type="STRING" size="256"/>
          <Column id="PNINT_RPAY_FNNC" type="STRING" size="256"/>
          <Column id="PNINT_RPAY_RESIDNT" type="STRING" size="256"/>
          <Column id="SUBSCRPT_SVINGS" type="STRING" size="256"/>
          <Column id="HOUSE_SUBSCRPT_GNRLZ" type="STRING" size="256"/>
          <Column id="LABRR_HOUSE_PREPRTN" type="STRING" size="256"/>
          <Column id="SPECL_INCOME_DDC" type="STRING" size="256"/>
          <Column id="SPECL_TAXAMT_DDC_SM" type="STRING" size="256"/>
          <Column id="CNTR_CYFD" type="STRING" size="256"/>
          <Column id="RETIRE_ANNTY" type="STRING" size="256"/>
          <Column id="RETIRE_ANNTY_DDC" type="STRING" size="256"/>
          <Column id="DSPSN_GRNT_INSRNC" type="STRING" size="256"/>
          <Column id="DSPSN_GRNT_INSRNC_DDC" type="STRING" size="256"/>
          <Column id="END_CNTR" type="STRING" size="256"/>
          <Column id="END_CNTR_TAXAMT" type="STRING" size="256"/>
          <Column id="LEGAL_CNTR_CYFD" type="STRING" size="256"/>
          <Column id="APPN_CNTR_CYFD" type="STRING" size="256"/>
          <Column id="RELGN_CNTR_CYFD" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INTR_14" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INTR_29" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INTR_30" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INTR_FIXING" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INTR_ETC" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INTR_15Y_15_1" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INTR_15Y_15_2" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INTR_15Y_15_3" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INTR_15Y_10" type="STRING" size="256"/>
          <Column id="SMALL_CRNTY_DDC" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_yndExcclcDdcStdr" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="EXCCLC_YEAR" type="STRING" size="256"/>
          <Column id="DDC_SE_CODE" type="STRING" size="256"/>
          <Column id="DDC_STDR_CODE" type="STRING" size="256"/>
          <Column id="DDC_STDR_NM" type="STRING" size="256"/>
          <Column id="DDC_MTH" type="STRING" size="256"/>
          <Column id="DDC_AMOUNT" type="BIGDECIMAL" size="256"/>
          <Column id="DDC_RT" type="STRING" size="256"/>
          <Column id="STDR_AMOUNT" type="BIGDECIMAL" size="256"/>
          <Column id="LMT_AMOUNT" type="BIGDECIMAL" size="256"/>
          <Column id="LMT_RT" type="STRING" size="256"/>
          <Column id="RM" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_cond01" firefirstcount="0" firenextcount="0" useclientlayout="true" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="EXCCLC_YEAR" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_yndBeforeWork" firefirstcount="0" firenextcount="0" useclientlayout="true" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="EXCCLC_YEAR" type="STRING" size="256"/>
          <Column id="EXCCLC_SE" type="STRING" size="256"/>
          <Column id="EMPNO" type="STRING" size="256"/>
          <Column id="INCOME_SE" type="STRING" size="256"/>
          <Column id="EMPNM" type="STRING" size="256"/>
          <Column id="WRKPLC_NM" type="STRING" size="256"/>
          <Column id="BIZRNO" type="STRING" size="256"/>
          <Column id="SALARY_TOTAMT" type="STRING" size="256"/>
          <Column id="BNS_TOTAMT" type="STRING" size="256"/>
          <Column id="TAXXMPT_OUTNATN_ERNM" type="STRING" size="256"/>
          <Column id="TAXXMPT_NIGHT_ERNM" type="STRING" size="256"/>
          <Column id="TAXXMPT_ETC_INCOME" type="STRING" size="256"/>
          <Column id="INCMTAX" type="STRING" size="256"/>
          <Column id="LCLTY_INCMTAX" type="STRING" size="256"/>
          <Column id="AGSPT" type="STRING" size="256"/>
          <Column id="PAY_ENDW" type="STRING" size="256"/>
          <Column id="HLTHINS" type="STRING" size="256"/>
          <Column id="NPN" type="STRING" size="256"/>
          <Column id="EMPLYMINSRNC" type="STRING" size="256"/>
          <Column id="WORK_BEGIN_DE" type="STRING" size="256"/>
          <Column id="WORK_ENDDE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_cond02" firefirstcount="0" firenextcount="0" useclientlayout="true" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="EXCCLC_YEAR" type="STRING" size="256"/>
          <Column id="T_AMT" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_incomeTaxrt" firefirstcount="0" firenextcount="0" useclientlayout="true" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="OUT_AMT" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_yndExcclcCreat" firefirstcount="0" firenextcount="0" useclientlayout="true" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="EXCCLC_YEAR" type="STRING" size="256"/>
          <Column id="EXCCLC_SE" type="STRING" size="256"/>
          <Column id="EMPNO" type="STRING" size="256"/>
          <Column id="EMPNM" type="STRING" size="256"/>
          <Column id="OFCPS" type="STRING" size="256"/>
          <Column id="DEPT_NM" type="STRING" size="256"/>
          <Column id="DDCT_LEV_INCMTAX" type="STRING" size="256"/>
          <Column id="DDCT_LEV_AGSPT" type="STRING" size="256"/>
          <Column id="DDCT_LEV_LCLTY_INCMTAX" type="STRING" size="256"/>
          <Column id="DDCT_RETUN_INCMTAX" type="STRING" size="256"/>
          <Column id="DDCT_RETUN_AGSPT" type="STRING" size="256"/>
          <Column id="DDCT_RETUN_LCLTY_INCMTAX" type="STRING" size="256"/>
          <Column id="EMPL_SE" type="STRING" size="256"/>
          <Column id="PYMNT_YM" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_yndse" firefirstcount="0" firenextcount="0" useclientlayout="true" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="code" type="STRING" size="256"/>
          <Column id="name" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="code">1</Col>
            <Col id="name">연말정산</Col>
          </Row>
          <Row>
            <Col id="code">2</Col>
            <Col id="name">중도퇴직정산</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="ds_ofcps" firefirstcount="0" firenextcount="0" useclientlayout="true" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="CODE_NM" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_jssfc" firefirstcount="0" firenextcount="0" useclientlayout="true" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="CODE_NM" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_yndExcclcBsis" firefirstcount="0" firenextcount="0" useclientlayout="true" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="EXCCLC_YEAR" type="STRING" size="256"/>
          <Column id="EXCCLC_SE" type="STRING" size="256"/>
          <Column id="EMPNO" type="STRING" size="256"/>
          <Column id="EMPNM" type="STRING" size="256"/>
          <Column id="EXCCLC_BGNDE" type="STRING" size="256"/>
          <Column id="EXCCLC_ENDDE" type="STRING" size="256"/>
          <Column id="DEPT_CODE" type="STRING" size="256"/>
          <Column id="DEPT_NM" type="STRING" size="256"/>
          <Column id="CLSF_CODE" type="STRING" size="256"/>
          <Column id="SRCLS" type="STRING" size="256"/>
          <Column id="OFCPS_CODE" type="STRING" size="256"/>
          <Column id="ECNY_SE" type="STRING" size="256"/>
          <Column id="ECNY_DE" type="STRING" size="256"/>
          <Column id="RETIRE_DE" type="STRING" size="256"/>
          <Column id="DSPSN_GRAD" type="STRING" size="256"/>
          <Column id="RWDMRT_GRAD" type="STRING" size="256"/>
          <Column id="EMPL_SE" type="STRING" size="256"/>
          <Column id="HSHLDR_AT" type="STRING" size="256"/>
          <Column id="SPOUSE_AT" type="STRING" size="256"/>
          <Column id="LADY_HSHLDR" type="STRING" size="256"/>
          <Column id="SUPORTR_20" type="STRING" size="256"/>
          <Column id="SUPORTR_60" type="STRING" size="256"/>
          <Column id="COURS_PVLTRT_65" type="STRING" size="256"/>
          <Column id="COURS_PVLTRT_70" type="STRING" size="256"/>
          <Column id="DSPSN_CO" type="STRING" size="256"/>
          <Column id="CHLDRN_6_BELOW" type="STRING" size="256"/>
          <Column id="CHLDBRTH_ADP_CHLDRN" type="STRING" size="256"/>
          <Column id="MNYCH" type="STRING" size="256"/>
          <Column id="PARNTS_1" type="STRING" size="256"/>
          <Column id="NPN" type="STRING" size="256"/>
          <Column id="INDVDL_ANNTY_SVINGS_BEFORE" type="STRING" size="256"/>
          <Column id="INDVDL_ANNTY_SVINGS_AFTER" type="STRING" size="256"/>
          <Column id="ANNTY_SVINGS_DDC" type="STRING" size="256"/>
          <Column id="HLTHINS" type="STRING" size="256"/>
          <Column id="EMPLYMINSRNC" type="STRING" size="256"/>
          <Column id="GRNT_INSRNC" type="STRING" size="256"/>
          <Column id="DSPSN_DVR_INSRNC" type="STRING" size="256"/>
          <Column id="GNRL_MCP" type="STRING" size="256"/>
          <Column id="SELF_COURS_TROBL_MCP" type="STRING" size="256"/>
          <Column id="ERNM_3" type="STRING" size="256"/>
          <Column id="DDC_MCP" type="STRING" size="256"/>
          <Column id="SELF_EDCCT" type="STRING" size="256"/>
          <Column id="ESHL_BFE_EDCCT" type="STRING" size="256"/>
          <Column id="GNRL_EDCCT" type="STRING" size="256"/>
          <Column id="UNIV_EDCCT" type="STRING" size="256"/>
          <Column id="DSPSN_EDCCT" type="STRING" size="256"/>
          <Column id="INVSTMNT_INVT" type="STRING" size="256"/>
          <Column id="INVT_MXTR" type="STRING" size="256"/>
          <Column id="SUBSCRPT_SVINGS" type="STRING" size="256"/>
          <Column id="HOUSE_SUBSCRPT_GNRLZ" type="STRING" size="256"/>
          <Column id="LABRR_HOUSE_PREPRTN" type="STRING" size="256"/>
          <Column id="LFSTS_INTR" type="STRING" size="256"/>
          <Column id="PNINT_RPAY_FNNC" type="STRING" size="256"/>
          <Column id="HOUSE_HIRE_INTR_RPAY" type="STRING" size="256"/>
          <Column id="MTHT_AM" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INSTT_NM" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_DE" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INTR_14" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INTR_29" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INTR_30" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INTR_FIXING" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INTR_ETC" type="STRING" size="256"/>
          <Column id="LEGAL_CNTR" type="STRING" size="256"/>
          <Column id="EXCPT_CNTR" type="STRING" size="256"/>
          <Column id="EXCPT_CNTR_LMT" type="STRING" size="256"/>
          <Column id="APPN_CNTR" type="STRING" size="256"/>
          <Column id="LABOR_MXTR" type="STRING" size="256"/>
          <Column id="APPN_CNTR_LMT_PRVYY" type="STRING" size="256"/>
          <Column id="END_CNTR" type="STRING" size="256"/>
          <Column id="APPN_TXCLCTPT_LMT_THSYR" type="STRING" size="256"/>
          <Column id="LEGAL_CNTR_CYFD" type="STRING" size="256"/>
          <Column id="APPN_CNTR_CYFD" type="STRING" size="256"/>
          <Column id="RELGN_CNTR_CYFD" type="STRING" size="256"/>
          <Column id="APPN_CNTR_LMT_UNITY" type="STRING" size="256"/>
          <Column id="MRRG_HMV_FNRL" type="STRING" size="256"/>
          <Column id="SPT_TCHNLGY_HNF" type="STRING" size="256"/>
          <Column id="CNWK_SDYTRN" type="STRING" size="256"/>
          <Column id="CREDTCARD" type="STRING" size="256"/>
          <Column id="DBCD" type="STRING" size="256"/>
          <Column id="PBTRNSP_USE" type="STRING" size="256"/>
          <Column id="CASH_RCIPT" type="STRING" size="256"/>
          <Column id="TRDIT_MRKT_USE" type="STRING" size="256"/>
          <Column id="ERNM_25" type="STRING" size="256"/>
          <Column id="ERNM_20" type="STRING" size="256"/>
          <Column id="CREDTCARD_DDC" type="STRING" size="256"/>
          <Column id="OUTNATN_WORK_NM" type="STRING" size="256"/>
          <Column id="OUTNATN_WORK_RSPOFC" type="STRING" size="256"/>
          <Column id="OUTNATN_WORK_PD" type="STRING" size="256"/>
          <Column id="OUTNATN_WORK_TOT_SALARY" type="STRING" size="256"/>
          <Column id="OUTNATN_WORK_TAXPAY_YEAST" type="STRING" size="256"/>
          <Column id="OUTNATN_WORK_TAXPAY_WON" type="STRING" size="256"/>
          <Column id="OUTNATN_WORK_TAXPAY_FGCRY" type="STRING" size="256"/>
          <Column id="OUTNATN_WORK_TAXAMT_DDC" type="STRING" size="256"/>
          <Column id="FUND_1" type="STRING" size="256"/>
          <Column id="FUND_2" type="STRING" size="256"/>
          <Column id="FUND_3" type="STRING" size="256"/>
          <Column id="INORG_SCRITS_SVINGS" type="STRING" size="256"/>
          <Column id="SVINGS_SM" type="STRING" size="256"/>
          <Column id="POLITC_CPTAL_CNTR" type="STRING" size="256"/>
          <Column id="HOUSE_INTR_RPAY_AMOUNT" type="STRING" size="256"/>
          <Column id="REGISTER_ID" type="STRING" size="256"/>
          <Column id="REGIST_DT" type="STRING" size="256"/>
          <Column id="UPDUSR_ID" type="STRING" size="256"/>
          <Column id="UPDT_DT" type="STRING" size="256"/>
          <Column id="FYER_LABOR_INCOME" type="STRING" size="256"/>
          <Column id="TAXXMPT_INCOME" type="STRING" size="256"/>
          <Column id="TOT_SALARY_AMOUNT" type="STRING" size="256"/>
          <Column id="ERNM_DDC" type="STRING" size="256"/>
          <Column id="ERNM_AMOUNT" type="STRING" size="256"/>
          <Column id="SELF_CREDTCARD" type="STRING" size="256"/>
          <Column id="CREDTCARD_ADIT_USE_AMOUNT" type="STRING" size="256"/>
          <Column id="CREDTCARD_ADIT_USE_AMOUNT_2" type="STRING" size="256"/>
          <Column id="SMALL_CRNTY_DDC" type="STRING" size="256"/>
          <Column id="INVT_MXTR_2" type="STRING" size="256"/>
          <Column id="INVT_MXTR_3" type="STRING" size="256"/>
          <Column id="RETIRE_ANNTY" type="STRING" size="256"/>
          <Column id="PNINT_RPAY_RESIDNT" type="STRING" size="256"/>
          <Column id="INCMTAX" type="STRING" size="256"/>
          <Column id="LCLTY_INCMTAX" type="STRING" size="256"/>
          <Column id="RM" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INTR_15Y_15_1" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INTR_15Y_15_2" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INTR_15Y_15_3" type="STRING" size="256"/>
          <Column id="HOUSE_MRTG_BRRW_INTR_15Y_10" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="div_search.spn_excclcYear" propid="value" datasetid="ds_year" columnid="year"/>
    </Bind>
    <Script type="xscript5.0"><![CDATA[/***********************************************************************
 * 업무구분 : 연말정산계산관리
 * 화면ID   : SAL050206
 * 화면명   : 연말정산계산관리
 * 화면설명 : 연말정산계산생성을 관리한다.
 * 작성일   : 2015.10.20
 * 작성자   : 이동석
 * 수정이력 : 
 ***********************************************************************
 *     수정일     수정자   내용
 ***********************************************************************
 *    
 ***********************************************************************/
 

/***********************************************************************
 * Script Include 
 ***********************************************************************/
include "lib::comInclude.xjs";

/***********************************************************************
 * 화면 변수 선언부
 ***********************************************************************/


/***********************************************************************
 * onInit 영역
 ***********************************************************************/
this.SAL050206_oninit = function(obj:Form, e:nexacro.InitEventInfo)
{
	this.fn_init_form();
	this.fn_init_dataset();
}

/***********************************************************************
 * onLoad 영역
 ***********************************************************************/
this.SAL050206_onload = function(obj:Form, e:nexacro.LoadEventInfo)
{
	this.div_search.spn_excclcYear.set_value( ((this.dateUtils.format(this.gfn_today(),"yyyy")*1) - 1) + "");
	this.div_pymntYm.setValue(this.dateUtils.format(this.gfn_today(),"yyyymm"));
	this.fn_loadCombo();
	this.div_search.spn_excclcYear.setFocus(true);
	this.fn_search();
}

/***********************************************************************
 * 설명: 공통조회
 ************************************************************************/
this.fn_loadCombo = function()
{
	var comboParams = [["ds_ofcps", "HRM021", 1, ""],    // 직위
	                   ["ds_jssfc", "HRM001", 1, ""]     // 직종	                        
		              ];

	this.gfn_comboLoad(comboParams, this.fn_callbackAfter);
	
}

/***********************************************************************
 * Form 오브젝트 초기화
 ***********************************************************************/ 
this.fn_init_form = function()
{
	this.gfn_initForm(this);
	this.div_search.chk_del.set_value("N");  
}

/***********************************************************************
 * Dataset 오브젝트 초기화
 ***********************************************************************/ 
this.fn_init_dataset = function()
{
	this.gfn_initCondDs(this, this.div_search);	
}

/***********************************************************************
* 조회처리
************************************************************************/
this.fn_search = function()
{
	
	this.ds_yndExcclcCreat.clearData();
	this.ds_cond00.clearData();
	this.ds_cond00.addRow();
	
	this.ds_cond00.setColumn(0,"EXCCLC_YEAR",this.div_search.spn_excclcYear.value);
	this.ds_cond00.setColumn(0,"EXCCLC_SE",this.div_search.rad_excclcSe.value);
	// Validation 체크
// 	if(!this.gfn_checkValidation(this.ds_cond00, this.ds_validation)) {
// 		return;
// 	}	
	this.fn_transaction("selectYndCreatList");
}


/**********************************************************************
 * CALL TRANSACTION 영역
 **********************************************************************/ 
this.fn_transaction = function(strSvcId)
{
	switch (strSvcId) {
	    case "selectYndCreatList": 
			var sController   	= "hsco/mis/sal/SAL050206/selectYndCreatList.do";
			var sInDatasets   	= "input1=ds_cond00";
			var sOutDatasets  	= "ds_yndExcclcCreat=output1";
			break;	
	    // 계산내역 조회
		case "selectYndExcclcDetailList": 
			var sController   	= "hsco/mis/sal/SAL050206/selectYndExcclcDetailList.do";
			var sInDatasets   	= "input1=ds_cond00";
			var sOutDatasets  	= "ds_yndExcclcDetail=output1";
			break;	
		// 계산내역 삭제
		case "deleteYndExcclcDetailList":	
			var sController   	= "hsco/mis/sal/SAL050206/deleteYndExcclcDetailList.do";	
			var sInDatasets   	= "input2=ds_cond00";
			var sOutDatasets  	= "";
			break;	
		// 급여반영
		case "selectYndPymntymList":	
			var sController   	= "hsco/mis/sal/SAL050206/selectYndPymntymList.do";	
			var sInDatasets   	= "input1=ds_cond00";
			var sOutDatasets  	= "";
			break;		
	}
	Ex.core.tran(this, strSvcId, sController, sInDatasets, sOutDatasets); 
}

 /**********************************************************************
 * Transaction Callback 영역
 ***********************************************************************/ 
this.fn_callBack = function (strSvcId, nErrorCode, strErrorMsg)
{
	// 오류 및 성공 메시지를 화면에 보여준다.
	/*this.gfn_callback_message(strSvcId, nErrorCode, strErrorMsg);*/
	if (nErrorCode != 0){
		       this.gfn_callback_message(strSvcId, nErrorCode, strErrorMsg);	
} else {		
		switch (strSvcId) {			
			case "selectYndExcclcDetailList":
			    if(this.ds_yndExcclcDetail.getRowCount() > 0) {
			    	this.alert(this.div_search.spn_excclcYear.value + " 년도 연말정산 계산내역이 있습니다."); 
			    	return;			      
			    } else {
			        this.mt_creat();   // 연말정산 계산
			    }	     				      
				break;
			case "deleteYndExcclcDetailList":
			    this.alert(this.div_search.spn_excclcYear.value+ " 년도 삭제가 완료되었습니다."); 	
				this.fn_search();
				break;	
			case "selectYndPymntymList":
			    this.alert("적용되었습니다."); 
			    this.fn_search();
				break;				
		}
	}
}


/***********************************************************************************
* 설명	: 연말정산계산 버튼
***********************************************************************************/
this.div_search_btn_cre_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
		
	if(this.div_search.chk_del.value == "Y") {
	        // 삭제
	        this.mt_delete();
	        	
	} else if(this.div_search.chk_del.value == "N") {
	        // 생성내역 확인
			this.ds_yndExcclcBsis.clearData();
			this.ds_yndExcclcDetail.clearData();
			this.ds_cond00.clearData();
			this.ds_cond00.addRow();
			var empno = "";		
	        empno = this.div_search.div_EMP.GetValue("EMPNO");	
	        if(this.div_search.rad_excclcSe.value == "2") {
	              if(!empno){
	                     this.alert("중도퇴직정산 사원을 선택하세요");
	                     return;
	              }
	        }
			this.ds_cond00.setColumn(0,"EXCCLC_YEAR",this.div_search.spn_excclcYear.value);
			this.ds_cond00.setColumn(0,"EXCCLC_SE",this.div_search.rad_excclcSe.value);
			this.ds_cond00.setColumn(0,"EMPNO",empno);
				
			// Validation 체크
			if(!this.gfn_checkValidation(this.ds_cond00, this.ds_validation)) {
				return;
			}	
			this.fn_transaction("selectYndExcclcDetailList");	
	}	
}


/***********************************************************************************
* 설명	: 연말정산계산내역 삭제
***********************************************************************************/
this.mt_delete = function()
{
     if ( application.confirm( this.ds_year.getColumn(0,"year") + " 연말정산계산내역을 삭제하시겠습니까?" ) ) {	            
	            
	            if(!this.div_search.spn_excclcYear.value){
	                alert("연말정산년도를 입력하세요");
	                return;
	            }	           
				this.ds_cond00.clearData();
				this.ds_cond00.addRow();
				var empno = "";		
				empno = this.div_search.div_EMP.GetValue("EMPNO");	
			    this.ds_cond00.setColumn(0,"EXCCLC_YEAR",this.div_search.spn_excclcYear.value);
				this.ds_cond00.setColumn(0,"EXCCLC_SE",this.div_search.rad_excclcSe.value);
				this.ds_cond00.setColumn(0,"EMPNO",empno);    
	            
				this.fn_transaction("deleteYndExcclcDetailList");
     }
}

/***********************************************************************************
* 설명	: 삭제체크시 버튼표시
***********************************************************************************/
this.div_search_chk_del_onchanged = function(obj:CheckBox, e:nexacro.CheckBoxChangeEventInfo)
{
	if(this.div_search.chk_del.value == "Y") {
	      this.div_search.btn_cre.set_text("삭제");
	} else if(this.div_search.chk_del.value == "N"){
	      this.div_search.btn_cre.set_text("계산");
	}
}



/***********************************************************************************
* 설명	: 연말정산계산
***********************************************************************************/
this.mt_creat = function()
{
	  
	  if(!this.ds_year.getColumn(0,"year")){
		  alert("생성년도를 입력하세요");
		  return;
	  }	 
	 
	 // 연말정산 대상자 기본정보
	 this.ds_yndExcclcBsis.clearData();
	 this.ds_yndExcclcDetail.clearData();
	 this.ds_cond00.clearData();	
	 this.ds_cond00.addRow();
	 var empno = "";		
	 empno = this.div_search.div_EMP.GetValue("EMPNO");	
	 this.ds_cond00.setColumn(0,"EXCCLC_YEAR",this.div_search.spn_excclcYear.value);
	 this.ds_cond00.setColumn(0,"EXCCLC_SE",this.div_search.rad_excclcSe.value);
	 this.ds_cond00.setColumn(0,"EMPNO",empno);		
		 
	 var strSvcId       = "selectYndExcclcDetail2List";   
	 var sController   	= "hsco/mis/sal/SAL050206/selectYndExcclcDetail2List.do";
	 var sInDatasets   	= "input3=ds_cond00";
	 var sOutDatasets  	= "ds_yndExcclcBsis=output3";
	 var argument = "";
	 var callbackfunc = "";
	 var showprogress = "";
	 var bAsync = false;
	 Ex.core.tran(this, strSvcId, sController, sInDatasets, sOutDatasets, argument, callbackfunc, showprogress, bAsync);  
	
	 if(this.ds_yndExcclcBsis.rowcount == 0){
	      this.alert("연말정산 공제대상자정보가 없습니다.");
	      return;
	 }
	 
	 
	 
	 // 연말정산 공제기준정보
	 this.ds_cond00.clearData();	
	 this.ds_cond00.addRow();	
	 this.ds_cond00.setColumn(0,"EXCCLC_YEAR",this.div_search.spn_excclcYear.value);	
		 
	 var strSvcId       = "selectYndExcclcDetail3List";   
	 var sController   	= "hsco/mis/sal/SAL050206/selectYndExcclcDetail3List.do";
	 var sInDatasets   	= "input4=ds_cond00";
	 var sOutDatasets  	= "ds_yndExcclcDdcStdr=output4";
	 var argument = "";
	 var callbackfunc = "";
	 var showprogress = "";
	 var bAsync = false;
	 Ex.core.tran(this, strSvcId, sController, sInDatasets, sOutDatasets, argument, callbackfunc, showprogress, bAsync);  
	 
	 if(this.ds_yndExcclcDdcStdr.rowcount == 0){
	      this.alert("연말정산 공제기준정보가 없습니다.");
	      return;
	 }
	 
	 
	// 연말정산 계산시작 
	if(this.ds_yndExcclcBsis.rowcount > 0){
       var Hrow_con = this.ds_yndExcclcBsis.getRowCount();
       for (var i=0; i<= Hrow_con - 1; i++) { 
       
            this.ds_yndExcclcDetail.clearData();	
            this.ds_yndExcclcDetail.addRow();
            
            this.dataset_clear();
            
            // 기본정보 입력
            this.ds_yndExcclcDetail.setColumn(0,"EXCCLC_YEAR",this.ds_yndExcclcBsis.getColumn(i,"EXCCLC_YEAR"));
            this.ds_yndExcclcDetail.setColumn(0,"EXCCLC_SE",this.ds_yndExcclcBsis.getColumn(i,"EXCCLC_SE"));
            this.ds_yndExcclcDetail.setColumn(0,"EMPNO",this.ds_yndExcclcBsis.getColumn(i,"EMPNO"));
            this.ds_yndExcclcDetail.setColumn(0,"EMPNM",this.ds_yndExcclcBsis.getColumn(i,"EMPNM"));
            this.ds_yndExcclcDetail.setColumn(0,"CLSF_CODE",this.ds_yndExcclcBsis.getColumn(i,"CLSF_CODE"));
            this.ds_yndExcclcDetail.setColumn(0,"EXCCLC_BGNDE",this.ds_yndExcclcBsis.getColumn(i,"EXCCLC_BGNDE"));
            this.ds_yndExcclcDetail.setColumn(0,"EXCCLC_ENDDE",this.ds_yndExcclcBsis.getColumn(i,"EXCCLC_ENDDE"));
            this.ds_yndExcclcDetail.setColumn(0,"DEPT_CODE",this.ds_yndExcclcBsis.getColumn(i,"DEPT_CODE"));
            this.ds_yndExcclcDetail.setColumn(0,"DEPT_NM",this.ds_yndExcclcBsis.getColumn(i,"DEPT_NM"));
            this.ds_yndExcclcDetail.setColumn(0,"SRCLS",this.ds_yndExcclcBsis.getColumn(i,"SRCLS"));
            this.ds_yndExcclcDetail.setColumn(0,"OFCPS_CODE",this.ds_yndExcclcBsis.getColumn(i,"OFCPS_CODE"));
            this.ds_yndExcclcDetail.setColumn(0,"ECNY_SE",this.ds_yndExcclcBsis.getColumn(i,"ECNY_SE"));
            this.ds_yndExcclcDetail.setColumn(0,"ECNY_DE",this.ds_yndExcclcBsis.getColumn(i,"ECNY_DE"));
            this.ds_yndExcclcDetail.setColumn(0,"RETIRE_DE",this.ds_yndExcclcBsis.getColumn(i,"RETIRE_DE"));
            
                       
            // 연말정산 종전근무지정보
			this.ds_yndBeforeWork.clearData();
			this.ds_cond00.clearData();	
			this.ds_cond00.addRow();	
			this.ds_cond00.setColumn(0,"EXCCLC_YEAR",this.div_search.spn_excclcYear.value);	
			this.ds_cond00.setColumn(0,"EXCCLC_SE",this.div_search.rad_excclcSe.value);
			this.ds_cond00.setColumn(0,"EMPNO",this.ds_yndExcclcBsis.getColumn(i,"EMPNO"));	
				 
			var strSvcId       = "selectYndExcclcDetail4List";   
			var sController   	= "hsco/mis/sal/SAL050206/selectYndExcclcDetail4List.do";
			var sInDatasets   	= "input5=ds_cond00";
			var sOutDatasets  	= "ds_yndBeforeWork=output5";
			var argument = "";
			var callbackfunc = "";
			var showprogress = "";
			var bAsync = false;
			Ex.core.tran(this, strSvcId, sController, sInDatasets, sOutDatasets, argument, callbackfunc, showprogress, bAsync);  
            
            
            if(this.ds_yndBeforeWork.getColumn(0,"SALARY_TOTAMT")){ 
                  
                  // 종전 근무 급여총액
                  var SalaryTotamt = this.ds_yndBeforeWork.getColumn(0,"SALARY_TOTAMT");
                  // 종전 근무 상여총액
                  var BnsTotamt = this.ds_yndBeforeWork.getColumn(0,"BNS_TOTAMT");
                  
                  this.ds_yndExcclcDetail.setColumn(0,"BEFORE_WORK_1_SALARY",SalaryTotamt);              // 종전근무 급여총액
                  this.ds_yndExcclcDetail.setColumn(0,"BEFORE_WORK_1_BNS",BnsTotamt);                    // 종전근무 상여총액
                  
                  // 소득세
                  var Before_1_Incmtax = this.ds_yndBeforeWork.getColumn(0,"INCMTAX");
                  // 지방소득세
                  var Before_1_LcltyIncmtax = this.ds_yndBeforeWork.getColumn(0,"LCLTY_INCMTAX");
                  // 농특세
                  var Before_1_Agspt = this.ds_yndBeforeWork.getColumn(0,"AGSPT");
                  
                  this.ds_yndExcclcDetail.setColumn(0,"BEFORE_WORK_INCMTAX",Before_1_Incmtax);              // 종전근무 소득세
                  this.ds_yndExcclcDetail.setColumn(0,"BEFORE_WORK_LCLTY_INCMTAX",Before_1_LcltyIncmtax);   // 종전근무 지방소득세
                  this.ds_yndExcclcDetail.setColumn(0,"BEFORE_WORK_AGSPT",Before_1_Agspt);                  // 종전근무 농특세
                  
                  // 주현근무지 급여총액
                  var NowWorkSalaryAmount = parseInt(this.ds_yndExcclcBsis.getColumn(i,"TOT_SALARY_AMOUNT")) - parseInt(SalaryTotamt) - parseInt(BnsTotamt);
                  this.ds_yndExcclcDetail.setColumn(0,"NOW_WORK_SALARY_AMOUNT", NowWorkSalaryAmount);
            } else {
                  // 주현근무지 급여총액
                  var NowWorkSalaryAmount = parseInt(this.ds_yndExcclcBsis.getColumn(i,"TOT_SALARY_AMOUNT"));
                  this.ds_yndExcclcDetail.setColumn(0,"NOW_WORK_SALARY_AMOUNT", NowWorkSalaryAmount);
            }
           
                       
            // 근로소득금액
            
            var Tot_Salary = this.ds_yndExcclcBsis.getColumn(i,"TOT_SALARY_AMOUNT");
             
            var Tot_Amt = Tot_Salary;  // 총급여
           
            this.ds_yndExcclcDetail.setColumn(0,"SALARY_TOT_AMOUNT",Tot_Amt);   // 급여총액
          
           
            // 근로소득공제금
            this.ds_yndExcclcDetail.setColumn(0,"ERNM_DDC",this.ds_yndExcclcBsis.getColumn(i,"ERNM_DDC"));
            // 근로소득금액
            var ErnmAmount = this.ds_yndExcclcBsis.getColumn(i,"ERNM_AMOUNT");
            var ErnmAmount30 = Math.floor(parseInt(ErnmAmount) * 0.3) ;   // 근로소득의 30%
            var ErnmAmount25 = Math.floor(parseInt(Tot_Amt) * 0.25) ;     // 총급여액의 25%
            var ErnmAmount20 = Math.floor(parseInt(ErnmAmount) * 0.2) ;   // 근로소득의 20%
            var ErnmAmount20_Tot = Math.floor(parseInt(Tot_Amt) * 0.2) ;   // 총급여액의 20%
            var ErnmAmount10 = Math.floor(parseInt(ErnmAmount) * 0.1) ;   // 근로소득의 10%
            var ErnmAmount03 = Math.floor(parseInt(Tot_Amt) * 0.03) ;  // 총급여액의 3%
            
            this.ds_yndExcclcDetail.setColumn(0,"ERNM_AMOUNT",this.ds_yndExcclcBsis.getColumn(i,"ERNM_AMOUNT"));
            
       // ========= 기본공제 ===========
            // 본인
          	var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y110001" );     // 기본 공제액
			var DDC_STD = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_AMOUNT");              // 공제금액 
			var BaDdc  = parseInt(DDC_STD)*1 ;                                               // 공제금계산
			this.ds_yndExcclcDetail.setColumn(0,"BSIS_DDC", BaDdc);                          // 본인 공제금액	
			
			// 배우자
			if(this.ds_yndExcclcBsis.getColumn(i,"SPOUSE_AT") == "1") {
			     var BaDdc2 = parseInt(DDC_STD)*1 ;                                           // 공제금계산
			     this.ds_yndExcclcDetail.setColumn(0,"SPOUSE_DDC", BaDdc2);                   // 배우자 공제금액	
			} else {
			     var BaDdc2  = 0 ;  
			     this.ds_yndExcclcDetail.setColumn(0,"SPOUSE_DDC", 0);                        // 배우자 공제금액
			}
				
            // 부양가족
            var Suportr = parseInt(this.ds_yndExcclcBsis.getColumn(i,"SUPORTR_20")) + parseInt(this.ds_yndExcclcBsis.getColumn(i,"SUPORTR_60"));
            var BaDdc3  = parseInt(DDC_STD) * parseInt(Suportr) ;                             // 공제금계산
			this.ds_yndExcclcDetail.setColumn(0,"DNTMY_DDC", BaDdc3);                         // 부양가족 공제금액	
      
       // ========= 추가공제 ===========      
            // 장애인
            var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y120001" );     // 장애인 공제액
			var DDC_STD = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_AMOUNT");              // 공제금액 
            var Dspsn   = this.ds_yndExcclcBsis.getColumn(i,"DSPSN_CO");
            var BaDdc4  = parseInt(DDC_STD) * parseInt(Dspsn) ;                               // 공제금계산
			this.ds_yndExcclcDetail.setColumn(0,"DSPSN_DDC", BaDdc4);                         // 장애인 공제금액	
			
			// 경로우대
            var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y120002" );     // 장애인 공제액
			var DDC_STD = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_AMOUNT");              // 공제금액 
            var Cours70 = this.ds_yndExcclcBsis.getColumn(i,"COURS_PVLTRT_70");
            var BaDdc5  = parseInt(DDC_STD) * parseInt(Cours70) ;                                     // 공제금계산
			this.ds_yndExcclcDetail.setColumn(0,"COURS_PVLTRT_DDC_70", BaDdc5);               // 장애인 공제금액			
			
			// 부녀자 (한부모와 중복 방지)
			if(this.ds_yndExcclcBsis.getColumn(i,"LADY_HSHLDR") == "1" && this.ds_yndExcclcBsis.getColumn(i,"PARNTS_1") != "1") {
			     var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y120003" ); // 부녀자 공제액
			     var DDC_STD = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_AMOUNT");          // 공제금액 
			     var BaDdc6  = parseInt(DDC_STD) * 1 ;                                         // 공제금계산
			     this.ds_yndExcclcDetail.setColumn(0,"LADY_HSHLDR_DDC", BaDdc6);               // 부녀자 공제금액	
			} else {
			     var BaDdc6  = 0;
			     this.ds_yndExcclcDetail.setColumn(0,"LADY_HSHLDR_DDC", BaDdc6);               // 부녀자 공제금액
			}
			
			// 한부모
			if(this.ds_yndExcclcBsis.getColumn(i,"PARNTS_1") == "1") {
			     var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y120004" ); // 한부모 공제액
			     var DDC_STD = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_AMOUNT");          // 공제금액 
			     var BaDdc7  = parseInt(DDC_STD) * 1 ;                                         // 공제금계산
			     this.ds_yndExcclcDetail.setColumn(0,"PARNTS_1_DDC", BaDdc7);                  // 한부모 공제금액	
			} else {
			     var BaDdc7  = 0;
			     this.ds_yndExcclcDetail.setColumn(0,"PARNTS_1_DDC", BaDdc7);                  // 한부모 공제금액	
			}
			
	   // ========= 연금보험료 ===========		
			// 국민연금보험료
			var Npn = this.ds_yndExcclcBsis.getColumn(i,"NPN");
			this.ds_yndExcclcDetail.setColumn(0,"ANNTY_IRNCF", Npn);
            
	   // ========= 특별소득공제 ===========            
            // 보험료
            var Hlthins = this.ds_yndExcclcBsis.getColumn(i,"HLTHINS");          // 건강보험료
            var Emply = this.ds_yndExcclcBsis.getColumn(i,"EMPLYMINSRNC");       // 고용보험료
            this.ds_yndExcclcDetail.setColumn(0,"IRNCF_DDC", parseInt(Hlthins) + parseInt(Emply));  // 보험료
            
            // 주택자금
            var PnintRpayFnnc = this.ds_yndExcclcBsis.getColumn(i,"PNINT_RPAY_FNNC");          // 주택임차월리금상환 대출기관
            var PnintRpayResidnt = this.ds_yndExcclcBsis.getColumn(i,"PNINT_RPAY_RESIDNT");    // 주택임차월리금상환 거주자
            
            
            var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y130001" );      // 주택임차월리금상환 + 주택저축 한도액
			var LMT_STD = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");               // 한도금액 
			var DDC_RT = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_RT");                    // 공제율 
            
            var PnintRpayFnnc2 = parseInt(PnintRpayFnnc) * parseInt(DDC_RT) /100;              // 원리금상환 대출기관
            var PnintRpayResidnt2 = parseInt(PnintRpayResidnt) * parseInt(DDC_RT) /100;        // 원리금상환 거주자
            
            var PnintAmt = 0;  // 한도금액 추적---------- (주택마련저축공제와 합계 300 한도)
            if(PnintRpayFnnc2 > LMT_STD){
                 PnintRpayFnnc2 = LMT_STD;
                 PnintAmt = 0;
            } else {
                 PnintAmt = parseInt(LMT_STD) - parseInt(PnintRpayFnnc2); 
            }
            
            if(PnintAmt > 0){
                 if(PnintRpayResidnt2 > PnintAmt){
                      PnintRpayResidnt2 = PnintAmt;
                      PnintAmt = 0;
                 } else {
                      PnintAmt = parseInt(PnintAmt) - parseInt(PnintRpayResidnt2);                      
                 }                 
            } else {
                 PnintRpayResidnt2 = 0;
            }
            
            var PnintRpay = parseInt(PnintRpayFnnc2) + parseInt(PnintRpayResidnt2);
            
            var totLimtAmt = LMT_STD;	//종합 한도 금액
            
            this.ds_yndExcclcDetail.setColumn(0,"PNINT_RPAY_FNNC", PnintRpayFnnc2);            // 원리금상환금융
			this.ds_yndExcclcDetail.setColumn(0,"PNINT_RPAY_RESIDNT", PnintRpayResidnt2);      // 원리금상환거주자
			
            // 1 주택임차월리금상환           
            this.ds_yndExcclcDetail.setColumn(0,"PNINT_RPAY_AMOUNT", PnintRpay);               
            
            var HouseMrtgBrrw14 = this.ds_yndExcclcBsis.getColumn(i,"HOUSE_MRTG_BRRW_INTR_14");  // 장기주택저당차입금이자 2011년 15년미만
            var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y130003" );        // 장기주택저당차입금이자 2011년 15년미만 한도액
			var LMT_STD = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");                 // 한도금액 
            if(parseInt(HouseMrtgBrrw14)  > parseInt(LMT_STD)){
                 HouseMrtgBrrw14 = parseInt(LMT_STD);
            }
            
            // 금액이 있을 경우 종합한도보다 항목 한도금액이 클경우 종합한도 수정
			if(HouseMrtgBrrw14 != null && HouseMrtgBrrw14 != "" && HouseMrtgBrrw14 > 0){
				if(parseInt(totLimtAmt) < parseInt(LMT_STD)){
					 totLimtAmt = parseInt(LMT_STD);
				}
			}
            
            var HouseMrtgBrrw29 = this.ds_yndExcclcBsis.getColumn(i,"HOUSE_MRTG_BRRW_INTR_29");  // 장기주택저당차입금이자 2011년 15~29년미만
            var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y130004" );        // 장기주택저당차입금이자 2011년 15~29년미만 한도액
			var LMT_STD = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");                 // 한도금액 
            if(parseInt(HouseMrtgBrrw29)  > parseInt(LMT_STD)){
                 HouseMrtgBrrw29 = parseInt(LMT_STD);
            }
            
            // 금액이 있을 경우 종합한도보다 항목 한도금액이 클경우 종합한도 수정
			if(HouseMrtgBrrw29 != null && HouseMrtgBrrw29 != "" && HouseMrtgBrrw29 > 0){
				if(parseInt(totLimtAmt) < parseInt(LMT_STD)){
					 totLimtAmt = parseInt(LMT_STD);
				}
			}
            
            var HouseMrtgBrrw30 = this.ds_yndExcclcBsis.getColumn(i,"HOUSE_MRTG_BRRW_INTR_30");  // 장기주택저당차입금이자 2011년 30년이상
            var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y130005" );        // 장기주택저당차입금이자 2011년 30년이상 한도액
			var LMT_STD = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");                 // 한도금액 
            if(parseInt(HouseMrtgBrrw30)  > parseInt(LMT_STD)){
                 HouseMrtgBrrw30 = parseInt(LMT_STD);
            }
            
            // 금액이 있을 경우 종합한도보다 항목 한도금액이 클경우 종합한도 수정
			if(HouseMrtgBrrw30 != null && HouseMrtgBrrw30 != "" && HouseMrtgBrrw30 > 0){
				if(parseInt(totLimtAmt) < parseInt(LMT_STD)){
					 totLimtAmt = parseInt(LMT_STD);
				}
			}
            
            var HouseMrtgFixing = this.ds_yndExcclcBsis.getColumn(i,"HOUSE_MRTG_BRRW_INTR_FIXING");  // 장기주택저당차입금이자 고정금리, 비거치
            var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y130006" );            // 장기주택저당차입금이자 고정금리, 비거치 한도액
			var LMT_STD = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");                     // 한도금액 
            if(parseInt(HouseMrtgFixing)  > parseInt(LMT_STD)){
                 HouseMrtgFixing = parseInt(LMT_STD);
            }
            
            // 금액이 있을 경우 종합한도보다 항목 한도금액이 클경우 종합한도 수정
			if(HouseMrtgFixing != null && HouseMrtgFixing != "" && HouseMrtgFixing > 0){
				if(parseInt(totLimtAmt) < parseInt(LMT_STD)){
					 totLimtAmt = parseInt(LMT_STD);
				}
			}
                        
            var HouseMrtgEtc= this.ds_yndExcclcBsis.getColumn(i,"HOUSE_MRTG_BRRW_INTR_ETC");         // 장기주택저당차입금이자 그밖의 대출
            var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y130007" );            // 장기주택저당차입금이자 그밖의 대출 한도액
			var LMT_STD = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");                     // 한도금액 
            if(parseInt(HouseMrtgEtc)  > parseInt(LMT_STD)){
                 HouseMrtgEtc = parseInt(LMT_STD);
            }
            
            // 금액이 있을 경우 종합한도보다 항목 한도금액이 클경우 종합한도 수정
			if(HouseMrtgEtc != null && HouseMrtgEtc != "" && HouseMrtgEtc > 0){
				if(parseInt(totLimtAmt) < parseInt(LMT_STD)){
					 totLimtAmt = parseInt(LMT_STD);
				}
			}
            
            var HouseMrtgBrre15Y15_1= this.ds_yndExcclcBsis.getColumn(i,"HOUSE_MRTG_BRRW_INTR_15Y_15_1");         // 주택저당차입이자15.1.1이후_15년이상&비거치식&고정금리
            var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y130008" );            // 주택저당차입이자15.1.1이후_15년이상&비거치식&고정금리 한도액
			var LMT_STD = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");                     // 한도금액 
            if(parseInt(HouseMrtgBrre15Y15_1)  > parseInt(LMT_STD)){
                 HouseMrtgBrre15Y15_1 = parseInt(LMT_STD);
            }
            
            // 금액이 있을 경우 종합한도보다 항목 한도금액이 클경우 종합한도 수정
			if(HouseMrtgBrre15Y15_1 != null && HouseMrtgBrre15Y15_1 != "" && HouseMrtgBrre15Y15_1 > 0){
				if(parseInt(totLimtAmt) < parseInt(LMT_STD)){
					 totLimtAmt = parseInt(LMT_STD);
				}
			}
            
            var HouseMrtgBrre15Y15_2= this.ds_yndExcclcBsis.getColumn(i,"HOUSE_MRTG_BRRW_INTR_15Y_15_2");         // 주택저당차입이자15.1.1이후_15년이상&(비거치식or고정금리)
            var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y130009" );            // 한도액
			var LMT_STD = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");                     // 한도금액 
            if(parseInt(HouseMrtgBrre15Y15_2)  > parseInt(LMT_STD)){
                 HouseMrtgBrre15Y15_2 = parseInt(LMT_STD);
            }
            
            // 금액이 있을 경우 종합한도보다 항목 한도금액이 클경우 종합한도 수정
			if(HouseMrtgBrre15Y15_2 != null && HouseMrtgBrre15Y15_2 != "" && HouseMrtgBrre15Y15_2 > 0){
				if(parseInt(totLimtAmt) < parseInt(LMT_STD)){
					 totLimtAmt = parseInt(LMT_STD);
				}
			}
            
            var HouseMrtgBrre15Y15_3= this.ds_yndExcclcBsis.getColumn(i,"HOUSE_MRTG_BRRW_INTR_15Y_15_3");         // 주택저당차입이자15.1.1이후_15년이상&기타
            var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y130010" );            // 한도액
			var LMT_STD = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");                     // 한도금액 
            if(parseInt(HouseMrtgBrre15Y15_3)  > parseInt(LMT_STD)){
                 HouseMrtgBrre15Y15_3 = parseInt(LMT_STD);
            }
            
            // 금액이 있을 경우 종합한도보다 항목 한도금액이 클경우 종합한도 수정
			if(HouseMrtgBrre15Y15_3 != null && HouseMrtgBrre15Y15_3 != "" && HouseMrtgBrre15Y15_3 > 0){
				if(parseInt(totLimtAmt) < parseInt(LMT_STD)){
					 totLimtAmt = parseInt(LMT_STD);
				}
			}
            
            var HouseMrtgBrre15Y10= this.ds_yndExcclcBsis.getColumn(i,"HOUSE_MRTG_BRRW_INTR_15Y_10");         // 주택저당차입이자15.1.1이후_10년이상&(비거치식or고정금리)
            var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y130011" );            // 한도액
			var LMT_STD = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");                     // 한도금액 
            if(parseInt(HouseMrtgBrre15Y10)  > parseInt(LMT_STD)){
                 HouseMrtgBrre15Y10 = parseInt(LMT_STD);
            }
            
            // 금액이 있을 경우 종합한도보다 항목 한도금액이 클경우 종합한도 수정
			if(HouseMrtgBrre15Y10 != null && HouseMrtgBrre15Y10 != "" && HouseMrtgBrre15Y10 > 0){
				if(parseInt(totLimtAmt) < parseInt(LMT_STD)){
					 totLimtAmt = parseInt(LMT_STD);
				}
			}
			
			totLimtAmt = parseInt(totLimtAmt) - parseInt(PnintRpay); // 종합한도 = 종합한도 - 주택임차차입금원리금상환 공제
			
			// 종합한도를 고려하여 공제금액 계산
			if(totLimtAmt > 0){
                 if(HouseMrtgBrrw14 > totLimtAmt){
                      HouseMrtgBrrw14 = totLimtAmt;
                      totLimtAmt = 0;
                 } else {
                      totLimtAmt = parseInt(totLimtAmt) - parseInt(HouseMrtgBrrw14);                      
                 }                 
            } else {
                 HouseMrtgBrrw14 = 0;
            }
            
            if(totLimtAmt > 0){
                 if(HouseMrtgBrrw29 > totLimtAmt){
                      HouseMrtgBrrw29 = totLimtAmt;
                      totLimtAmt = 0;
                 } else {
                      totLimtAmt = parseInt(totLimtAmt) - parseInt(HouseMrtgBrrw29);                      
                 }                 
            } else {
                 HouseMrtgBrrw29 = 0;
            }
            
            if(totLimtAmt > 0){
                 if(HouseMrtgBrrw30 > totLimtAmt){
                      HouseMrtgBrrw30 = totLimtAmt;
                      totLimtAmt = 0;
                 } else {
                      totLimtAmt = parseInt(totLimtAmt) - parseInt(HouseMrtgBrrw30);                      
                 }                 
            } else {
                 HouseMrtgBrrw30 = 0;
            }
            
            if(totLimtAmt > 0){
                 if(HouseMrtgFixing > totLimtAmt){
                      HouseMrtgFixing = totLimtAmt;
                      totLimtAmt = 0;
                 } else {
                      totLimtAmt = parseInt(totLimtAmt) - parseInt(HouseMrtgFixing);                      
                 }                 
            } else {
                 HouseMrtgFixing = 0;
            }
            
            if(totLimtAmt > 0){
                 if(HouseMrtgEtc > totLimtAmt){
                      HouseMrtgEtc = totLimtAmt;
                      totLimtAmt = 0;
                 } else {
                      totLimtAmt = parseInt(totLimtAmt) - parseInt(HouseMrtgEtc);                      
                 }                 
            } else {
                 HouseMrtgEtc = 0;
            }
            
            if(totLimtAmt > 0){
                 if(HouseMrtgBrre15Y15_1 > totLimtAmt){
                      HouseMrtgBrre15Y15_1 = totLimtAmt;
                      totLimtAmt = 0;
                 } else {
                      totLimtAmt = parseInt(totLimtAmt) - parseInt(HouseMrtgBrre15Y15_1);                      
                 }                 
            } else {
                 HouseMrtgBrre15Y15_1 = 0;
            }
            
            if(totLimtAmt > 0){
                 if(HouseMrtgBrre15Y15_2 > totLimtAmt){
                      HouseMrtgBrre15Y15_2 = totLimtAmt;
                      totLimtAmt = 0;
                 } else {
                      totLimtAmt = parseInt(totLimtAmt) - parseInt(HouseMrtgBrre15Y15_2);                      
                 }                 
            } else {
                 HouseMrtgBrre15Y15_2 = 0;
            }
            
            if(totLimtAmt > 0){
                 if(HouseMrtgBrre15Y15_3 > totLimtAmt){
                      HouseMrtgBrre15Y15_3 = totLimtAmt;
                      totLimtAmt = 0;
                 } else {
                      totLimtAmt = parseInt(totLimtAmt) - parseInt(HouseMrtgBrre15Y15_3);                      
                 }                 
            } else {
                 HouseMrtgBrre15Y15_3 = 0;
            }
            
            if(totLimtAmt > 0){
                 if(HouseMrtgBrre15Y10 > totLimtAmt){
                      HouseMrtgBrre15Y10 = totLimtAmt;
                      totLimtAmt = 0;
                 } else {
                      totLimtAmt = parseInt(totLimtAmt) - parseInt(HouseMrtgBrre15Y10);                      
                 }                 
            } else {
                 HouseMrtgBrre15Y10 = 0;
            }
            
            this.ds_yndExcclcDetail.setColumn(0,"HOUSE_MRTG_BRRW_INTR_14", HouseMrtgBrrw14);
            this.ds_yndExcclcDetail.setColumn(0,"HOUSE_MRTG_BRRW_INTR_29", HouseMrtgBrrw29);
            this.ds_yndExcclcDetail.setColumn(0,"HOUSE_MRTG_BRRW_INTR_30", HouseMrtgBrrw30);
            this.ds_yndExcclcDetail.setColumn(0,"HOUSE_MRTG_BRRW_INTR_FIXING", HouseMrtgFixing);
            this.ds_yndExcclcDetail.setColumn(0,"HOUSE_MRTG_BRRW_INTR_ETC", HouseMrtgEtc);
            this.ds_yndExcclcDetail.setColumn(0,"HOUSE_MRTG_BRRW_INTR_15Y_15_1", HouseMrtgBrre15Y15_1);
            this.ds_yndExcclcDetail.setColumn(0,"HOUSE_MRTG_BRRW_INTR_15Y_15_2", HouseMrtgBrre15Y15_2);
            this.ds_yndExcclcDetail.setColumn(0,"HOUSE_MRTG_BRRW_INTR_15Y_15_3", HouseMrtgBrre15Y15_3);
            this.ds_yndExcclcDetail.setColumn(0,"HOUSE_MRTG_BRRW_INTR_15Y_10", HouseMrtgBrre15Y10);
			
            // 2 장기주택저당차입금이자   
            var BrrwIntrRpayAmount = parseInt(HouseMrtgBrrw14) + parseInt(HouseMrtgBrrw29) + parseInt(HouseMrtgBrrw30) + parseInt(HouseMrtgFixing) + parseInt(HouseMrtgEtc) + parseInt(HouseMrtgBrre15Y15_1) + parseInt(HouseMrtgBrre15Y15_2) + parseInt(HouseMrtgBrre15Y15_3) + parseInt(HouseMrtgBrre15Y10);
            this.ds_yndExcclcDetail.setColumn(0,"BRRW_INTR_RPAY_AMOUNT", BrrwIntrRpayAmount);
            
            // 기부금(이월분)
            var LegarCntrCyfd = this.ds_yndExcclcBsis.getColumn(i,"LEGAL_CNTR_CYFD");     // 법정기부금 이월
            if(LegarCntrCyfd > ErnmAmount){
                  LegarCntrCyfd = ErnmAmount;
            }
            var AppnCntrCyfd = this.ds_yndExcclcBsis.getColumn(i,"APPN_CNTR_CYFD");       // 지정기부금 이월
            if(AppnCntrCyfd > ErnmAmount30){
                  AppnCntrCyfd = ErnmAmount30;
            }
            var RelgnCntrCyfd = this.ds_yndExcclcBsis.getColumn(i,"RELGN_CNTR_CYFD");     // 종교기부금 이월
            if(RelgnCntrCyfd > ErnmAmount10){
                  RelgnCntrCyfd = ErnmAmount10;
            }
            var CntrCyfd = parseInt(LegarCntrCyfd) + parseInt(AppnCntrCyfd) + parseInt(RelgnCntrCyfd);
            
            if(!LegarCntrCyfd){LegarCntrCyfd =0}
            if(!AppnCntrCyfd){AppnCntrCyfd =0}
            if(!RelgnCntrCyfd){RelgnCntrCyfd =0}
            if(!CntrCyfd){CntrCyfd =0}
            this.ds_yndExcclcDetail.setColumn(0,"LEGAL_CNTR_CYFD", LegarCntrCyfd);
            this.ds_yndExcclcDetail.setColumn(0,"APPN_CNTR_CYFD", AppnCntrCyfd);
            this.ds_yndExcclcDetail.setColumn(0,"RELGN_CNTR_CYFD", RelgnCntrCyfd);
            this.ds_yndExcclcDetail.setColumn(0,"CNTR_CYFD", CntrCyfd);   // 기부금이월
            
            // 특별소득 공제계
            if(!Hlthins){Hlthins =0}
            if(!Emply){Emply =0}
            if(!PnintRpay){PnintRpay =0}
            if(!BrrwIntrRpayAmount){BrrwIntrRpayAmount =0}
            var SpecialDdc = parseInt(Hlthins) + parseInt(Emply) + parseInt(PnintRpay) + parseInt(BrrwIntrRpayAmount) + parseInt(CntrCyfd);   // 보험, 주택자금, 기부금 
            this.ds_yndExcclcDetail.setColumn(0,"SPECL_INCOME_DDC", SpecialDdc);    
            
	  // ========= 차감소득금액 ===========      
	        // 종합소득공제계
	        // 기본공제(본인 + 배우자 + 부양가족(20세이하 60세이상) + 장애인 + 경로우대 + 부녀자 + 한부모) +
	        // 연금보험료공제 + 특별소득공제(건보료, 고용보험료, 주택임차차입금원리금상환액, 장기주책저당차입금이자상환액, 기부금이월(?))
	       var DdctIncomeAmount = parseInt(BaDdc) + parseInt(BaDdc2) + parseInt(BaDdc3) + parseInt(BaDdc4) + parseInt(BaDdc5) + parseInt(BaDdc6) + parseInt(BaDdc7) + 
	                              parseInt(Npn) + parseInt(Hlthins) + parseInt(Emply) + parseInt(PnintRpay) + parseInt(BrrwIntrRpayAmount) + parseInt(CntrCyfd);
	       // 차감소득금액
	       var DdctIncomeAmount2 = parseInt(ErnmAmount) - parseInt(DdctIncomeAmount);
	       if(DdctIncomeAmount2 < 0) {
	             DdctIncomeAmount2 = 0;
	       }
	       this.ds_yndExcclcDetail.setColumn(0,"DDCT_INCOME_AMOUNT", DdctIncomeAmount2);    
	       
	// ========= 그밖의 소득공제 =========== 	       
	    // 개인연금저축
	       var IdnvdlAnntySvingsDdc = this.ds_yndExcclcBsis.getColumn(i,"INDVDL_ANNTY_SVINGS_BEFORE"); 
	       
	       var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y140001" );        // 개인연금저축
		   var LMT_STD = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");                 // 한도금액 
           var DDC_RT = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_RT");                      // 공제율 
           
           var IdnvdlAnntySvingsDdc2 = parseInt(IdnvdlAnntySvingsDdc) * parseInt(DDC_RT) /100;
           IdnvdlAnntySvingsDdc2 = IdnvdlAnntySvingsDdc2 > LMT_STD ? LMT_STD : IdnvdlAnntySvingsDdc2;
           
           this.ds_yndExcclcDetail.setColumn(0,"INDVDL_ANNTY_SVINGS_INCOME_DDC", IdnvdlAnntySvingsDdc2);  
          
           //소기업 소상공인 공제부금
           var smallCrntyDdc = this.ds_yndExcclcBsis.getColumn(i,"SMALL_CRNTY_DDC"); 
	       
	       var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y140003" );        // 개인연금저축
		   var LMT_STD = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");                 // 한도금액 
           
           smallCrntyDdc = smallCrntyDdc > LMT_STD ? LMT_STD : smallCrntyDdc;
           
           this.ds_yndExcclcDetail.setColumn(0,"SMALL_CRNTY_DDC", smallCrntyDdc);  
          
		   // 주택마련저축 
		   if(Tot_Amt <= 70000000){
			   var SubscrptSvings = this.ds_yndExcclcBsis.getColumn(i,"SUBSCRPT_SVINGS");           // 청약저축		(240만원 이하)
			   var HouseSubscrptGnrlz = this.ds_yndExcclcBsis.getColumn(i,"HOUSE_SUBSCRPT_GNRLZ");  // 주택청약종합	(240만원 이하)
			   var LabrrHousePreprtn = this.ds_yndExcclcBsis.getColumn(i,"LABRR_HOUSE_PREPRTN");    // 근로자주택마련 (월 15만원)
			   
			   var SubscrptSvings2 = SubscrptSvings > 2400000 ? 2400000 : SubscrptSvings;
			   var HouseSubscrptGnrlz2 = HouseSubscrptGnrlz > 2400000 ? 2400000 : HouseSubscrptGnrlz;
			   var LabrrHousePreprtn2 = LabrrHousePreprtn > 1800000 ? 1800000 : LabrrHousePreprtn;
           }else{
			   var SubscrptSvings = this.ds_yndExcclcBsis.getColumn(i,"SUBSCRPT_SVINGS_14");           // 청약저축		(7천만원 이상은 14년 이전 가입분만 120만원 이하)
			   var HouseSubscrptGnrlz = this.ds_yndExcclcBsis.getColumn(i,"HOUSE_SUBSCRPT_GNRLZ_14");  // 주택청약종합	(7천만원 이상은 14년 이전 가입분만 120만원 이하)
			   var LabrrHousePreprtn = this.ds_yndExcclcBsis.getColumn(i,"LABRR_HOUSE_PREPRTN");    // 근로자주택마련 (월 15만원)
			   
			   var SubscrptSvings2 = SubscrptSvings > 1200000 ? 1200000 : SubscrptSvings;
			   var HouseSubscrptGnrlz2 = HouseSubscrptGnrlz > 1200000 ? 1200000 : HouseSubscrptGnrlz;
			   var LabrrHousePreprtn2 = LabrrHousePreprtn > 1800000 ? 1800000 : LabrrHousePreprtn;
           }
           var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y130001" );        // 주택임차월리금상환 + 주택저축 한도액
		   var LMT_STD = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");                 // 한도금액 
           var DDC_RT = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_RT");                      // 공제율 
          
           SubscrptSvings2 = parseInt(SubscrptSvings2) * parseInt(DDC_RT) /100;               // 청약저축
           HouseSubscrptGnrlz2 = parseInt(HouseSubscrptGnrlz2) * parseInt(DDC_RT) /100;       // 주택청약종합
           LabrrHousePreprtn2 = parseInt(LabrrHousePreprtn2) * parseInt(DDC_RT) /100;         // 근로자주택마련
           
           // 주택 한도 계산 min(300만, 300만-주택차임금)
           if(PnintRpay < LMT_STD){
				LMT_STD = PnintRpay;
           }
           
           // 주택 한도 계산 min(min(300만, 300만-주택차임금), 종합한도)
           if(totLimtAmt < LMT_STD){
				LMT_STD = totLimtAmt;
           }
           
			if(LMT_STD > 0){
                 if(SubscrptSvings2 > LMT_STD){
                      SubscrptSvings2 = LMT_STD;
                      LMT_STD = 0;
                 } else {
                      LMT_STD = parseInt(LMT_STD) - parseInt(SubscrptSvings2);                      
                 }                 
            } else {
                 SubscrptSvings2 = 0;
            }
            
            if(LMT_STD > 0){
                 if(HouseSubscrptGnrlz2 > LMT_STD){
                      HouseSubscrptGnrlz2 = LMT_STD;
                      LMT_STD = 0;
                 } else {
                      LMT_STD = parseInt(LMT_STD) - parseInt(HouseSubscrptGnrlz2);                      
                 }                 
            } else {
                 HouseSubscrptGnrlz2 = 0;
            }
            
            if(LMT_STD > 0){
                 if(LabrrHousePreprtn2 > LMT_STD){
                      LabrrHousePreprtn2 = LMT_STD;
                      LMT_STD = 0;
                 } else {
                      LMT_STD = parseInt(LMT_STD) - parseInt(LabrrHousePreprtn2);                      
                 }                 
            } else {
                 LabrrHousePreprtn2 = 0;
            }
            
			
			this.ds_yndExcclcDetail.setColumn(0,"SUBSCRPT_SVINGS", SubscrptSvings2);           // 청약저축
            this.ds_yndExcclcDetail.setColumn(0,"HOUSE_SUBSCRPT_GNRLZ", HouseSubscrptGnrlz2);  // 주택청약종합
            this.ds_yndExcclcDetail.setColumn(0,"LABRR_HOUSE_PREPRTN", LabrrHousePreprtn2);    // 근로자주택마련
            
            var HouseSubHap2 = parseInt(SubscrptSvings2) + parseInt(HouseSubscrptGnrlz2) + parseInt(LabrrHousePreprtn2);
                     
           this.ds_yndExcclcDetail.setColumn(0,"HOUSE_PREPRTN_SVINGS", HouseSubHap2); 
            
         
           // 투자조합출자
           var InvtMxtr  = this.ds_yndExcclcBsis.getColumn(i,"INVT_MXTR");      // 벤처 2015년 이후
           var InvtMxtr2 = this.ds_yndExcclcBsis.getColumn(i,"INVT_MXTR_2");    // 벤처 2014년 투자분
           var InvtMxtr3 = this.ds_yndExcclcBsis.getColumn(i,"INVT_MXTR_3");    // 일반 2014년 이후 투자분
           
           var nRow    = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y140002" );      // 투자조합출자 2015년도 이후, 한도율
		   var DDC_RT  = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_RT");                   // 공제율 
           var LMT_RT  = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_RT");                   // 한도율 (종합소득금액기준)

           var InvtMxtrLmt = parseInt(ErnmAmount) * parseInt(LMT_RT) /100 ;    // 한도금액
			
           // 벤처 2015년도 이후
           var InvtMxtrDdc = 0 ;       // 공제금액
           if(InvtMxtr <= 15000000) {
                InvtMxtrDdc = InvtMxtr;
           } else if(InvtMxtr <= 50000000){
                InvtMxtrDdc = 15000000 + ((InvtMxtr-15000000)*0.5);
           } else {
				InvtMxtrDdc = 15000000 + 17500000 + ((InvtMxtr-50000000)*0.3);
           }
           
           // 벤처 2014년도 
           var InvtMxtr2Ddc = 0 ;       // 공제금액
           if(InvtMxtr2 <= 50000000){
                InvtMxtr2Ddc = InvtMxtr2 * 0.5;
           } else {
				InvtMxtr2Ddc = 25000000 + ((InvtMxtr2-50000000)*0.3);
           }
           
           // 일반 2014년도 이후
           var InvtMxtr3Ddc = InvtMxtr3 * 0.1 ;       // 공제금액
           
           var InvtMxtrIncomeDdc = parseInt(InvtMxtrDdc) + parseInt(InvtMxtr2Ddc) + parseInt(InvtMxtr3Ddc);
           
           if(InvtMxtrIncomeDdc > InvtMxtrLmt) {
                var InvtMxtrIncomeDdc = InvtMxtrLmt;
           }
           
           this.ds_yndExcclcDetail.setColumn(0,"INVT_MXTR_INCOME_DDC", InvtMxtrIncomeDdc);  
           
           
        // 신용카드 사용액
           var Credtcard_ord = parseInt(this.ds_yndExcclcBsis.getColumn(i,"CREDTCARD"));         // 신용카드
           var Credtcard     = parseInt(this.ds_yndExcclcBsis.getColumn(i,"CREDTCARD"));         // 신용카드
           var Dbcd          = parseInt(this.ds_yndExcclcBsis.getColumn(i,"DBCD"));              // 직불카드           
           var CashRcipt     = parseInt(this.ds_yndExcclcBsis.getColumn(i,"CASH_RCIPT"));        // 현금영수증
           var PbtrnspUse    = parseInt(this.ds_yndExcclcBsis.getColumn(i,"PBTRNSP_USE"));       // 대중교통이용
           var TrditMrktUse  = parseInt(this.ds_yndExcclcBsis.getColumn(i,"TRDIT_MRKT_USE"));    // 전통시장사용
           
           var DbcdCashRcipt = parseInt(Dbcd) + parseInt(CashRcipt);                   // 현금영수증등 
          
           var nRow       = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y140010" );      // 신용카드
		   var DDC_RT     = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_RT");                   // 공제율 
		   var LMT_AMOUNT = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");               // 한도금액 
           var nRow2      = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y140011" );      // 현금, 직불, 선불
		   var DDC_RT2    = this.ds_yndExcclcDdcStdr.getColumn(nRow2,"DDC_RT");                  // 공제율 
		   var nRow3      = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y140012" );      // 대중교통이용
		   var DDC_RT3    = this.ds_yndExcclcDdcStdr.getColumn(nRow3,"DDC_RT");                  // 공제율 
		   var nRow4      = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y140013" );      // 전통시장사용
		   var DDC_RT4    = this.ds_yndExcclcDdcStdr.getColumn(nRow4,"DDC_RT");                  // 공제율 
		  
		   // 전통시장사용분 1
		   var TrditMrktUse2 = parseInt(TrditMrktUse) * parseInt(DDC_RT4) / 100;		   
		   // 대중교통이용분 2
		   var PbtrnspUse2 = parseInt(PbtrnspUse) * parseInt(DDC_RT3) / 100;
		   // 현금영수증, 직불, 선불 3
		   var CashRcipt2 = parseInt(DbcdCashRcipt) * parseInt(DDC_RT2) / 100;
           // 신용카드사용분 4
		   var Credtcard2 = parseInt(Credtcard) * parseInt(DDC_RT) / 100;
		  
		   // 해당금액 5
		   if(ErnmAmount25 <= Credtcard_ord) {
				var LmtUseAmt = parseInt(ErnmAmount25) * 0.15;
		   } else {
				var LmtUseAmt = parseInt(Credtcard_ord) * 0.15  + ( parseInt(ErnmAmount25) - parseInt(Credtcard_ord) ) * 0.3;
		   }
		    
		   //전전년도 대비 전년도 본인 신용카드금액이 클 경우
		   //16년 상반기 전통시장 사용분,대중교통이용분,체크카드,현금영수증 본인사용액이 14년 사용분의 50%보다 증가한 금액
		   var CdAmount_1 = this.ds_yndExcclcBsis.getColumn(i,"CREDTCARD_ADIT_USE_AMOUNT");
		    
		   var Credtcard2014 = parseInt(TrditMrktUse2) + parseInt(PbtrnspUse2) + parseInt(CashRcipt2) + parseInt(Credtcard2) - parseInt(LmtUseAmt) + parseInt(CdAmount_1)   // 신용카드 소득공제금액
		 
		   //공제금액이 0보다 작을경우 0
		   Credtcard2014 = Credtcard2014 < 0 ? 0 : Credtcard2014;
		   
		   // 총급여액의 20% 와 한도금액 중 적은 금액이 한도
		   if( ErnmAmount20_Tot > LMT_AMOUNT ) {
		        var LmtAmount1 = LMT_AMOUNT;
		   } else {
		        var LmtAmount1 = ErnmAmount20_Tot;
		   }
		   
		   if(Credtcard2014 > LmtAmount1){
		         Credtcard2014_1 = parseInt(Credtcard2014) - parseInt(LmtAmount1);   // 한도초과금액
		         Credtcard2014 = LmtAmount1;
		         // 100만원 한도 
		         if(PbtrnspUse2 > 1000000){
		              PbtrnspUse2 = 1000000;
		         }
		         if(TrditMrktUse2 > 1000000){
		              TrditMrktUse2 = 1000000;
		         }
		         
		         Credtcard2014_2 = parseInt(PbtrnspUse2) + parseInt(TrditMrktUse2);    // 전통시장사용액 + 대중교통이용액
		         if(Credtcard2014_1 > Credtcard2014_2) {
		              var Credtcard2014_3 = Credtcard2014_2;
		         } else {
		              var Credtcard2014_3 = Credtcard2014_1;
		         }
		         
		         var Credtcard2014_4 = parseInt(Credtcard2014) + parseInt(Credtcard2014_3);   //신용카드 등 공제금액
		         if(Credtcard2014_4 > 5000000){
		              Credtcard2014_4 = 5000000;
		         }	         
		   } else {
		         var Credtcard2014_4 = Credtcard2014;
		   }		   
		   this.ds_yndExcclcDetail.setColumn(0,"CREDTCARD_DDC", Credtcard2014_4);     		   
		  
           // 목돈안드는 전세 이자상환액(농어촌특별세 과세대상) 삭제
           /*var LfstsIntr  = this.ds_yndExcclcBsis.getColumn(i,"LFSTS_INTR");                  // 목돈안드는 전세이자
           
           var nRow       = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y140007" );   // 목돈안드는 전세이자 공제기준
		   var DDC_RT     = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_RT");                // 공제율 
           var LMT_AMOUNT = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");            // 한도금액
           
           LfstsIntr = parseInt(LfstsIntr) * parseInt(DDC_RT) / 100 ;
           if(LfstsIntr > LMT_AMOUNT) {
                LfstsIntr = LMT_AMOUNT;
           }
           */
           var LfstsIntr  = 0;
           this.ds_yndExcclcDetail.setColumn(0,"LFSTS_INTR", LfstsIntr);
           
           // 장기집합투자증권저축(농어촌특별세 과세대상)
           var InorgStockSvings  = this.ds_yndExcclcBsis.getColumn(i,"INORG_SCRITS_SVINGS");  // 장기집합투자증권저축
           
           var nRow       = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y140014" );   // 장기집합투자증권저축 공제기준
		   var DDC_RT     = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_RT");                // 공제율 
           var LMT_AMOUNT = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");            // 한도금액    
         
           InorgStockSvings = parseInt(InorgStockSvings) * parseInt(DDC_RT) / 100 ;
           if(InorgStockSvings > LMT_AMOUNT) {
                InorgStockSvings = LMT_AMOUNT;
           }
           
           if(Tot_Amt > 80000000){	//총급여액 8천만원 이상은 0원
				InorgStockSvings = 0;
           }
           
           this.ds_yndExcclcDetail.setColumn(0,"INORG_STOCK_SVINGS", InorgStockSvings);   
           
           // 그밖의 소득공제계
           // 개인저축연금 + 주택마련저축 + 투자조합출자 + 신용카드 + 목돈안드는 전세이자 + 장기집합투자증권저축
           var EtcAmountSum = parseInt(IdnvdlAnntySvingsDdc2) + parseInt(HouseSubHap2) + parseInt(InvtMxtrIncomeDdc) + 
                              parseInt(Credtcard2014_4) + parseInt(LfstsIntr) + parseInt(InorgStockSvings);
           
           
           this.ds_yndExcclcDetail.setColumn(0,"ETC_INCOME_DDC_SM", EtcAmountSum);  
           
       // ========= 소득공제 종합한도 초과액	 =========== 	       
	       
	       var Lmt_1 = parseInt(SpecialDdc) - parseInt(Hlthins) -  parseInt(Emply) -  parseInt(CntrCyfd);   // 주택임차차입금원리금상환액, 장기주택저당차입금이자상환액
	       var Lmt_2 = 0//InvtMxtr2Ddc3;		// 투자조합출자 2014년 이후 제외
	       var Lmt_3 = parseInt(HouseSubHap2);	//주택마련저축공제  parseInt(SubscrptSvings) + parseInt(HouseSubscrptGnrlz) ;  
	       var Lmt_4 = InorgStockSvings;		//장기집합투자증권저축
	       var Lmt_5 = Credtcard2014_4;			//신용카드 등
	   
	       var Lmt_Sum = parseInt(Lmt_1) + parseInt(Lmt_2) + parseInt(Lmt_3) + parseInt(Lmt_4) + parseInt(Lmt_5);
	       Lmt_Sum = parseInt(Lmt_Sum) - 25000000;
	       if(Lmt_Sum < 0){
	            Lmt_Sum = 0;
	       }
      
           this.ds_yndExcclcDetail.setColumn(0,"GNRLZ_LMT_EXCESS_AMOUNT", Lmt_Sum); 
       
       // ========= 종합소득 과세표준 =========== 	
          var GnrlzStdtax = parseInt(DdctIncomeAmount2) - parseInt(EtcAmountSum) + parseInt(Lmt_Sum);    // 차감소득금액 - 그밖의 소득공제 + 종합한도초과액
          if(GnrlzStdtax < 0 || !GnrlzStdtax) {
               GnrlzStdtax =0;
          }
          this.ds_yndExcclcDetail.setColumn(0,"GNRLZ_STDTAX", GnrlzStdtax); 
                  
         // 연말정산 소득세율정보
		 this.ds_incomeTaxrt.clearData();
		 this.ds_cond02.clearData();	
		 this.ds_cond02.addRow();	
		 this.ds_cond02.setColumn(0,"EXCCLC_YEAR",this.div_search.spn_excclcYear.value);
		 this.ds_cond02.setColumn(0,"T_AMT",GnrlzStdtax);
			 
		 var strSvcId       = "selectYndExcclcDetail5List";   
		 var sController   	= "hsco/mis/sal/SAL050206/selectYndExcclcDetail5List.do";
		 var sInDatasets   	= "input7=ds_cond02";
		 var sOutDatasets  	= "ds_incomeTaxrt=output7";
		 var argument = "";
		 var callbackfunc = "";
		 var showprogress = "";
		 var bAsync = false;
		 Ex.core.tran(this, strSvcId, sController, sInDatasets, sOutDatasets, argument, callbackfunc, showprogress, bAsync);  
          
         var OutTaxx = this.ds_incomeTaxrt.getColumn(0,"OUT_AMT"); 
         
         // 산출세액
         this.ds_yndExcclcDetail.setColumn(0,"COMPUT_TAXAMT", OutTaxx);
          
      // ========= 세액감면 ===========    
         // 근로소득세액공제
         if(OutTaxx <= 1300000) {
              var TaxxDdc1 = parseInt(OutTaxx) * 55 /100;         
         } else {
              var TaxxDdc_1 = (parseInt(OutTaxx) - 1300000) * 30 /100;
              var TaxxDdc1 = 715000 + parseInt(TaxxDdc_1);
         }
         
         var TaxxDdcLmt = 0;
         if(Tot_Amt <= 33000000 ) {
              if(TaxxDdc1 > 740000) {
                   TaxxDdcLmt = 740000;
              }
         } else if(Tot_Amt <= 70000000) {
              var TaxxDdcLmt = 740000 - ((parseInt(Tot_Amt) - 33000000) * 0.008)
              if(TaxxDdcLmt < 660000) {
                   TaxxDdcLmt = 660000;
              }
         } else {
              var TaxxDdcLmt = 660000 - ((parseInt(Tot_Amt) - 70000000) * 0.5)
              if(TaxxDdcLmt < 500000) {
                   TaxxDdcLmt = 500000;
              }
         }
         
         if(TaxxDdcLmt < TaxxDdc1){
			TaxxDdc1 = TaxxDdcLmt;
		 }
         
         // 근로소득세액공제
         this.ds_yndExcclcDetail.setColumn(0,"ERNM_TAXAMT_DDC_AMOUNT", TaxxDdc1);
         
         // 자녀세액공제
         var Mnych = this.ds_yndExcclcBsis.getColumn(i,"MNYCH"); 
         
         var nRow       = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y150001" );     // 자녀세액공제공제기준
		 var DDC_AMOUNT = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_AMOUNT");              // 공제금액 
		 
		 var nRow2       = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y150002" );    // 자녀세액공제공제기준
		 var DDC_AMOUNT2 = this.ds_yndExcclcDdcStdr.getColumn(nRow2,"DDC_AMOUNT");            // 공제금액 
         
         if(Mnych < 3) {
              var Mnych_amt = parseInt(Mnych) * parseInt(DDC_AMOUNT);
         } else {
              var Mnych_amt_1 = 2 * parseInt(DDC_AMOUNT);
              var Mnych_1 = parseInt(Mnych) - 2;
              var Mnych_amt = parseInt(Mnych_amt_1) + parseInt(Mnych_1) * parseInt(DDC_AMOUNT2);
         }
         
         // 자녀세액공제
         this.ds_yndExcclcDetail.setColumn(0,"MNYCH_DDC", Mnych_amt);
         
         // 6세이하세액공제
         var CHLDRN_6_BELOW = this.ds_yndExcclcBsis.getColumn(i,"CHLDRN_6_BELOW"); 
         var nRow       = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y150003" );     // 6세이하세액공제기준
		 var DDC_AMOUNT = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_AMOUNT");              // 공제금액
		 if(CHLDRN_6_BELOW > 1) {
              var Chldrn6_amt = (parseInt(CHLDRN_6_BELOW)-1) * parseInt(DDC_AMOUNT);
         }  else {
              var Chldrn6_amt = 0;
         }
         // 6세이하세액공제
         this.ds_yndExcclcDetail.setColumn(0,"TAXAMT_DDC_6_BELOW", Chldrn6_amt); 
         
         // 출산·입양 공제
         var CHLDBRTH_ADP_CHLDRN = this.ds_yndExcclcBsis.getColumn(i,"CHLDBRTH_ADP_CHLDRN"); 
         var nRow       = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y150004" );     // 출산·입양 공제
		 var DDC_AMOUNT = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_AMOUNT");              // 공제금액
		 if(CHLDBRTH_ADP_CHLDRN > 0) {
              var adpChldrn_amt = parseInt(CHLDBRTH_ADP_CHLDRN) * parseInt(DDC_AMOUNT);
         }  else {
              var adpChldrn_amt = 0;
         }
         // 출산·입양 공제
         this.ds_yndExcclcDetail.setColumn(0,"CHLDBRTH_ADP_DDC", adpChldrn_amt); 
      

         // 연금저축세액공제
         var AnntySvingsDdc = this.ds_yndExcclcBsis.getColumn(i,"ANNTY_SVINGS_DDC"); 
         
         var nRow       = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y160001" );   // 연금저축공제기준
		 var DDC_RT     = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_RT");                // 공제금액 
         var LMT_AMOUNT = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");            // 한도금액 
       
		 if(Tot_Amt <= 55000000){	//총급여 5천5백만이하는 15%
			DDC_RT = 15;
		 }
		 
		 if(AnntySvingsDdc > LMT_AMOUNT) {
               AnntySvingsDdc = LMT_AMOUNT;
         }
         
         var AnntySvingsDdc2 = parseInt(AnntySvingsDdc) * parseInt(DDC_RT) /100;
         
         // 연금저축세액공제
         this.ds_yndExcclcDetail.setColumn(0,"ANNTY_SVINGS_INCOME_DDC", AnntySvingsDdc);   // 연금저축공제
         this.ds_yndExcclcDetail.setColumn(0,"ANNTY_SVINGS_TAXAMT", AnntySvingsDdc2);      // 연금저축세액공제
         
         
         // 퇴직연금계좌세액공제
         var RETIRE_ANNTY = this.ds_yndExcclcBsis.getColumn(i,"RETIRE_ANNTY"); 
         
         var nRow       = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y170010" );     // 퇴직연금공제기준
		 var LMT_AMOUNT = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");              // 한도금액
		 var DDC_RT     = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_RT");                  // 공제율 
		 
		 LMT_AMOUNT = LMT_AMOUNT - AnntySvingsDdc;			//퇴직연금 한도액 - 연금저축 공제액
		 
		 if(Tot_Amt <= 55000000){	//총급여 5천5백만이하는 15%
			DDC_RT = 15;
		 }
		
		 if(RETIRE_ANNTY > LMT_AMOUNT){
		      RETIRE_ANNTY = LMT_AMOUNT;
		 }
		 
		 if(RETIRE_ANNTY > 0){
		      var RETIRE_ANNTY_DDC = parseInt(RETIRE_ANNTY) * parseInt(DDC_RT) /100;
		 } else {
		      var RETIRE_ANNTY_DDC =0;
		 }
		 
		 this.ds_yndExcclcDetail.setColumn(0,"RETIRE_ANNTY", RETIRE_ANNTY); 
		 this.ds_yndExcclcDetail.setColumn(0,"RETIRE_ANNTY_DDC", RETIRE_ANNTY_DDC); 
		 
         
         // 보장성보험료세액공제
         var GrntInsrnc = this.ds_yndExcclcBsis.getColumn(i,"GRNT_INSRNC"); 
         
         var nRow       = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y170001" );   // 보장성보험료공제기준
		 var DDC_RT     = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_RT");                // 공제금액 
         var LMT_AMOUNT = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");            // 한도금액 
       
         if(GrntInsrnc > LMT_AMOUNT) {
               GrntInsrnc = LMT_AMOUNT;
         }
         
         var GrntInsrnc2 = parseInt(GrntInsrnc) * parseInt(DDC_RT) /100;
		 
         // 보장성보험세액공제
         this.ds_yndExcclcDetail.setColumn(0,"GRNT_IRNCF", GrntInsrnc);     // 보장성보험공제
         this.ds_yndExcclcDetail.setColumn(0,"IRNCF_TAXAMT", GrntInsrnc2);     // 보장성보험세액공제
         
		 
         // 장애인전용보장성보험
         var DspsnDvrInsrnc = this.ds_yndExcclcBsis.getColumn(i,"DSPSN_DVR_INSRNC"); 
         
         var nRow       = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y170002" );   // 장애인보장성보험료공제기준
		 var DDC_RT     = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_RT");                // 공제금액 
         var LMT_AMOUNT = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");            // 한도금액 
       
         if(DspsnDvrInsrnc > LMT_AMOUNT) {
               DspsnDvrInsrnc = LMT_AMOUNT;
         }
         
         var DspsnDvrInsrnc2 = parseInt(DspsnDvrInsrnc) * parseInt(DDC_RT) /100;
         
         // 장애인보장성보험세액공제
         this.ds_yndExcclcDetail.setColumn(0,"DSPSN_GRNT_INSRNC", DspsnDvrInsrnc);          // 장애인보장성보험공제
         this.ds_yndExcclcDetail.setColumn(0,"DSPSN_GRNT_INSRNC_DDC", DspsnDvrInsrnc2);     // 장애인보장성보험세액공제    
         
         
         // 의료비세액공제
         var GnrlMcp = this.ds_yndExcclcBsis.getColumn(i,"GNRL_MCP"); 								//의료비_그외부양자
         var SelfCoursTroblMcp = this.ds_yndExcclcBsis.getColumn(i,"SELF_COURS_TROBL_MCP"); 		//의료비_본인,장애, 만65세이상, 난임시술비
         
         var nRow       = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y170004" );   // 일반의료비공제기준
		 var DDC_RT     = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_RT");                // 공제율 
         var LMT_AMOUNT = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");            // 한도금액   
         
         if(GnrlMcp < ErnmAmount03) {
              var SelfCoursTroblMcp3 = parseInt(SelfCoursTroblMcp) - (parseInt(ErnmAmount03) - parseInt(GnrlMcp));
         } else {
			GnrlMcp = parseInt(GnrlMcp) - parseInt(ErnmAmount03);
			if(GnrlMcp > LMT_AMOUNT) {
				GnrlMcp = LMT_AMOUNT;
			}
            var SelfCoursTroblMcp3 = parseInt(SelfCoursTroblMcp) + parseInt(GnrlMcp);
         }
         
         var SelfCoursTroblMcp4 = parseInt(SelfCoursTroblMcp3) * parseInt(DDC_RT) /100;    // 본인경로장애의료비세액공제
         
         var Mcp = parseInt(SelfCoursTroblMcp3);     // 의료비공제금액
         var Mcp2 = parseInt(SelfCoursTroblMcp4);    // 의료비세액공제금액       
           
         if(Mcp < 0  || !Mcp ) {
              Mcp = 0;
         }  
         if(Mcp2 < 0  || !Mcp2 ) {
              Mcp2 = 0;
         }  
         
         // 의료비세액공제
         this.ds_yndExcclcDetail.setColumn(0,"MCP_DDC", Mcp);         // 의료비공제
         this.ds_yndExcclcDetail.setColumn(0,"MCP_TAXAMT", Mcp2);     // 의료비세액공제
         
         // 교육비세액공제
         var SelfEdcct = this.ds_yndExcclcBsis.getColumn(i,"SELF_EDCCT");      // 본인교육비
         var EshlBefEdcct = this.ds_yndExcclcBsis.getColumn(i,"ESHL_BFE_EDCCT");      // 취학전 아동
         var GnrlEdcct = this.ds_yndExcclcBsis.getColumn(i,"GNRL_EDCCT");      // 학생교육비
         var UnivEdcct = this.ds_yndExcclcBsis.getColumn(i,"UNIV_EDCCT");      // 대학생교육비
         var DspsnEdcct = this.ds_yndExcclcBsis.getColumn(i,"DSPSN_EDCCT");    // 장애인교육비
         
         
         var nRow       = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y170005" );   // 교육비공제기준
		 var DDC_RT     = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_RT");                // 공제율       
        
         var Edcct = parseInt(SelfEdcct) + parseInt(EshlBefEdcct) + parseInt(GnrlEdcct) + parseInt(UnivEdcct) + parseInt(DspsnEdcct);
         var SelfEdcct2  = Edcct * DDC_RT / 100;    // 교육비 세액공제
         
         if(SelfEdcct2 < 0  || !SelfEdcct2 ) {
              SelfEdcct2 = 0;
         }  
         
         // 교육비세액공제
         this.ds_yndExcclcDetail.setColumn(0,"EDCCT_DDC", Edcct);             // 교육비공제
         this.ds_yndExcclcDetail.setColumn(0,"EDCCT_TAXAMT", SelfEdcct2);     // 교육비세액공제
         
         // 정치자금기부금    
         var PolitcCptalCntr = parseInt(this.ds_yndExcclcBsis.getColumn(i,"POLITC_CPTAL_CNTR"));      // 정치자금기부금
         var Politc = 90909;	//10만원 이하 최대치
         var Politc2 = 4485000;	//3천만원 이하 최대치
         if(PolitcCptalCntr <= 100000) {
              var PolitcCptalCntr1 = parseInt(PolitcCptalCntr) * (100/110);
         } else if(PolitcCptalCntr <= 30000000) {
              var PolitcCptalCntr1 = Politc;
              var PolitcCptalCntr2 = parseInt(PolitcCptalCntr) - 100000;
              if(PolitcCptalCntr > ErnmAmount){
                  PolitcCptalCntr2 = parseInt(ErnmAmount) * 15 / 100;
              }else {
                  PolitcCptalCntr2 = parseInt(PolitcCptalCntr2) * 15 / 100;    
              }
              
         } else {
              var PolitcCptalCntr1 = Politc;
              var PolitcCptalCntr2 = parseInt(PolitcCptalCntr) - 30000000;
              if(PolitcCptalCntr > ErnmAmount){
                  PolitcCptalCntr2 = parseInt(ErnmAmount) * 25 / 100 + parseInt(Politc2);
              }else {
                  PolitcCptalCntr2 = parseInt(PolitcCptalCntr2) * 25 / 100 + parseInt(Politc2);
              }
         }
         
         if(PolitcCptalCntr1 < 0  || !PolitcCptalCntr1 ) {
              PolitcCptalCntr1 = 0;
         }
         if(PolitcCptalCntr2 < 0  || !PolitcCptalCntr2 ) {
              PolitcCptalCntr2 = 0;
         }
		 
         // 정치자금기부금세액공제
         if(PolitcCptalCntr <= 100000) {
             this.ds_yndExcclcDetail.setColumn(0,"CNTR_POLITC_CPTAL", PolitcCptalCntr);             // 정치자금10만원이하공제
             this.ds_yndExcclcDetail.setColumn(0,"CNTR_POLITC_TAXAMT", PolitcCptalCntr1);           // 정치자금10만원이하세액공제
         } else {
			 this.ds_yndExcclcDetail.setColumn(0,"CNTR_POLITC_CPTAL", 100000);             // 정치자금10만원이하공제
             this.ds_yndExcclcDetail.setColumn(0,"CNTR_POLITC_TAXAMT", PolitcCptalCntr1);           // 정치자금10만원이하세액공제
             this.ds_yndExcclcDetail.setColumn(0,"CNTR_POLITC_UP", PolitcCptalCntr-100000);                // 정치자금10만원초과공제
             this.ds_yndExcclcDetail.setColumn(0,"CNTR_POLITC_UP_TAXAMT", PolitcCptalCntr2);        // 정치자금10만원초과세액공제
         }
         
         // 법정기부금    
         var LegalCntr = this.ds_yndExcclcBsis.getColumn(i,"LEGAL_CNTR");      // 법정기부금  
         var LegalCntrLmt = parseInt(ErnmAmount) - parseInt(PolitcCptalCntr);  // 한도금액
         
         if(LegalCntr > LegalCntrLmt) {
              LegalCntr = LegalCntrLmt;
         }
         
         if(LegalCntr > 20000000) {              
              var LegalCntr2 = 3000000 + ((parseInt(LegalCntr) - 20000000) * 0.25);
         } else {
              var LegalCntr2 = parseInt(LegalCntr) * 0.15;
         }
         
         if(LegalCntr2 < 0  || !LegalCntr2 ) {
              LegalCntr2 = 0;
         }
         
         // 법정기부금공제
         if(!LegalCntr){LegalCntr =0}
         this.ds_yndExcclcDetail.setColumn(0,"LEGAL_CNTR", LegalCntr);             // 법정기부금공제
         this.ds_yndExcclcDetail.setColumn(0,"LEGAL_CNTR_TAXAMT", LegalCntr2);     // 법정기부금세액공제
         
         
         // 지정기부금    
         var AppnCntr = this.ds_yndExcclcBsis.getColumn(i,"APPN_CNTR");      // 지정기부금 
         var EndCntr = this.ds_yndExcclcBsis.getColumn(i,"END_CNTR");        // 종교단체지정기부금 
         if(EndCntr > 0) {
             var AppnCntrLmt = (parseInt(ErnmAmount) - parseInt(PolitcCptalCntr) - parseInt(LegalCntr)) * 0.2;	// (근로소득금액-기부금등합계액)×20%
             if(AppnCntr < AppnCntrLmt){			// MIN ( (근로소득금액-기부금등합계액)×20%, 종교단체 외의 기부금)
                  var AppnCntrLmt2 = AppnCntr;             
             } else {
                  var AppnCntrLmt2 = AppnCntrLmt;
             }
             
             // 종교외 공제한도 : MIN ( (근로소득금액-기부금등합계액)×20%, 종교단체 외의 기부금) + (근로소득금액-기부금등합계액*)×10%
             AppnCntrLmt2 = AppnCntrLmt2 + ((parseInt(ErnmAmount) - parseInt(PolitcCptalCntr) - parseInt(LegalCntr)) * 0.1);
             
             var AppnCntr2 = parseInt(AppnCntr);
             var EndCntr2 = parseInt(EndCntr);
             if(AppnCntr2 > AppnCntrLmt2){
                   AppnCntr2 = AppnCntrLmt2;
             }
             
             // 종교 공제한도 : MIN ( (근로소득금액-기부금등합계액)×20%, 종교단체 외의 기부금) + (근로소득금액-기부금등합계액*)×10% - 종교단체 외의 기부금
             var EndCntrLmt2 = AppnCntrLmt2 - AppnCntr2;
             if(EndCntr2 > EndCntrLmt2){
                   EndCntr2 = EndCntrLmt2;
             }
             
         } else {
			 var EndCntr2 = 0;
             var AppnCntrLmt = (parseInt(ErnmAmount) - parseInt(PolitcCptalCntr) - parseInt(LegalCntr)) * 0.3; 
             if(AppnCntr > AppnCntrLmt){
                   var AppnCntr2 = AppnCntrLmt;
             } else {
                   var AppnCntr2 = AppnCntr;
             }
         }
                 
         if(parseInt(AppnCntr2) + parseInt(LegalCntr) > 20000000) {
		      if(LegalCntr > 20000000){
				var AppnCntr2Ddc = (parseInt(AppnCntr2) - 20000000) * 0.3;
		      }else{
				var AppnCntr2Ddc = ((20000000 - parseInt(LegalCntr)) * 0.15) + ((parseInt(AppnCntr2) + parseInt(LegalCntr) - 20000000) * 0.3);
		      }
         } else {
              var AppnCntr2Ddc = parseInt(AppnCntr2) * 0.15;
         }
         
         if(parseInt(EndCntr2) + parseInt(AppnCntr2) + parseInt(LegalCntr) > 20000000) {
		      if(parseInt(AppnCntr2) + parseInt(LegalCntr) > 20000000){
				var EndCntr2Ddc = (parseInt(EndCntr2) - 20000000) * 0.3;
		      }else{
				var EndCntr2Ddc = ((20000000 - parseInt(AppnCntr2) - parseInt(LegalCntr)) * 0.15) + ((parseInt(EndCntr2) + parseInt(AppnCntr2) + parseInt(LegalCntr) - 20000000) * 0.3);
		      }
         } else {
              var EndCntr2Ddc = parseInt(EndCntr2) * 0.15;
         }
         
         if(EndCntr2Ddc < 0  || !EndCntr2Ddc ) {
              EndCntr2Ddc = 0;
         }
         
         // 지정기부금공제
         if(!AppnCntr2){AppnCntr2 =0}
         this.ds_yndExcclcDetail.setColumn(0,"APPN_CNTR", AppnCntr2);               // 지정기부금공제
         this.ds_yndExcclcDetail.setColumn(0,"APPN_CNTR_TAXAMT", AppnCntr2Ddc);     // 지정기부금세액공제
         if(!EndCntr2){EndCntr2 =0}
         this.ds_yndExcclcDetail.setColumn(0,"END_CNTR", EndCntr2);               // 지정기부금공제
         this.ds_yndExcclcDetail.setColumn(0,"END_CNTR_TAXAMT", EndCntr2Ddc);     // 지정기부금세액공제
         
         // 기부금 세액공제
         var CntrDdc1 = parseInt(PolitcCptalCntr1) + parseInt(PolitcCptalCntr2) + parseInt(LegalCntr2) + parseInt(AppnCntr2Ddc) + parseInt(EndCntr2Ddc);
         this.ds_yndExcclcDetail.setColumn(0,"CNTR_DDC", CntrDdc1);               // 지정기부금공제
         
         
         // 특별세액공제계
         var TaxxSum = parseInt(GrntInsrnc2) + parseInt(Mcp2) + parseInt(SelfEdcct2) + parseInt(PolitcCptalCntr1) + 
                       parseInt(PolitcCptalCntr2) + parseInt(LegalCntr2) + parseInt(AppnCntr2Ddc) + parseInt(EndCntr2Ddc)
                        + parseInt(DspsnDvrInsrnc2)
                       ;
         
         this.ds_yndExcclcDetail.setColumn(0,"SPECL_TAXAMT_DDC_SM", TaxxSum);       // 특별세액공제계      
         
         // 특별세액공제계 (정치자금 기부금 제외)
         var TaxxSum2 = parseInt(GrntInsrnc2) + parseInt(Mcp2) + parseInt(SelfEdcct2) + parseInt(LegalCntr2) + parseInt(AppnCntr2Ddc) + parseInt(EndCntr2Ddc);                       
                       
         // 월세액   
         var MthtAm = this.ds_yndExcclcBsis.getColumn(i,"MTHT_AM");                             // 월세액
         var nRow       = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y190001" );       // 월세액공제기준
		 var DDC_RT = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_RT");                        // 공제율
         var LMT_AMOUNT = this.ds_yndExcclcDdcStdr.getColumn(nRow,"LMT_AMOUNT");                // 한도금액  
       
         if(MthtAm > LMT_AMOUNT) {
              MthtAm = LMT_AMOUNT;
         }
         
         if(Tot_Amt > 70000000){	//총급여 7천만원 이상은 0원
			MthtAm = 0;
		 }
       
         var MthtAmDdc = parseInt(MthtAm) * parseInt(DDC_RT) /100;                                   // 월세액 세액공제금액
         
         this.ds_yndExcclcDetail.setColumn(0,"MTHT_AM", MthtAm);                 // 월세액 세액금액
         this.ds_yndExcclcDetail.setColumn(0,"MTHT_AM_TAXXAMT", MthtAmDdc);      // 월세액 세액공제금액
         
         // 표준세액공제 (특별소득공제, 특별세액공제, 월세액 세액공제 == 0)
         if( SpecialDdc == 0 && TaxxSum2 == 0  && MthtAm == 0) {
              var nRow       = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y180001" );       // 표준세액공제기준
		      var DDC_AMOUNT = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_AMOUNT");                // 공제금액 
		      var StdDdc = DDC_AMOUNT
		      this.ds_yndExcclcDetail.setColumn(0,"STD_DDC", StdDdc);     		          
         } else {
              var StdDdc = 0; 
         }
         
         this.ds_yndExcclcDetail.setColumn(0,"STD_DDC", StdDdc);            // 표준세액공제
       
         // 주택차입금 이자상환액(농어촌 특별세)
         var HouseIntrRpayAmount = this.ds_yndExcclcBsis.getColumn(i,"HOUSE_HIRE_INTR_RPAY");  // 주택차임금 이자상환액
         var nRow       = this.ds_yndExcclcDdcStdr.findRow( "DDC_STDR_CODE", "Y190002" );        // 주택차임금 이자상환액 공제기준
		 var DDC_RT = this.ds_yndExcclcDdcStdr.getColumn(nRow,"DDC_RT");                         // 공제율
         
         //주택임차 원리금상환, 장기주택이자, 주택저축 > 0이면 공제 받을 수 없음
         if(parseInt(HouseSubHap2)+parseInt(BrrwIntrRpayAmount)+parseInt(PnintRpay) > 0){
			HouseIntrRpayAmount = 0;
         }
         var HouseIntrRpayAmountDdc = parseInt(HouseIntrRpayAmount) * parseInt(DDC_RT) / 100;
         this.ds_yndExcclcDetail.setColumn(0,"HOUSE_BRRW_AMOUNT", HouseIntrRpayAmountDdc);       // 주택차임금 이자상환액 세액공제금액
         
         // 세액공제계(근로소득세액공제+다자녀세액+6이하자녀+특별세액+표준세액+월세액세액+주택차임금세액) 
         // 추가 : 출산/입양 세액공제, 연금저축, 퇴직연금계좌
         var Taxxddcamt = parseInt(TaxxDdc1) + parseInt(Mnych_amt) +  parseInt(Chldrn6_amt) + parseInt(TaxxSum) + parseInt(StdDdc)  + parseInt(MthtAmDdc) + parseInt(HouseIntrRpayAmountDdc)
						  + parseInt(adpChldrn_amt) + parseInt(AnntySvingsDdc2) + parseInt(RETIRE_ANNTY_DDC) ;
         
         this.ds_yndExcclcDetail.setColumn(0,"TAXAMT_DDC_SM", Taxxddcamt);       // 세액공제계
         
    // ========= 결정세액 ===========    
     
		 /*if(InvtMxtrIncomeDdc > 0) {
				// 농어촌특별세(투자조합출자 + 목돈안드는전세이자 + 장기집합투자증권저축
				var Agspt1 = parseInt(InvtMxtrIncomeDdc);
				var GnrlzStdtax2 = parseInt(GnrlzStdtax) - parseInt(Agspt1);   // 종합소득 과세표준 - 소득공제액
				
				// 연말정산 소득세율정보2
				 this.ds_incomeTaxrt.clearData();
				 this.ds_cond02.clearData();	
				 this.ds_cond02.addRow();	
				 this.ds_cond02.setColumn(0,"EXCCLC_YEAR",this.spn_excclcYear.value);
				 this.ds_cond02.setColumn(0,"T_AMT",GnrlzStdtax2);
					 
				 var strSvcId       = "selectYndExcclcDetail5List";   
				 var sController   	= "hsco/mis/sal/SAL050206/selectYndExcclcDetail5List.do";
				 var sInDatasets   	= "input7=ds_cond02";
				 var sOutDatasets  	= "ds_incomeTaxrt=output7";
				 var argument = "";
				 var callbackfunc = "";
				 var showprogress = "";
				 var bAsync = false;
				 Ex.core.tran(this, strSvcId, sController, sInDatasets, sOutDatasets, argument, callbackfunc, showprogress, bAsync);  
				  
				 var OutTaxx2 = this.ds_incomeTaxrt.getColumn(0,"OUT_AMT");         
				 var AgsptTax = (parseInt(OutTaxx) - parseInt(OutTaxx2)) * 20 / 100;     // 농어촌 특별세 1   
         } else {
                 var AgsptTax = 0;
         }        
         */
         if(HouseIntrRpayAmountDdc > 0 ) {      
				 var AgsptTax2 = parseInt(HouseIntrRpayAmountDdc) * 20 / 100;       // 농어촌 특별세 2				 
         } else {
                 var AgsptTax2 = 0;
         }         
         /*if(!AgsptTax){
              AgsptTax =0;
         }*/
         var AgsptTax3 = parseInt(AgsptTax2);                   // 농어촌 특별세
         
         this.ds_yndExcclcDetail.setColumn(0,"DECSN_TAXAMT_AGSPT", AgsptTax3);       // 결정세액 농어촌 특별세
         
     
        // 산출세액 - 세액감면계 - 세액공제계        
        var OutTaxxResult = parseInt(OutTaxx) - parseInt(Taxxddcamt);
         if(OutTaxxResult < 0){
             OutTaxxResult = 0;
         }
        OutTaxxResult = parseInt(OutTaxxResult/10)*10;
        var OutTaxxResult2 = parseInt(OutTaxxResult/100)*10;                                    // 지방소득세
        
        this.ds_yndExcclcDetail.setColumn(0,"DECSN_TAXAMT_INCMTAX", OutTaxxResult);             // 결정세액 소득세
        this.ds_yndExcclcDetail.setColumn(0,"DECSN_TAXAMT_LCLTY_INCMTAX", OutTaxxResult2);      // 결정세액 지방소득세
        
        
        this.ds_yndExcclcDetail.setColumn(0,"NOW_LEV_PREARNGE_INCMTAX", OutTaxxResult);         // 주현징수예정 소득세
        this.ds_yndExcclcDetail.setColumn(0,"NOW_LEV_PREARNGE_LCLTY_INCMTAX", OutTaxxResult2);  // 주현징수예정 지방소득세
        this.ds_yndExcclcDetail.setColumn(0,"NOW_LEV_PREARNGE_AGSPT", AgsptTax3);               // 주현징수예정 농어촌 특별세
        
        var Cncmtax = this.ds_yndExcclcBsis.getColumn(i,"INCMTAX");                             // 기소득세 
        if(!Cncmtax){ Cncmtax = 0;}
        var LcltyCncmtax = this.ds_yndExcclcBsis.getColumn(i,"LCLTY_INCMTAX");                  // 기지방소득세 
        if(!LcltyCncmtax){ LcltyCncmtax = 0;}
     
        this.ds_yndExcclcDetail.setColumn(0,"NOW_LEV_RESULT_INCMTAX", Cncmtax);                 // 주현징수결과 소득세
        this.ds_yndExcclcDetail.setColumn(0,"NOW_LEV_RESULT_LCLTY_INCMTAX", LcltyCncmtax);      // 주현징수결과 지방소득세
        this.ds_yndExcclcDetail.setColumn(0,"NOW_LEV_RESULT_AGSPT", 0);                         // 주현징수결과 농어촌 특별세
        
        var BeforeWorkIncmtax = this.ds_yndExcclcDetail.getColumn(0,"BEFORE_WORK_INCMTAX");     // 종전 소득세
        if(!BeforeWorkIncmtax){ BeforeWorkIncmtax = 0;}
        var BeforeWorkLcltyIncmtax = this.ds_yndExcclcDetail.getColumn(0,"BEFORE_WORK_LCLTY_INCMTAX");  // 종전 지방소득세
        if(!BeforeWorkLcltyIncmtax){ BeforeWorkLcltyIncmtax = 0;}
        var BeforeWorkAgspt = this.ds_yndExcclcDetail.getColumn(0,"BEFORE_WORK_AGSPT");         // 종전 농특세
        if(!BeforeWorkAgspt){ BeforeWorkAgspt = 0;}
        
        var IncmtaxResult = parseInt((parseInt(OutTaxxResult) - (parseInt(Cncmtax) + parseInt(BeforeWorkIncmtax))) / 10) *10 ;                     // 결과 소득세
        var LcltyCncmtaxResult =  parseInt((parseInt(OutTaxxResult2) - (parseInt(LcltyCncmtax) + parseInt(BeforeWorkLcltyIncmtax))) / 10) *10 ;    // 결과 지방소득세
        var AgsptResult = parseInt((parseInt(AgsptTax3) - parseInt(BeforeWorkAgspt)) / 10) *10 ;                                                 // 결과 농특세
        
        if(IncmtaxResult >= 0){             
             this.ds_yndExcclcDetail.setColumn(0,"DDCT_LEV_INCMTAX", IncmtaxResult);            // 차감징수소득세 
             this.ds_yndExcclcDetail.setColumn(0,"DDCT_RETUN_INCMTAX", 0);                      // 차감환급소득세
        } else if(IncmtaxResult < 0){
             this.ds_yndExcclcDetail.setColumn(0,"DDCT_LEV_INCMTAX", 0);                        // 차감징수소득세 
             var incom = parseInt(IncmtaxResult)-parseInt(IncmtaxResult)-parseInt(IncmtaxResult);
             if(incom  > Cncmtax) { 
                  this.ds_yndExcclcDetail.setColumn(0,"DDCT_RETUN_INCMTAX", parseInt(Cncmtax) + parseInt(BeforeWorkIncmtax));           // 차감환급소득세
             } else {
                  this.ds_yndExcclcDetail.setColumn(0,"DDCT_RETUN_INCMTAX", parseInt(IncmtaxResult)-parseInt(IncmtaxResult)-parseInt(IncmtaxResult));     // 차감환급소득세
             }
        } else {
             this.ds_yndExcclcDetail.setColumn(0,"DDCT_LEV_INCMTAX", 0);                        // 차감징수소득세 
             this.ds_yndExcclcDetail.setColumn(0,"DDCT_RETUN_INCMTAX", 0);                      // 차감환급소득세
        }
      
        if(LcltyCncmtaxResult >= 0){             
             this.ds_yndExcclcDetail.setColumn(0,"DDCT_LEV_LCLTY_INCMTAX", LcltyCncmtaxResult);  // 차감징수지방소득세 
             this.ds_yndExcclcDetail.setColumn(0,"DDCT_RETUN_LCLTY_INCMTAX", 0);                 // 차감환급지방소득세
        } else if(LcltyCncmtaxResult < 0){
             this.ds_yndExcclcDetail.setColumn(0,"DDCT_LEV_LCLTY_INCMTAX", 0);                   // 차감징수지방소득세 
             var lclty = parseInt(LcltyCncmtaxResult)-parseInt(LcltyCncmtaxResult)-parseInt(LcltyCncmtaxResult);
             if(lclty > LcltyCncmtax) { 
                  this.ds_yndExcclcDetail.setColumn(0,"DDCT_RETUN_LCLTY_INCMTAX", parseInt(LcltyCncmtax) + parseInt(BeforeWorkLcltyIncmtax) );     // 차감환급지방소득세
             } else {
                  this.ds_yndExcclcDetail.setColumn(0,"DDCT_RETUN_LCLTY_INCMTAX", parseInt(LcltyCncmtaxResult)-parseInt(LcltyCncmtaxResult)-parseInt(LcltyCncmtaxResult));     // 차감환급지방소득세
             }
        } else {
             this.ds_yndExcclcDetail.setColumn(0,"DDCT_LEV_LCLTY_INCMTAX", 0);                   // 차감징수지방소득세 
             this.ds_yndExcclcDetail.setColumn(0,"DDCT_RETUN_LCLTY_INCMTAX", 0);                 // 차감환급지방소득세
        }
        
        if(AgsptResult >= 0){             
             this.ds_yndExcclcDetail.setColumn(0,"DDCT_LEV_AGSPT", AgsptResult);                 // 차감징수농특세
             this.ds_yndExcclcDetail.setColumn(0,"DDCT_RETUN_AGSPT", 0);                         // 차감환급농특세
        } else if(AgsptResult < 0){
             this.ds_yndExcclcDetail.setColumn(0,"DDCT_LEV_AGSPT", 0);                           // 차감징수농특세
             this.ds_yndExcclcDetail.setColumn(0,"DDCT_RETUN_AGSPT", parseInt(AgsptResult)-parseInt(AgsptResult)-parseInt(AgsptResult));    // 차감환급농특세
        } else {
             this.ds_yndExcclcDetail.setColumn(0,"DDCT_LEV_AGSPT", 0);                           // 차감징수농특세
             this.ds_yndExcclcDetail.setColumn(0,"DDCT_RETUN_AGSPT", 0);                         // 차감환급농특세
        }
        
     // ========= 기부조정금 내역 업데이트 ===========  
		var sController   	= "hsco/mis/sal/SAL050202/updateYndExcclcCntrMdat.do";	
		var sInDatasets   	= "input8=ds_yndExcclcDetail";
		var sOutDatasets  	= "";
		
		var argument = "";
		var callbackfunc = "";
		var showprogress = "";
		var bAsync = false;
		Ex.core.tran(this, strSvcId, sController, sInDatasets, sOutDatasets, argument, callbackfunc, showprogress, bAsync);
		
     // ========= 내역저장 ===========  		
		var sController   	= "hsco/mis/sal/SAL050206/insertYndExcclcDetailList.do";	
		var sInDatasets   	= "input6=ds_yndExcclcDetail";
		var sOutDatasets  	= "";
		
		var argument = "";
		var callbackfunc = "";
		var showprogress = "";
		var bAsync = false;
		Ex.core.tran(this, strSvcId, sController, sInDatasets, sOutDatasets, argument, callbackfunc, showprogress, bAsync);          
       
       }  // for       
       this.alert("연말정산 계산이 완료 되었습니다.");
       this.fn_search();
    }  // if   

}


/***********************************************************************************
* 설명	: 연말정산입력 초기화
***********************************************************************************/
this.dataset_clear =  function() 
{
        this.ds_yndExcclcDetail.setColumn(0,"NOW_WORK_SALARY_AMOUNT",0);
		this.ds_yndExcclcDetail.setColumn(0,"NOW_WORK_BNS_AMOUNT",0);
		this.ds_yndExcclcDetail.setColumn(0,"NOW_WORK_RCOGN_BNS_AMOUNT",0);
		this.ds_yndExcclcDetail.setColumn(0,"BEFORE_WORK_1_SALARY",0);
		this.ds_yndExcclcDetail.setColumn(0,"BEFORE_WORK_1_BNS",0);
		this.ds_yndExcclcDetail.setColumn(0,"BEFORE_WORK_1_RCOGN_BNS",0);
		this.ds_yndExcclcDetail.setColumn(0,"BEFORE_WORK_2_SALARY",0);
		this.ds_yndExcclcDetail.setColumn(0,"BEFORE_WORK_2_BNS",0);
		this.ds_yndExcclcDetail.setColumn(0,"BEFORE_WORK_2_RCOGN_BNS",0);
		this.ds_yndExcclcDetail.setColumn(0,"TAXXMPT_OUTNATN_INCOME",0);
		this.ds_yndExcclcDetail.setColumn(0,"TAXXMPT_NIGHT_ERNM",0);
		this.ds_yndExcclcDetail.setColumn(0,"SALARY_TOT_AMOUNT",0);
		this.ds_yndExcclcDetail.setColumn(0,"BNS_TOT_AMOUNT",0);
		this.ds_yndExcclcDetail.setColumn(0,"RCOGN_BNS_TOT_AMOUNT",0);
		this.ds_yndExcclcDetail.setColumn(0,"ERNM_INCME_AMOUNT",0);
		this.ds_yndExcclcDetail.setColumn(0,"ERNM_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"ERNM_AMOUNT",0);
		this.ds_yndExcclcDetail.setColumn(0,"BSIS_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"SPOUSE_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"DNTMY_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"COURS_PVLTRT_DDC_65",0);
		this.ds_yndExcclcDetail.setColumn(0,"COURS_PVLTRT_DDC_70",0);
		this.ds_yndExcclcDetail.setColumn(0,"DSPSN_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"LADY_HSHLDR_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"MNYCH_BRP_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"CHLDBRTH_ADP_DDC",0);

		this.ds_yndExcclcDetail.setColumn(0,"MNYCH_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"PARNTS_1_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"HN_DDC_AMOUNT_SM",0);
		this.ds_yndExcclcDetail.setColumn(0,"IRNCF_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"MCP_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"EDCCT_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"CASH_RCIPT_AMOUNT",0);
		this.ds_yndExcclcDetail.setColumn(0,"LFSTS_INTR",0);
		this.ds_yndExcclcDetail.setColumn(0,"PNINT_RPAY_AMOUNT",0);
		this.ds_yndExcclcDetail.setColumn(0,"BRRW_INTR_RPAY_AMOUNT",0);
		this.ds_yndExcclcDetail.setColumn(0,"HOUSE_PREPRTN_SVINGS",0);
		this.ds_yndExcclcDetail.setColumn(0,"MTHT_AM",0);
		this.ds_yndExcclcDetail.setColumn(0,"HOUSE_CPTAL_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"CTBNY_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"MRRG_INTR_FNRL_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"STD_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"ANNTY_IRNCF",0);
		this.ds_yndExcclcDetail.setColumn(0,"DDCT_INCOME_AMOUNT",0);
		this.ds_yndExcclcDetail.setColumn(0,"INDVDL_ANNTY_SVINGS_INCOME_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"ANNTY_SVINGS_INCOME_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"SPT_HNF_TCHNLGY_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"INVT_MXTR_INCOME_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"CREDTCARD_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"GNRLZ_STDTAX",0);
		this.ds_yndExcclcDetail.setColumn(0,"COMPUT_TAXAMT",0);
		this.ds_yndExcclcDetail.setColumn(0,"ERNM_TAXAMT_DDC_AMOUNT",0);
		this.ds_yndExcclcDetail.setColumn(0,"TAXAMT_DDC_6_BELOW",0);
		this.ds_yndExcclcDetail.setColumn(0,"RETIRE_ANNTY",0);
		this.ds_yndExcclcDetail.setColumn(0,"RETIRE_ANNTY_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"HOUSE_BRRW_AMOUNT",0);
		this.ds_yndExcclcDetail.setColumn(0,"FRNTN_PAY",0);
		this.ds_yndExcclcDetail.setColumn(0,"CNTR_POLITC_CPTAL",0);
		this.ds_yndExcclcDetail.setColumn(0,"LABRR_STOCK_SVINGS",0);
		this.ds_yndExcclcDetail.setColumn(0,"INORG_STOCK_SVINGS",0);
		this.ds_yndExcclcDetail.setColumn(0,"TAXAMT_DDC_SM",0);

		this.ds_yndExcclcDetail.setColumn(0,"RDCXPT_TAXAMT",0);
		this.ds_yndExcclcDetail.setColumn(0,"DECSN_TAXAMT_INCMTAX",0);
		this.ds_yndExcclcDetail.setColumn(0,"DECSN_TAXAMT_AGSPT",0);
		this.ds_yndExcclcDetail.setColumn(0,"DECSN_TAXAMT_LCLTY_INCMTAX",0);
		this.ds_yndExcclcDetail.setColumn(0,"DECSN_TAXAMT_EMPLYMINSRNC",0);
		this.ds_yndExcclcDetail.setColumn(0,"DECSN_TAXAMT_ENCRG_ENDW",0);
		this.ds_yndExcclcDetail.setColumn(0,"BEFORE_WORK_INCMTAX",0);
		this.ds_yndExcclcDetail.setColumn(0,"BEFORE_WORK_AGSPT",0);
		this.ds_yndExcclcDetail.setColumn(0,"BEFORE_WORK_LCLTY_INCMTAX",0);
		this.ds_yndExcclcDetail.setColumn(0,"NOW_LEV_PREARNGE_INCMTAX",0);
		this.ds_yndExcclcDetail.setColumn(0,"NOW_LEV_PREARNGE_AGSPT",0);
		this.ds_yndExcclcDetail.setColumn(0,"NOW_LEV_PREARNGE_LCLTY_INCMTAX",0);
		this.ds_yndExcclcDetail.setColumn(0,"NOW_LEV_PREARNGE_EMPLYMINSRNC",0);
		this.ds_yndExcclcDetail.setColumn(0,"NOW_LEV_PREARNGE_ENCRG_ENDW",0);
		this.ds_yndExcclcDetail.setColumn(0,"NOW_LEV_RESULT_INCMTAX",0);
		this.ds_yndExcclcDetail.setColumn(0,"NOW_LEV_RESULT_AGSPT",0);
		this.ds_yndExcclcDetail.setColumn(0,"NOW_LEV_RESULT_LCLTY_INCMTAX",0);
		this.ds_yndExcclcDetail.setColumn(0,"NOW_LEV_RESULT_EMPLYMINSRNC",0);
		this.ds_yndExcclcDetail.setColumn(0,"NOW_LEV_RESULT_ENCRG_ENDW",0);
		this.ds_yndExcclcDetail.setColumn(0,"DDCT_LEV_INCMTAX",0);
		this.ds_yndExcclcDetail.setColumn(0,"DDCT_LEV_AGSPT",0);
		this.ds_yndExcclcDetail.setColumn(0,"DDCT_LEV_LCLTY_INCMTAX",0);
		this.ds_yndExcclcDetail.setColumn(0,"DDCT_LEV_EMPLYMINSRNC",0);
		this.ds_yndExcclcDetail.setColumn(0,"DDCT_LEV_ENCRG_ENDW",0);
		this.ds_yndExcclcDetail.setColumn(0,"DDCT_RETUN_INCMTAX",0);
		this.ds_yndExcclcDetail.setColumn(0,"DDCT_RETUN_AGSPT",0);
		this.ds_yndExcclcDetail.setColumn(0,"DDCT_RETUN_LCLTY_INCMTAX",0);
		this.ds_yndExcclcDetail.setColumn(0,"DDCT_RETUN_EMPLYMINSRNC",0);
		this.ds_yndExcclcDetail.setColumn(0,"DDCT_RETUN_ENCRG_ENDW",0);
		this.ds_yndExcclcDetail.setColumn(0,"CNTR_CYFD",0);
		this.ds_yndExcclcDetail.setColumn(0,"ETC_INCOME_DDC_SM",0);
		this.ds_yndExcclcDetail.setColumn(0,"GNRLZ_LMT_EXCESS_AMOUNT",0);

		this.ds_yndExcclcDetail.setColumn(0,"ANNTY_SVINGS_TAXAMT",0);
		this.ds_yndExcclcDetail.setColumn(0,"IRNCF_TAXAMT",0);
		this.ds_yndExcclcDetail.setColumn(0,"MCP_TAXAMT",0);
		this.ds_yndExcclcDetail.setColumn(0,"EDCCT_TAXAMT",0);
		this.ds_yndExcclcDetail.setColumn(0,"CNTR_POLITC_TAXAMT",0);
		this.ds_yndExcclcDetail.setColumn(0,"CNTR_POLITC_UP",0);
		this.ds_yndExcclcDetail.setColumn(0,"CNTR_POLITC_UP_TAXAMT",0);
		this.ds_yndExcclcDetail.setColumn(0,"LEGAL_CNTR",0);
		this.ds_yndExcclcDetail.setColumn(0,"LEGAL_CNTR_TAXAMT",0);
		this.ds_yndExcclcDetail.setColumn(0,"APPN_CNTR",0);
		this.ds_yndExcclcDetail.setColumn(0,"APPN_CNTR_TAXAMT",0);
		this.ds_yndExcclcDetail.setColumn(0,"MTHT_AM_TAXXAMT",0);
		
		this.ds_yndExcclcDetail.setColumn(0,"GRNT_IRNCF",0);
		this.ds_yndExcclcDetail.setColumn(0,"PNINT_RPAY_FNNC",0);
		this.ds_yndExcclcDetail.setColumn(0,"PNINT_RPAY_RESIDNT",0);
		this.ds_yndExcclcDetail.setColumn(0,"SUBSCRPT_SVINGS",0);
		this.ds_yndExcclcDetail.setColumn(0,"HOUSE_SUBSCRPT_GNRLZ",0);
		this.ds_yndExcclcDetail.setColumn(0,"LABRR_HOUSE_PREPRTN",0);
		
		this.ds_yndExcclcDetail.setColumn(0,"SPECL_INCOME_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"SPECL_TAXAMT_DDC_SM",0);
		
		this.ds_yndExcclcDetail.setColumn(0,"RETIRE_ANNTY",0);
		this.ds_yndExcclcDetail.setColumn(0,"RETIRE_ANNTY_DDC",0);
		this.ds_yndExcclcDetail.setColumn(0,"DSPSN_GRNT_INSRNC",0);
		this.ds_yndExcclcDetail.setColumn(0,"DSPSN_GRNT_INSRNC_DDC",0);
}

/***********************************************************************
* 헤드 정렬
************************************************************************/
this.grd_mtSalaryCreat_onheadclick = function(obj:Grid, e:nexacro.GridClickEventInfo)
{
	this.gfn_gridSort(obj, e); // Grid 데이터 정렬
}

/***********************************************************************
* 급여반영
************************************************************************/
this.div_cont_btn_Cre_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	
	this.ds_cond00.clearData();
	this.ds_cond00.addRow();	
	this.ds_cond00.setColumn(0,"PYMNT_YM",this.div_pymntYm.getValue());
	this.ds_cond00.setColumn(0,"EXCCLC_YEAR",this.div_search.spn_excclcYear.value);
	 	
	this.fn_transaction("selectYndPymntymList");
}
]]></Script>
  </Form>
</FDL>
