<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript5.0"><![CDATA[/********************************************************
파일명 : datasetUtil.xjs
설 명 : Dataset 공통 유틸
수정일 수정자 Version Function 명
------- -------- ---------- --------------
2015.09.23 지효정
*********************************************************/
/***********************************************************************************
* 함수 : fn_get_svcId
* 설명 : url에서 svcId 추출.

* 함수 : fn_find_dsParent
* 설명 : innerdataset을 이용하여 combo 검색

* 함수 : fn_fill_combo
* 설명 : 콤보에 코드성 데이터를 채운다.

* 함수 : fn_fill_code
* 설명 : 코드성 데이터를 채운다.

* 함수 : fn_fill_spin
* 설명 : Spin의 Max value를 서버에서 가져와서 설정한다.

* 함수 : fn_fill_multiCheckBox
* 설명 : 멀티 체크박스에 데이터를 채운다.

* 함수 : fn_get_data
* 설명 : 서버와 통신하여 데이터를 가져와서 콜백을 호출한다.

* 함수 : fn_get_sum
* 설명 : 지정된 Dataset의 컬럼값의 총 합을 구한다.

* 함수 : fn_cal_percent
* 설명 : 지정된 Dataset의 컬럼간의 백분률을 구한다.

* 함수 : fn_add_comboHeader
* 설명 :  콤보에 "전체", "선택"등의 헤더를 추가 한다. 

* 함수 : fn_add_dsHeader
* 설명 :  데이터셋에 "전체", "선택"등의 헤더를 추가 한다. 

* 함수 : fn_divToDS
* 설명 : div안에 있는 모든 값을 Dataset에 추가

* 함수 : fn_dsToParamDs
* 설명 : 원본 Dataset과 복사할 Dataset의 컬럼명이 같은 경우 항목을 복사한다.

* 함수 : fn_dsToObj
* 설명 : Dataset의 특정 로우를 Object로 변환

* 함수 : fn_dsToArr
* 설명 : Dataset을 Array로 변환

* 함수 : fn_objToDs
* 설명 : Object를 Dataset의 특정 로우로 복사

* 함수 : fn_arrToDs
* 설명 : Array를 Dataset으로 복사

* 함수 : fn_insertRow
* 설명 : 같은 컬럼이름을 가진 Dataset 추가

* 함수 : fn_add_datasetFn
* 설명 : Dataset에 기능 추가.
***********************************************************************************/

/***********************************************************************************
* 설명	: url에서 svcId 추출
***********************************************************************************/
this.fn_get_svcId = function(url){
	return url.substring(url.lastIndexOf("/") + 1, url.lastIndexOf("."))
}

/***********************************************************************************
* 설명	: innerdataset을 이용하여 Combo, Radio 검색
***********************************************************************************/
this.fn_find_dsParent = function(area, innerdataset){
	var len = area.components.length;
	for(var i=0; i<len; i++){
		var item = area.components.get_item(i);
		if(item instanceof Combo || item instanceof Radio){
			if(item.innerdataset == innerdataset){
				return item;
			}
		}else if(item instanceof Div || item instanceof Tab || item instanceof Tabpage){
			var result = this.fn_find_dsParent(item, innerdataset);
			if(result != null){
				return result;
			}
		}
	}
	
	return null;
}

/***********************************************************************************
* 설명	: 콤보에 코드성 데이터를 채운다.
* combo : 콤보 객체
* url	: 서버 url
* strHeader : 옵션 항목 (생략가능)
	- 콤보의 첫번째 인덱스에 표시할 항목, 생략시 데이터셋의 첫번째 항목 표시
* objParam : 쿼리의 조건문으로 사용될 파라미터 (생략가능)
	- ex) {NM:'지효정', JOB:'개발자'}
* strCallback : 콜백함수 지정, 생략시 콜백함수 생성
***********************************************************************************/
this.fn_fill_combo = function(combo, url, strHeader, objParam, strCallback){
	var ds = this[combo.innerdataset];
	/***********************************************************************************
	* 설명	: 콤보와 바인딩 될 데이터셋 초기화
	***********************************************************************************/
	if(this.comUtils.isNullEmpty(ds) == true){
		alert("콤보에 데이터셋이 지정되어 있지 않습니다.");
		return;
	}
	
	this.fn_fill_code(ds, url, strHeader, objParam, strCallback);
}

/***********************************************************************************
* 설명	: 코드성 데이터를 데이터셋에 채운다.
* ds 	: 데이터셋
* url	: 서버 url
* strHeader : 옵션 항목 (생략가능)
	- 콤보의 첫번째 인덱스에 표시할 항목, 생략시 데이터셋의 첫번째 항목 표시
* objParam : 쿼리의 조건문으로 사용될 파라미터 (생략가능) 
    - ex) {NM:'지효정', JOB:'개발자'}
* strCallback : 콜백함수 지정, 생략시 콜백함수 생성
***********************************************************************************/
this.fn_fill_code = function(ds, url, strHeader, objParam, strCallback){

	var callback = "fn_" + ds.name + "Callback";

	/***********************************************************************************
	* 설명	: 트랜젝션 완료 후 호출되어질 콜백함수
	***********************************************************************************/
	delete this[callback];
	this[callback] = function(strSvcId, nErrorCode, strErrorMsg){
		var bSuccess = nErrorCode == 0 ? true : false;
		if (bSuccess){
			/***********************************************************************************
			* 설명	: 데이터셋을 innerdataset로 사용하고 있는 Combo, Radio 를 찾아 헤더 설정
			***********************************************************************************/
			var item = this.fn_find_dsParent(this, ds.name);
			if(item != null){
				if(this.comUtils.isNullEmpty(strHeader) == false){
					this.fn_add_header(this, item, strHeader);
				}else{
					item.set_index(0);
				}
			}else{
			/***********************************************************************************
			* 설명	: 데이터셋만 존재하는 경우 데이터셋의 rowposition을 설정한다.
			***********************************************************************************/
				if(this.comUtils.isNullEmpty(strHeader) == false){
					if(isNaN(strHeader) == false){
						if(ds.rowcount > 0){
							ds.set_rowposition(Number(strHeader));
						}
					}
				}
			}
		}else{
			this.gfn_callback_message(strSvcId, nErrorCode, strErrorMsg);
		}
		this.debug( (bSuccess==true?"Success : ":"Fail : ") + strSvcId);
	}
	
	this.fn_get_data(ds, url, objParam, strCallback==null?callback:strCallback);
}

/***********************************************************************************
* 설명	: spin의 최대 값을 가져온다.
* ds 	: 데이터셋
* spin  : spin
* url	: 서버 url
* objParam : 쿼리의 조건문으로 사용될 파라미터 (생략가능)
	- ex) {NM:'지효정', JOB:'개발자'}
* strCallback : 콜백함수 지정, 생략시 콜백함수 생성
***********************************************************************************/
this.fn_fill_spin  = function(ds, spin, url, objParam, strCallback){
	var callback = "fn_" + ds.name + "Callback";
	
	/***********************************************************************************
	* 설명	: 트랜젝션 완료 후 호출되어질 콜백함수
	***********************************************************************************/
	delete this[callback];
	this[callback] = function(strSvcId, nErrorCode, strErrorMsg){
		var bSuccess = nErrorCode == 0 ? true : false;
		if (bSuccess){
				var nMax = ds.getColumn(0, "MAX_VALUE");
				spin.set_min(0);
				spin.set_max(this.nvl(nMax, 0));
		}else{
			this.gfn_callback_message(strSvcId, nErrorCode, strErrorMsg);
		}
		this.debug( (bSuccess==true?"Success : ":"Fail : ") + strSvcId);
	}
	
	this.fn_get_data(ds, url, objParam, strCallback==null?callback:strCallback);
}

/***********************************************************************************
* 설명	: 차수의 최대 값을 가져와 콤보에 세팅한다..
* ds 	: 데이터셋
* url	: 서버 url
* strHeader : 옵션 항목 (생략가능)
	- 콤보의 첫번째 인덱스에 표시할 항목, 생략시 데이터셋의 첫번째 항목 표시
* objParam : 쿼리의 조건문으로 사용될 파라미터 (생략가능) 
    - ex) {NM:'지효정', JOB:'개발자'}
* strCallback : 콜백함수 지정, 생략시 콜백함수 생성
***********************************************************************************/
this.fn_fill_odr  = function(ds, url, strHeader, objParam, strCallback){
	var callback = "fn_" + ds.name + "Callback";

	/***********************************************************************************
	* 설명	: 트랜젝션 완료 후 호출되어질 콜백함수
	***********************************************************************************/
	delete this[callback];
	this[callback] = function(strSvcId, nErrorCode, strErrorMsg){
		var bSuccess = nErrorCode == 0 ? true : false;
		if (bSuccess){
			var item = this.fn_find_dsParent(this, ds.name);
			if(item != null){
				var nMax = Number(ds.getColumn(0, "MAX_VALUE"));
				ds.clearData();
				for(var i=1; i<=nMax; i++){
					var nRow = ds.addRow();
					ds.setColumn(nRow, "CODE", i);
					ds.setColumn(nRow, "CODE_NM", i);
				}
				
				if(this.comUtils.isNullEmpty(strHeader) == false){
					this.fn_add_header(this, item, strHeader);
				}
			}
		}else{
			this.gfn_callback_message(strSvcId, nErrorCode, strErrorMsg);
		}
		this.debug( (bSuccess==true?"Success : ":"Fail : ") + strSvcId);
	}
	
	this.fn_get_data(ds, url, objParam, strCallback==null?callback:strCallback);
}

/***********************************************************************************
* 설명	: 멀티체크박스에 데이터를 채운다.
* ds 	: 데이터셋
* div : 멀티체크박스 DIV
* url	: 서버 url
* objParam : 쿼리의 조건문으로 사용될 파라미터 (생략가능)
	- ex) {NM:'지효정', JOB:'개발자'}
* strCallback : 콜백함수 지정, 생략시 콜백함수 생성
***********************************************************************************/
this.fn_fill_multiCheckBox  = function(ds, div, url, objParam, strCallback, bAllCheck){
	var callback = "fn_" + ds.name + "Callback";
	
	/***********************************************************************************
	* 설명	: 트랜젝션 완료 후 호출되어질 콜백함수
	***********************************************************************************/
	delete this[callback];
	this[callback] = function(strSvcId, nErrorCode, strErrorMsg){
		var bSuccess = nErrorCode == 0 ? true : false;
		if (bSuccess){
				div.fn_create(ds, bAllCheck);
		}else{
			this.gfn_callback_message(strSvcId, nErrorCode, strErrorMsg);
		}
		this.debug( (bSuccess==true?"Success : ":"Fail : ") + strSvcId);
	}
	
	this.fn_get_data(ds, url, objParam, strCallback==null?callback:strCallback);
}

/***********************************************************************************
* 설명	: 서버에서 데이터를 가져온다.
* url	: 서버 url
* objParam : 쿼리의 조건문으로 사용될 파라미터 (생략가능)
	- ex) {NM:'지효정', JOB:'개발자'}
* callback : 콜백함수 지정
***********************************************************************************/
this.fn_get_data = function(ds, url, objParam, callback){
	var svcId = ds.name.replace('ds_', '');
	var dsNm = ds.name;
	var dsParamNm = "ds_cond_" + svcId;
	
	ds.clearData();
	
	/***********************************************************************************
	* 설명	: Param으로 사용될 데이터셋 생성
	***********************************************************************************/
	var ds_param = null;
	if(this[dsParamNm] == null){
		ds_param = new Dataset;
		this.addChild(dsParamNm, ds_param); 
		ds_param.addColumn( "DUMMY", "string", 120 );
		ds_param.set_useclientlayout(true);
		ds_param.addRow();
	}else{
		ds_param = this[dsParamNm];
		this[dsParamNm].clearData();
		this[dsParamNm].addRow();
	}
	
	/***********************************************************************************
	* 설명	: Param으로 넘겨받은 Object를 Dataset로 변환
	***********************************************************************************/
	if(this.comUtils.isNullEmpty(objParam) == false){
		this.fn_objToDs(objParam, ds_param, 0);
	}
	
	/***********************************************************************************
	* 설명	: 트랜젝션 정보 설정
	***********************************************************************************/
	var strSvcId 		= svcId;
	var sController   	= url; 
	var sInDatasets   	= "input1=" + dsParamNm;
	var sOutDatasets  	= dsNm + "=output1";

	/***********************************************************************************
	* 설명	: 트랜젝션 유효성 검증
	***********************************************************************************/
	if(this.fn_validate_tranasaction(strSvcId, sController, sInDatasets, sOutDatasets) == false){
		return;
	}
	
	/***********************************************************************************
	* 설명	: 트랜젝션
	***********************************************************************************/
	Ex.core.tran(this, strSvcId, sController, sInDatasets, sOutDatasets, "", callback);
}

/*******************************************************************************
*지정된 Dataset의 컬럼값의 총 합을 구한다.
*checkColumn 컬럼에 checkValue 인 값인 경우에 해당하는 합계만 구한다.
*checkColumn, checkValue 생략시 모든 Dataset의 합계 계산
********************************************************************************/
this.fn_get_sum = function(ds, column, checkColumn, checkValue){
	var len   = ds.rowcount;
	var sum   = 0;
	var value = 0;
	var bSum  = true;
	
	for(var i=0; i<len; i++){
		if(checkColumn != null && checkValue != null){
			if(ds.getColumn(i, checkColumn) != checkValue){
				continue;
			}
		}

		value = ds.getColumn(i, column);
		
		if(value != null && typeof(value) == 'string'){
			if(value.indexOf('/') != -1){
				value = this.fn_fractionalToPer(value);
			}
		}
		
		value = (value == null ? 0 : Number(value));
		sum  += value;
	}
	return sum;
}

/*******************************************************************************
*지정된 Dataset의 컬럼간의 백분률을 구한다.
********************************************************************************/
this.fn_cal_percent = function(ds, row1, column1, row2, column2){
	var value1 = Number(ds.getColumn(row1, column1));
	var value2 = Number(ds.getColumn(row2, column2));
	
	if(value2 == 0){
		return '0%';
	}
	
	var result = value1 / value2 * 100;
	
	if(isNaN(result) == true){
		return 0;
	}
	
	return result.toFixed(2) + '%';
}

/***********************************************************************************
* 설명	: 콤보에 "전체", "선택"등의 헤더를 추가 한다. 
***********************************************************************************/
this.fn_add_comboHeader = function(form, combo, strHeader, strCodeColumn, strDataColumn){
	var ds = form[combo.innerdataset];
	var arrHeaderInfo = strHeader.split("/");
	if(strCodeColumn == null) strCodeColumn = combo.codecolumn ? combo.codecolumn : "CODE";
	if(strDataColumn == null) strDataColumn = combo.datacolumn ? combo.datacolumn : "CODE_NM";
	ds.insertRow(0);
	ds.setColumn(0, strDataColumn, arrHeaderInfo[0]);
	ds.setColumn(0, strCodeColumn, arrHeaderInfo[1]);
	combo.set_index(0);
}

/***********************************************************************************
* 설명	: 데이터셋에 "전체", "선택"등의 헤더를 추가 한다. 
* fn_add_comboHeader과 같은 함수... 이전 소스 지원하기 위해 따로 만듦
***********************************************************************************/
this.fn_add_header = function(form, component, strHeader, strCodeColumn, strDataColumn){
	var ds = form[component.innerdataset];
	var arrHeaderInfo = strHeader.split("/");
	if(strCodeColumn == null) strCodeColumn = component.codecolumn ? component.codecolumn : "CODE";
	if(strDataColumn == null) strDataColumn = component.datacolumn ? component.datacolumn : "CODE_NM";
	ds.insertRow(0);
	ds.setColumn(0, strDataColumn, arrHeaderInfo[0]);
	ds.setColumn(0, strCodeColumn, arrHeaderInfo[1]);
	ds.set_rowposition(0);
	component.set_index(0);
}

/***********************************************************************************
* 설명	: div안에 있는 모든 값을 Dataset에 추가
* div안에 있는 콤포넌트의 id가 Dataset의 컬럼이 되고 value가 Dataset의 value가 된다.
* id = cmb_nm, value = '01' -> column = nm, value = '01'
* Dataset에 해당 컬럼이 없을경우 생성후 추가한다.
***********************************************************************************/
this.fn_divToDS = function(ds, div, bClear){
	this.debug("********************************fn_divToDS start*******************************");
	if(ds == null || div == null){
		this.debug("fn_divToDS ds == null || div == null out");
		return false;
	}
	
	if(this.comUtils.isNullEmpty( bClear) == true){
		bClear = true;
	}
	
	if(bClear == true){
		ds.clearData();
		ds.addRow();
	}
	
	var len = div.components.length;
	
	for(var i=0; i<len; i++){
		var obj = div.components.get_item(i);
		
		switch(obj.toString()){
			case "[object Edit]":
			case "[object MaskEdit]":
			case "[object TextArea]":
			case "[object Spin]":
			case "[object Calendar]":
			case "[object Radio]":
			case "[object CheckBox]":
			case "[object ListBox]":
			case "[object Combo]":
			case "[object Div]":

				var value = null;
				/************************************************************************
				* 콤포넌트 명을 제외한 값을 param name으로 지정
				/************************************************************************/
				if(obj.toString() == "[object CheckBox]"){//체크박스인경우 1, 0으로 치환한다.
					value = obj.value == true ? 1 : 0;
				}
				else if(obj.toString() == "[object Div]"){//DIV일경우 div에서 생성한 메서드 호출하여 값을 가져온다.
					switch(obj.url){
						case "pms_cmp_formLib::CmpMultiCheckBar.xfdl":
							value = obj.fn_get_value();
							break;
						case "common::frmMonCal.xfdl":
							value = obj.getValue("YYYYMM");
							break;
					}
					
				} else{
					value = obj.value;
				}
				
				if(this.comUtils.isNullEmpty(value) == true){
				//	continue;
				}
				
				var argName = obj.id.substr(obj.id.indexOf("_")+1, obj.id.length);
				
				var objColumnInfo = ds.getColumnInfo(argName);
				if(objColumnInfo == null){
					 ds.addColumn( argName, "string", 120 );
				}
				ds.setColumn(0, argName, value);
				//this.debug(argName + ":" + ds.getColumn(0, argName));
				break;
		}
	}
	this.debug("********************************fn_divToDS start*******************************");
	return true;
}

/* Dataset 칼럼복사
 * srcDS   :  원본Dataset (From)      - 필수
 * descDS  :  복사할 대상 Dataset(To) - 필수
 * srcIdx  :  원본 Dataset RowNum     - 필수
 * descIdx :  대상 Dataset RowNum     - 선택
 * bClear  :  대상 Dataset 클리어 여부 (true, null : 클리어) - 선택
 * Dataset의 copyRow와 같은 기능....
*/
this.fn_dsToParamDs = function(srcDS, descDS, srcIdx, descIdx, bClear ){
	//this.debug("********************************fn_dsToParamDs start*******************************");
	var colcount = descDS.colcount;
	descIdx = descIdx == null?0:descIdx;
	bClear = bClear == null?true:false;

	if(bClear == true){
		descDS.clearData();
		descIdx = descDS.addRow();
	}
	
	//this.debug(descDS.colcount);
	
	for(var i=0; i<colcount; i++){
		
		var objColumnInfo = descDS.getColumnInfo(i);
		var columnName    = objColumnInfo.name;
		var value = srcDS.getColumn(srcIdx, columnName);
		
		if(value != null){
			descDS.setColumn(descIdx, columnName, value);
			//this.debug(descDS.name + ":" + columnName + "=" + value);
		}	
	}
	//this.debug("********************************fn_dsToParamDs end*******************************");
}

/***********************************************************************************
* 설명	: Dataset의 특정 로우를 Object로 변환
***********************************************************************************/
this.fn_dsToObj = function(srcDS, dsIdx){
	var obj = {};
	
	var colcount = srcDS.colcount;
	
	for(var i=0; i<colcount; i++){
		var objColumnInfo = srcDS.getColumnInfo(i);
		var columnName    = objColumnInfo.name;
		var value = srcDS.getColumn(dsIdx, columnName);
		
		obj[columnName] = value;
	}
	return obj;
}

/***********************************************************************************
* 설명	: Dataset을 Array로 변환
***********************************************************************************/
this.fn_dsToArr = function(srcDS){
	var dsArr = [];
	
	var rowcount = srcDS.rowcount;
	var colcount = srcDS.colcount;
	 
	 for(var i=0; i<rowcount; i++){
		var obj = new Object();
		
		for(var j=0; j<colcount; j++){
			var objColumnInfo = srcDS.getColumnInfo(j);
			var columnName    = objColumnInfo.name;
			var value = srcDS.getColumn(i, columnName);
			
			obj[columnName] = value;
		}
		dsArr.push(obj);
	 }
	 
	 return dsArr;
}

/***********************************************************************************
* 설명	: Object를 Dataset의 특정 로우로 복사
***********************************************************************************/
this.fn_objToDs = function(obj, descDS, copyIdx, bAppend){
	if(bAppend == true){
		copyIdx = descDS.addRow();
	}
	
	for(var field in obj){
		if(obj.hasOwnProperty(field) == true){
			var objColumnInfo = descDS.getColumnInfo(field);
			if(objColumnInfo == null){
				 descDS.addColumn( field, "string", 120 );
			}
			descDS.setColumn(copyIdx, field, obj[field]);
			//this.debug(copyIdx + ":" + field + ":" + obj[field]);
		}
	}
}

/***********************************************************************************
* 설명	: Array를 Dataset으로 복사
***********************************************************************************/
this.fn_arrToDs = function(dsArr, descDS, bClear){
	if(bClear == true){
		descDS.clearData();
	}
	
	var len = dsArr.length;
	for(var i=0; i<len; i++){
		this.fn_objToDs(dsArr[i], descDS, null, true);
	}
}

/***********************************************************************************
* 설명	: 같은 컬럼이름을 가진 Dataset 추가
***********************************************************************************/
this.fn_insertRow = function(srcDs, destDs){
	var rowcount = srcDs.rowcount;
	
	destDs.set_enableevent(false);
	for(var i=0; i<rowcount; i++){
		var nRow = destDs.addRow();
		destDs.copyRow(nRow, srcDs, i);
	}
	destDs.set_enableevent(true);
}

/***********************************************************************************
* 설명	: Dataset에 기능 추가
***********************************************************************************/
this.fn_add_datasetFn = function(){
	//현재 선택되어 있는 항목 삭제
	Dataset.prototype.deleteSelectRow = function(){
		this.deleteRow(this.rowposition);
	};
		
	//데이터셋 취소
	Dataset.prototype.cancel = function(){
		this.reset();
		this.applyChange();
	};
	
	//현재 선택되어 있는 컬럼 값 반환
	Dataset.prototype.getSelectColumn = function(columnId){
		return this.getColumn(this.rowposition, columnId);
	};
	
	//현재 선택되어 있는 컬럼 값 설정
	Dataset.prototype.setSelectColumn = function(columnId, value){
		return this.setColumn(this.rowposition, columnId, value);
	};
	
	//데이터셋의 업데이트 여부 확인
	Dataset.prototype.isUpdated = function(){
		return Ex.util.isUpdated(this);
	};
	
	//같은 값의 컬럼이 존재하는지 검색
	Dataset.prototype.find = function(columnId, value){
		var rowcount = this.rowcount;
		for(var i=0; i<rowcount; i++){
			if(value == this.getColumn(i, columnId)){
				return true;
			}
		}
		
		return false;
	};
	
	Dataset.prototype.setLastRowposition = function(){
		if(this.rowcount > 0){
			if(this.posMode == "savePos"){
				if(this.backupPosition != null &&  this.backupPosition != -1){
					this.set_rowposition(this.backupPosition);
					this.backupPosition = -1;
				}
			}
			else{
				this.set_rowposition(this.rowcount - 1);
			}
		}
	};
	
	Dataset.prototype.isAllNull = function(){
		var rowcount = this.rowcount;
		var colcount = this.colcount;
	 
		 for(var i=0; i<rowcount; i++){
			
			for(var j=0; j<colcount; j++){
				var objColumnInfo = this.getColumnInfo(j);
				var columnName    = objColumnInfo.name;
				var value = this.getColumn(i, columnName);
				if(value == null || value == ''){
					return false;
				}
			}
			
		 }
		 return true;
	}
}]]></Script>
