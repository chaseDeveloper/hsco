<?xml version="1.0" encoding="utf-8"?>
<FDL version="1.5">
  <TypeDefinition url="..\..\default_typedef.xml"/>
  <Form id="prjFiles" classname="prjFiles" left="0" top="0" width="300" height="400" titletext="첨부 목록" onload="prjFiles_onload" oninit="prjFiles_oninit">
    <Layouts>
      <Layout>
        <Static id="sta_gud_v01" left="0" top="0" width="10" bottom="0" style="background:#1b3cd23c;align:center middle;" text="10" visible="0"/>
        <Grid id="grd_Files" taborder="1" binddataset="ds_files" left="10" top="29" right="0" bottom="0" autofittype2="col" oncellclick="grd_Files_oncellclick">
          <Formats>
            <Format id="default">
              <Columns>
                <Column size="20"/>
                <Column size="30"/>
                <Column size="80"/>
                <Column size="0"/>
                <Column size="120"/>
                <Column size="40"/>
              </Columns>
              <Rows>
                <Row size="24" band="head"/>
                <Row size="24"/>
              </Rows>
              <Band id="head">
                <Cell displaytype="checkbox" edittype="checkbox"/>
                <Cell col="1" text="순번"/>
                <Cell col="2" text="공개일자"/>
                <Cell col="3" text="기타"/>
                <Cell col="4" text="파일명"/>
                <Cell col="5" text="첨부"/>
              </Band>
              <Band id="body">
                <Cell displaytype="checkbox" edittype="checkbox" text="bind:CHK"/>
                <Cell col="1" expr="currow+1" bind2="OTHBC_YN"/>
                <Cell col="2" displaytype="date" edittype="date" calendardisplaynulltype="none" text="bind:VAL0"/>
                <Cell col="3" text="bind:EXT"/>
                <Cell col="4" style="align:left middle;cursor:hand;" style2="cursor:expr:OTHBC_YN==1?'hand':'';" text="bind:FILE_NM"/>
                <Cell col="5" displaytype="button" style="cursor:hand;" text="bind:BTN"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
        <Button id="btn_00" taborder="8" text="첨부" cssclass="btn_WF_Process" visible="true" top="5" right="82" width="38" height="19"/>
        <Button id="btn_del00" taborder="9" text="삭제" cssclass="btn_WF_Process" top="5" right="0" width="38" height="19" visible="true"/>
        <Static id="sta_gud_h00" taborder="10" text="5" visible="false" left="8" top="0" right="8" height="5" style="background:#dc143c3c;"/>
        <Static id="sta_gud_h03" taborder="11" text="5" visible="false" left="7" top="24" right="9" height="5" style="background:#dc143c3c;"/>
        <Button id="btn_del01" taborder="12" text="받기" cssclass="btn_WF_Process" visible="true" top="5" right="41" width="38" height="19"/>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="ds_files" onrowposchanged="ds_onrowposchanged" useclientlayout="1">
        <ColumnInfo>
          <Column id="FILE_SN" type="BIGDECIMAL" size="21"/>
          <Column id="FILE_ORDR" type="BIGDECIMAL" size="4"/>
          <Column id="FILE_NM" type="STRING" size="255"/>
          <Column id="EXT" type="STRING" size="20"/>
          <Column id="VAL0" type="STRING" size="100"/>
          <Column id="VAL1" type="STRING" size="100"/>
          <Column id="OTHBC_YN" type="STRING" size="1"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_validation">
        <ColumnInfo>
          <Column id="compId" type="STRING" size="256"/>
          <Column id="colId" type="STRING" size="256"/>
          <Column id="PK" type="STRING" size="256"/>
          <Column id="notNull" type="STRING" size="256"/>
          <Column id="type" type="STRING" size="256"/>
          <Column id="nlength" type="STRING" size="256"/>
          <Column id="from" type="STRING" size="256"/>
          <Column id="to" type="STRING" size="256"/>
          <Column id="lengthChkGb" type="STRING" size="256"/>
          <Column id="msgId" type="STRING" size="256"/>
          <Column id="expr" type="STRING" size="256"/>
          <Column id="func" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="compId"/>
            <Col id="colId"/>
            <Col id="notNull"/>
            <Col id="msgId"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="ds_cond1">
        <ColumnInfo>
          <Column id="FILE_SN" type="BIGDECIMAL" size="21"/>
          <Column id="FILE_ORDR" type="BIGDECIMAL" size="4"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_fileSn"/>
      <Dataset id="ds_PRJ010"/>
    </Objects>
    <Bind>
    </Bind>
    <Script type="xscript5.0"><![CDATA[/***********************************************************************
 * 화면ID   : 
 * 화면명   : 
 * 화면설명 : 
 * 작성일   :
 * 작성자   : 
 * 수정이력 : 
 ***********************************************************************
 *     수정일     수정자   내용
 ***********************************************************************
 *
 ***********************************************************************
 */

/***********************************************************************
 * Script Include 
 ***********************************************************************/
// 시스템 공통 라이브러리 Include
include "pms_lib::pmsUtilInclude.xjs";

/***********************************************************************
 * 화면 변수 선언부
 ***********************************************************************/
this.FileMgr;

 /***********************************************************************
 * onInit / onLoad 영역
 ***********************************************************************/
this.prjFiles_oninit = function(obj:Form, e:nexacro.InitEventInfo)
{
	this.fn_init();				//공통 폼 초기화
	this.fn_init_form();		//폼 초기화

//	this.fn_setCols([0,30,80,0,110,30]);
}

this.fn_postInit = function(arg)
{
/*
	if(this.FILE_MANAGER) {
		this.removeChild(this.FILE_MANAGER.name);
		this.FILE_MANAGER.destroy();
		this.FILE_MANAGER = null;
	}
*/

	if(!this.FILE_MANAGER) {
		this.FILE_MANAGER = new this.fileManager(this, arg.sysSe ? arg.sysSe : "PMS", arg.jobSe ? arg.jobSe : "PRJ");
		this.FileMgr = this.FILE_MANAGER;
	}
	this.FileMgr.pForm = arg.pForm;

	this.FileMgr.ds_M = arg.ds_M;
	this.FileMgr.ds_files = this.ds_files;
	this.FileMgr.onSuccess = arg.onSuccess;
	this.grd_Files.set_autofittype(arg.autofittype);
	this.fn_setCols(arg.col_sizes);

	if(arg.fn_save) {
		this.btn_add.set_visible(1);
		this.btn_del.set_visible(1);
	}

	var fileConfig = {
		 onChange: arg.onChange ? arg.onChange : this.fn_onFileSelected
		,onSuccess : this.fn_onFileSuccess
		,responseArea : arg.responseArea ? arg.responseArea : this.grd_Files

		,useMultiSelect : arg.useMultiSelect ? arg.useMultiSelect : true
		,useMultiUpload : arg.useMultiUpload ? arg.useMultiUpload : true
	};

	this.FILE_MANAGER.init(fileConfig);

	return this.ds_files;
}

this.fn_onFileSuccess = function(type, e){
	if(type == this.FILE_MANAGER.TYPE_UPLOADER){
		if(this.FileMgr.onSuccess) {
			var fn = this.FileMgr.onSuccess;
			return fn.call(this.FileMgr.pForm, type, e);
		}
		this.fn_transaction("fileList");;
	}
	if(type == this.FILE_MANAGER.TYPE_DOWNLOADER){
//		this.gfn_message("success.파일.다운로드.성공");
	}
}

this.fn_setCols = function(cols)
{
	this.debug('fn_setCols:'+cols.length);
	var grd = this.grd_Files;
	for(var i = 0; i < cols.length; i++) {
		grd.setFormatColProperty(i, "size", '' + cols[i]);
	}
}

this.prjFiles_onload = function(obj:Form, e:nexacro.LoadEventInfo)
{
	this.fn_init_dataset();		//Dataset 초기화

	// 공통코드처리
//	this.fn_loadCombo();
}

this.set_FileSN = function(fileSn)
{
	this.g_fileSn = fileSn;
	this.debug('COND:FILE_SN = ' + fileSn);
}

this.set_BSNS_KIND = function(val)
{
	this.ds_cond1.setColumn(0, 'BSNS_KIND', val);
}

/***********************************************************************
 * Form/Dataset 오브젝트 초기화
 ***********************************************************************/
/*
 * 함수명		: initForm
 * 설명			: Form을 초기화한다.
 * params		: None
 * return Type	: None
 * 사용법		: this.initForm();
 */
this.fn_init_form = function()
{
	// 시스템 공통으로 Form을 Initialize 한다.
//	this.gfn_initForm(this);
}

/*
 * 함수명		: fn_init_dataset
 * 설명 		: Dataset을 초기화한다.
 *					주로, 조건 Dataset들(ds_cond, ds_cond_00, ds_cond_01, ...) 을 초기화한다.
 * params		: None
 * return Type	: None
 * 사용법		: this.fn_init_dataset();
 */
this.fn_init_dataset = function()
{
	// 조건에 사용되는 Dataset 초기화
	this.gfn_initCondDs(this, this.div_search);
}

/***********************************************************************
 * 공통 코드 조회
 ***********************************************************************/
/*
 * 함수명		: fn_loadCombo
 * 설명			: 화면의 Combo 에 데이터를 불러온다.
 * params		: None
 * return Type	: None
 * 사용법		: this.fn_loadCombo();
 */
this.fn_loadCombo = function ()
{
/*
	params		: 1. param_1	: 반환받을 DATASET 명			(예: ds_comCode00)
				  2. param_2	: 그룹코드						(예 : COM007)
				  3. param_3	: 사용여부						(예 : 1(사용), ""(사용안함))
				  4. param_4	: 콤보박스INDEX(0) 표시			(예 : "전체", "선택", " "(공백), ""(첫번째데이터부터시작) )
*/
	var comboParams = [
		 ['ds_PRJ010','PRJ010',1,'']		// 
//		,['ds_PRJ016','PRJ016',1,'']		// 
	];

	var callback = function (svcId, errorCode, errorMsg) {
//		this.fn_search();
	};

//	this.gfn_comboLoad (comboParams, callback);
}

/***********************************************************************
* Transaction 영역 시작
************************************************************************/


/***********************************************************************
 * Transaction 관련 이벤트 핸들러 
 **********************************************************************/

/*
 * 함수명		: fn_search
 * 설명			: 조회 이벤트 처리
 * params		: None
 * return Type	: None
 * 사용법		: this.fn_search();
 */
this.fn_search = function()
{
	// 조회
	this.fn_transaction("fileList");
}

this.fn_fileList = function(cd)
{
	this.set_FileSN(cd);

	return this.fn_search(cd);
}

/**********************************************************************
 * CALL TRANSACTION 영역
 **********************************************************************/
/*
 * 함수명		: fn_transaction
 * 설명			: Transaction 요청 처리 함수
 * params		: strSvcId : 서비스요청 ID
 * return Type	: None
 * 사용법		: this.fn_transaction("SELECT");
 */
this.fn_transaction = function(strSvcId)
{
	var ds = this.ds_cond1;
	var ds_s;
	var sCols;
	var sController = "hsco/pms/prj/" + strSvcId + ".do";
	var sInDatasets = "";
	var sOutDatasets = "";
	switch (strSvcId) {
		case "fileList":		// 조회;
			sController = "hsco/pms/prj/fileList.do";
			sInDatasets = "inputF=ds_cond1";
			sOutDatasets = "ds_files=outputF";
			this.ds_files.clearData();
			break;
		case "getFileSn":
			sController = "hsco/cmm/file/getFileSn.do";
			sOutDatasets = "ds_fileSn=output_fsn";
			break;
	}

	this.debug('COND:'+ds.rowcount + '\n' + ds.saveCSV());

	Ex.core.tran(this, strSvcId, sController, sInDatasets, sOutDatasets);// , "", sCallbackFunc, sShowProgress, bAsync, bBinary); 
}

this.fn_upload = function(sController, sInDatasets)
{
	var cnt = this.FileMgr.getfileCount();
	if(cnt) {	// 파일 첨부여부 확인
		this.FileMgr.upload(sController, sInDatasets, '');
	}

	return cnt;
}
	
 /**********************************************************************
 * Transaction Callback 영역
 ***********************************************************************/
 /*
 * 함수명		: fn_callBack
 * 설명			: Transaction Callback 처리
 * params		: strSvcId    : 서비스요청 ID
 *					nErrorCode  : 오류 메시지 코드 ([예] 0 : Success, 그밖의 경우, error)
 *					strErrorMsg : 오류 메시지([예]  success.insert|정상적으로 등록되었습니다.)
 * return Type	: None
 * 사용법		: 
 */
this.fn_callBack = function (strSvcId, nErrorCode, strErrorMsg)
{
this.debug("F:fn_callBack() - " + strSvcId + ',' + nErrorCode + ',' + strErrorMsg);
	if (nErrorCode != 0) 
	{
		// 오류 메시지를 보여주는 동작 외에 처리할 내용이 있으면 아래에 기술.
		// 처리할 내용이 없다면, switch 문은 생략합니다.
		return this.gfn_callback_message(strSvcId, nErrorCode, strErrorMsg);
	}

	switch(strSvcId)
	{
		case "fileList":
			break;
		case "getFileSn":
			var ds = this.ds_fileSn;
 			if(ds.rowcount < 1) return;

			var sn = ds.getColumn(0, "FILE_SN");
			this.g_fileSn = sn;

			var dsM = this.FileMgr.ds_M;
			dsM.setColumn(dsM.rowposition, "FILE_SN", sn);
			this.fn_upFile(sn);
			break;
		case "fileUpload":	// 파일첨부
			break;
	}
}

/**********************************************************************
 * Transaction Callback 영역 끝
 ***********************************************************************/
 
/**********************************************************************
 * Non-Transaction 영역
 ***********************************************************************/

/**********************************************************************
 * 사용자정의 함수
 ***********************************************************************/
this.fn_onFileSelected = function(type, fileFullName){

	if(type != this.FILE_MANAGER.TYPE_UPLOADER) return;

	// 저장시
	var isNmArray = this.pmsUtil.isArray(fileFullName);
	if(!isNmArray) fileFullName = [fileFullName];

	var dsF = this.FILE_MANAGER.ds_files;
	for(var i = 0; i < fileFullName.length; i++) {
		var row = dsF.addRow();
		dsF.setColumn(row, "FILE_SN", this.FILE_MANAGER._fileSn);
		dsF.setColumn(row, "FILE_ORDR", i+1);
		dsF.setColumn(row, "FILE_NM", fileFullName[i]);	// 첨부된 파일 데이터 셋 입력 처리
	}

	var fn = this.FileMgr.pForm.fn_save;
	return fn.call(this.FileMgr.pForm);
}

this.grd_Files_oncellclick = function(obj:Grid, e:nexacro.GridClickEventInfo)
{
	var ds = this.objects[obj.binddataset];
	if(e.cell == obj.getBindCellIndex("body", "FILE_NM"))
	{
		if(1 != ds.getColumn(e.row, 'OTHBC_YN')) return;

		var fileSn = ds.getColumn(e.row, "FILE_SN");
		var fileOrder = ds.getColumn(e.row, "FILE_ORDR");
		var fileName = ds.getColumn(e.row, "FILE_NM");

//		this.debug('Down:' + e.cell + '/' + fileName);
		this.fn_downFile(fileSn, fileOrder, fileName);
	}
	else if(e.cell == obj.getBindCellIndex("body", "BTN"))
	{
		var ds = this.ds_cond1;
		var fileSn = ds.getColumn(0, 'FILE_SN');

		this.debug('Up:' + e.cell + '/' + ds.getColumn(e.row, "FILE_NM"));

		this.fn_upFile(fileSn);
	}

}

this.fn_downFile = function(fileSn, fileOrder, fileName)
{
	this.debug('F_DOWN:'+fileSn+','+fileOrder+','+fileName);

	if(!fileSn || !fileOrder) return;

	this.FileMgr.download(fileSn, fileOrder, fileName);
}

this.fn_upFile = function(fileSn)
{
	this.debug('F_UP:'+fileSn);

	if(!fileSn)
		this.fn_transaction("getFileSn");
	else
		this.FileMgr.addFilesWithSn(fileSn, 1, 0, 1, null);
//		this.FileMgr.addFilesWithSn(fileSn, true, false, true, null);
//		this.FileMgr.addFilesWithSn(fileSn, useMultiUpload, isSingle, useMultiSelect, allowTypes);
}

this.btn_del_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	var ds = this.ds_files;
	ds.deleteRow(ds.rowposition);
}

this.btn_add_onclick = function(obj:Button, e:nexacro.ClickEventInfo)
{
	this.fn_upFile(this.g_fileSn);
}

this.getCode = function(idx:Number)
{
	return this.getData('BSNS_CODE');
}

this.getLabel = function(idx:Number)
{
	return this.getData('BSNS_NM');
}

this.getData = function(sCD:String, idx:Number)
{
	var ds = this.ds_files;
	if(!idx)
		idx = ds.rowposition;

	return ds.getColumn(idx, sCD);
}

this.getDataset = function()
{
	return this.ds_files;
}
]]></Script>
  </Form>
</FDL>
