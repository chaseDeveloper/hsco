<?xml version="1.0" encoding="utf-8"?>
<FDL version="1.5">
  <TypeDefinition url="..\default_typedef.xml"/>
  <Form id="UbiReport" classname="UbiReport" left="0" top="0" width="895" height="780" titletext="New Form" onload="UbiReport_onload" style="font:9 arial;">
    <Layouts>
      <Layout>
        <Button id="Button00" taborder="1" text="Button00" left="696" top="12" width="135" height="94"/>
        <nexacro.UbiViewer id="UbiViewer00" taborder="2" text="UbiViewer00" left="12" top="19" width="672" height="602"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.0"><![CDATA[
this.host = application.services["svcurl"].url;
this.UbiViewer00.resource = "http://" + this.host + "/ubireport/ajax/js4";

this.UbiReport_onload = function(obj:Form, e:nexacro.LoadEventInfo)
{	
	var isRuntime = this.parent.isRuntime;
	var gridObj = this.parent.gridobj;
	var datasets = this.parent.datasets;
	var localdatasets = this.parent.localdatasets;
	var reportFile = this.parent.reportfile;
	var arg = "arg1#1111#arg2#2222#";

	// 리포트가 정의되지 않았을 경우 리턴
	if (reportFile == undefined) {
		alert("리포트 파일명이 정의되지 않았습니다.");
		return;
	}
	
	// ---------------------------------------
	// 리포트 파라미터 설정
	// ---------------------------------------
	this.UbiViewer00.jrffile = reportFile; 
	// HTML의 리포트 통신을 담당할 URL 주소
	
	this.UbiViewer00.gatewayurl = "http://" + this.host + "/UbiGateway";
	// Runtime 실행에서 Data를 가져올 URL (ActiveX에서 사용)
	this.UbiViewer00.dataurl = "http://" + this.host + "/UbiData";
	// 리포트 파일을 가져올 URL (ActiveX에서 사용) : 리포트 파일명을 제외한 디렉토리까지 정의
	this.UbiViewer00.reporturl = "http://192.168.0.10:8880/ubireport/work/";
	this.UbiViewer00.resid = "UBIAJAX";
	this.UbiViewer00.toolbar = true;

	// 추가 2015.03.10 : START
	// 리소스를 가져올 주소 (ActiveX에서 사용)
	this.UbiViewer00.fileurl = "http://" + this.host + "/ubireport/work/property";
	// HTML 뷰어에서만 사용 가능. daemon, gateway 등 모두 Streaming 방식이 적용된 버전을 사용해야 함.
	this.UbiViewer00.isStreaming = true;
	// 추가 2015.03.10 : END

	this.UbiViewer00.arg = arg;

	if (isRuntime == true)
	{
		var formatRowCount = gridObj.getFormatRowCount();
		var formatColCount = gridObj.getFormatColCount();

		var widthArray = new Array;
		var heightArray = new Array;

		var headBgColor = "230.230.230";	// 헤더 배경색 
		var summBgColor = "240.240.240";	// 합계 배경색 
		var i=0;
		var j=0;
		var k=0;

		// Grid의 Row의 높이를 도출
		var subidx = 0;
		var bandtype = "";
		var prebandtype = "";
		var bodyStartRow = 0;
		var summStartRow = 0;
		for (i=0; i<formatRowCount; i++) {
			bandtype = gridObj.getFormatRowProperty(i,"band");
			if (bandtype == prebandtype) {
				subidx++;
			} else {
				subidx = 0;
			}
			
			heightArray[i] = gridObj.getRealRowSize(i, subidx, false);
			prebandtype = bandtype;
		}
		
		// Grid의 Column 넓이 도출
		for (i=0; i<formatColCount; i++) {
			widthArray[i] = gridObj.getRealColSize(i);
		}

		var cellcount = 0;
		var rowcount = 0;

		// ------------------------------------------------------------
		// 디자인정보를 담고있는 Dataset 생성
		// ------------------------------------------------------------
		// 추가 2015.03.10 : START
		// 컬럼 생성
		var designDataset = this.UbiViewer00.getDesignDataset(this);
		/*
		// 위 스크립트에서 dataset 생성
		var designDataset = new Dataset("dsDesign", this);
		designDataset.addColumn("type", "string");
		designDataset.addColumn("row", "string");
		designDataset.addColumn("col", "string");
		designDataset.addColumn("rowspan", "string");
		designDataset.addColumn("colspan", "string");
		designDataset.addColumn("align", "string");
		designDataset.addColumn("text", "string", 10000);
		designDataset.addColumn("bgcolor", "string");
		*/
		// 추가 2015.03.10 : END
		
		prebandtype = "";
		var bandRow = 0;
		var nRow = 0;
		var rowidx = 0;
		var colidx = 0;
		var colspan = 0;
		var rowspan = 0;
		var colwidth = 0;
		var colheight = 0;
		var startIdx = 0;
		var endIdx = 0;
		var bgcolor = "";
		
		// 전체 높이와 넒이를 담은 Row 생성
		nRow = designDataset.addRow();
		designDataset.setColumn(nRow, "type", "widths");
		designDataset.setColumn(nRow, "text", widthArray);
		nRow = designDataset.addRow();
		designDataset.setColumn(nRow, "type", "heights");
		designDataset.setColumn(nRow, "text", heightArray);
		
		for (i=0; i<formatRowCount; i++) {
			bandtype = gridObj.getFormatRowProperty(i,"band");
			if (bandtype != prebandtype) {
				if (bandtype == "head") {
					bandRow = -1;
					bgcolor = headBgColor;
				} else if (bandtype == "body") {
					bandRow = 0;
					bgcolor = "";
				} else if (bandtype == "summ") {
					bandRow = -2;
					bgcolor = summBgColor;
				}
				cellcount = gridObj.getCellCount(bandtype);
				for (j=0; j<cellcount; j++) {
					rowidx = gridObj.getCellProperty(bandtype,j,"row");
					colidx = gridObj.getCellProperty(bandtype,j,"col");
					rowspan = gridObj.getCellProperty(bandtype,j,"rowspan");
					colspan = gridObj.getCellProperty(bandtype,j,"colspan");
				
					nRow = designDataset.addRow();
					designDataset.setColumn(nRow, "type", bandtype);
					designDataset.setColumn(nRow, "row", rowidx);
					designDataset.setColumn(nRow, "col", colidx);
					designDataset.setColumn(nRow, "rowspan", rowspan);
					designDataset.setColumn(nRow, "colspan", colspan);
					designDataset.setColumn(nRow, "align", gridObj.getCellProperty(bandtype,j,"align"));
					if (bandRow != 0) {
						designDataset.setColumn(nRow, "text", gridObj.getCellText(bandRow,j));
					}
					designDataset.setColumn(nRow, "bgcolor", bgcolor);

					// 추가 2015.03.10 : START
					// -----------------------------------------------------
					// 속성변경 테스트
					// Design Dataset 중 순서대로 margin 관련 속성까지만 반영되어 있음.
					// -----------------------------------------------------
					designDataset.setColumn(nRow, "linespace", "4");
					if (j == 2)
					{
						designDataset.setColumn(nRow, "foreground", "255.0.0");
						designDataset.setColumn(nRow, "suppressing", "true");
						designDataset.setColumn(nRow, "fontexpr", "'궁서,1,12'");
						// suppressing과 merge옵션을 함께 쓸 수 없으므로 둘 중 하나만 쓰도록 함.
						//if (bandtype == "body")
						//	designDataset.setColumn(nRow, "merge", "true");
					}
					// -----------------------------------------------------
					// 추가 2015.03.10 : END
				}
			}
			
			prebandtype = bandtype;
		}
		this.addChild(designDataset.name, designDataset);
		
		// ------------------------------------------------------------
		// 그리드의 텍스트를 Dataset으로 생성
		// ------------------------------------------------------------
		cellcount = gridObj.getCellCount("Body");
		rowcount = gridObj.rowcount;
		
		var gridDataset = new Dataset("dsGrid", this);
		this.addChild(gridDataset.name, gridDataset);
		trace("cellcount : " + cellcount);
		// column 생성
		for (i=0; i<cellcount; i++) {
			gridDataset.addColumn("column"+i, "string");
		}
		// 그리드 데이터 입력
		for (j=0; j<rowcount; j++) {
			gridDataset.addRow();
			for (k=0; k<cellcount; k++) {
				gridDataset.setColumn(j, k, gridObj.getCellText(j, k));
			}
		}
		// ------------------------------------------------------------

		// dataset SSV 전송에 필요한 정보 생성
		this.UbiViewer00.setRuntimeData(designDataset, gridDataset);
	
		// 동적으로 생성된 Dataset 제거
		this.removeChild(designDataset.name);
		this.removeChild(gridDataset.name);
	}
	else
	{
		this.UbiViewer00.runtimedata = "";
		if (datasets)
		{
			for (var i=0; i<datasets.length; i++)
			{
				var datasetinfo = datasets[i];
				this.UbiViewer00.addTransaction(this.parent.getOwnerFrame().frame.form, datasetinfo[0], datasetinfo[1], datasetinfo[2], datasetinfo[3], datasetinfo[4], datasetinfo[5]);
			}
		}

		if (localdatasets)
		{
			for (var i=0; i<localdatasets.length; i++)
			{
				var datasetinfo = localdatasets[i];
				trace("datasetinfo[1] : " + datasetinfo[1]);
				this.UbiViewer00.setDataset(datasetinfo[0], datasetinfo[1]);
			}
		}
	}
	
	// retrieve(parent, callback 함수명);
	this.UbiViewer00.retrieve(this, "retrieveEnd");
}

this.retrieveEnd = function()
{
//	alert("retrieveEnd");

//	this.UbiReport00.aboutBox();
//	this.UbiReport00.exportPdf();
//	this.UbiReport00.printSet();
}
]]></Script>
  </Form>
</FDL>
