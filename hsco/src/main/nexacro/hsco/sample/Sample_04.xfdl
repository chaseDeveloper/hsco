<?xml version="1.0" encoding="utf-8"?>
<FDL version="1.5">
  <TypeDefinition url="..\default_typedef.xml"/>
  <Form id="Sample_04" classname="Sample_04" left="0" top="0" width="1039" height="799" titletext="세트 콤보 표준">
    <Layouts>
      <Layout>
        <Div id="div_search" taborder="0" left="20" top="20" height="180" style="border:1 solid #808080ff ;" right="20">
          <Layouts>
            <Layout>
              <Static id="sta_gubun" taborder="0" text="구분" left="14" top="15" width="237" height="20"/>
              <Combo id="cmb_area" taborder="1" left="14" top="45" width="237" height="23" next="cmb_gubun01" innerdataset="@ds_comCode00" codecolumn="CODE" datacolumn="CODE_NM" onitemchanged="div_search_cmb_area_onitemchanged"/>
              <Combo id="cmb_gubun01" taborder="2" left="14" top="77" width="237" height="23" innerdataset="@ds_comCode01" codecolumn="CODE" datacolumn="CODE_NM" next="" onitemchanged="div_search_cmb_gubun01_onitemchanged"/>
              <Combo id="cmb_gubun02" taborder="3" left="14" top="109" width="237" height="23" innerdataset="@ds_comCode02" codecolumn="CODE" datacolumn="CODE_NM"/>
              <Button id="Button00" taborder="4" text="시연" left="667" top="45" width="96" height="103" style="border:2 solid #808080ff ;" onclick="div_search_Button00_onclick"/>
              <Combo id="cmb_gubun00" taborder="5" left="14" top="141" width="237" height="23" innerdataset="@ds_comCode03" codecolumn="CODE" datacolumn="CODE_NM"/>
              <Static id="sta_comment" taborder="6" left="261" top="46" width="372" height="52" wordwrap="english" text="&lt;== User Property [next] 를 생성하여, 연계되는 Combo의 ID를 입력해두어야 한다. (실제 next 참조)" style="align:left top;"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="ds_condCombo00" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="CODE_LVL_1" type="STRING" size="256"/>
          <Column id="CODE_LVL_2" type="STRING" size="256"/>
          <Column id="CODE_LVL_3" type="STRING" size="256"/>
          <Column id="CODE_LVL_4" type="STRING" size="256"/>
          <Column id="CODE_LVL_5" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_condCombo01" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="CODE_LVL_1" type="STRING" size="256"/>
          <Column id="CODE_LVL_2" type="STRING" size="256"/>
          <Column id="CODE_LVL_3" type="STRING" size="256"/>
          <Column id="CODE_LVL_4" type="STRING" size="256"/>
          <Column id="CODE_LVL_5" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_condCombo02" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="CODE_LVL_1" type="STRING" size="256"/>
          <Column id="CODE_LVL_2" type="STRING" size="256"/>
          <Column id="CODE_LVL_3" type="STRING" size="256"/>
          <Column id="CODE_LVL_4" type="STRING" size="256"/>
          <Column id="CODE_LVL_5" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_comCode00" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="GRP_CODE" type="STRING" size="256"/>
          <Column id="CODE_NM" type="STRING" size="256"/>
          <Column id="CODE_CN" type="STRING" size="256"/>
          <Column id="CODE_ORDR" type="STRING" size="256"/>
          <Column id="VAL0" type="STRING" size="256"/>
          <Column id="VAL1" type="STRING" size="256"/>
          <Column id="VAL2" type="STRING" size="256"/>
          <Column id="VAL3" type="STRING" size="256"/>
          <Column id="VAL4" type="STRING" size="256"/>
          <Column id="INT_VAL" type="STRING" size="256"/>
          <Column id="MSTK_VAL" type="STRING" size="256"/>
          <Column id="ETC1" type="STRING" size="256"/>
          <Column id="ETC2" type="STRING" size="256"/>
          <Column id="ETC3" type="STRING" size="256"/>
          <Column id="USE_YN" type="STRING" size="256"/>
          <Column id="ALL_CODE_NM" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_comCode01" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="GRP_CODE" type="STRING" size="256"/>
          <Column id="CODE_NM" type="STRING" size="256"/>
          <Column id="CODE_CN" type="STRING" size="256"/>
          <Column id="CODE_ORDR" type="STRING" size="256"/>
          <Column id="VAL0" type="STRING" size="256"/>
          <Column id="VAL1" type="STRING" size="256"/>
          <Column id="VAL2" type="STRING" size="256"/>
          <Column id="VAL3" type="STRING" size="256"/>
          <Column id="VAL4" type="STRING" size="256"/>
          <Column id="INT_VAL" type="STRING" size="256"/>
          <Column id="MSTK_VAL" type="STRING" size="256"/>
          <Column id="ETC1" type="STRING" size="256"/>
          <Column id="ETC2" type="STRING" size="256"/>
          <Column id="ETC3" type="STRING" size="256"/>
          <Column id="USE_YN" type="STRING" size="256"/>
          <Column id="ALL_CODE_NM" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_comCode02" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="GRP_CODE" type="STRING" size="256"/>
          <Column id="CODE_NM" type="STRING" size="256"/>
          <Column id="CODE_CN" type="STRING" size="256"/>
          <Column id="CODE_ORDR" type="STRING" size="256"/>
          <Column id="VAL0" type="STRING" size="256"/>
          <Column id="VAL1" type="STRING" size="256"/>
          <Column id="VAL2" type="STRING" size="256"/>
          <Column id="VAL3" type="STRING" size="256"/>
          <Column id="VAL4" type="STRING" size="256"/>
          <Column id="INT_VAL" type="STRING" size="256"/>
          <Column id="MSTK_VAL" type="STRING" size="256"/>
          <Column id="ETC1" type="STRING" size="256"/>
          <Column id="ETC2" type="STRING" size="256"/>
          <Column id="ETC3" type="STRING" size="256"/>
          <Column id="USE_YN" type="STRING" size="256"/>
          <Column id="ALL_CODE_NM" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_comCode03" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="GRP_CODE" type="STRING" size="256"/>
          <Column id="CODE_NM" type="STRING" size="256"/>
          <Column id="CODE_CN" type="STRING" size="256"/>
          <Column id="CODE_ORDR" type="STRING" size="256"/>
          <Column id="VAL0" type="STRING" size="256"/>
          <Column id="VAL1" type="STRING" size="256"/>
          <Column id="VAL2" type="STRING" size="256"/>
          <Column id="VAL3" type="STRING" size="256"/>
          <Column id="VAL4" type="STRING" size="256"/>
          <Column id="INT_VAL" type="STRING" size="256"/>
          <Column id="MSTK_VAL" type="STRING" size="256"/>
          <Column id="ETC1" type="STRING" size="256"/>
          <Column id="ETC2" type="STRING" size="256"/>
          <Column id="ETC3" type="STRING" size="256"/>
          <Column id="USE_YN" type="STRING" size="256"/>
          <Column id="ALL_CODE_NM" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_condCombo03" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="CODE_LVL_1" type="STRING" size="256"/>
          <Column id="CODE_LVL_2" type="STRING" size="256"/>
          <Column id="CODE_LVL_3" type="STRING" size="256"/>
          <Column id="CODE_LVL_4" type="STRING" size="256"/>
          <Column id="CODE_LVL_5" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Script type="xscript5.0"><![CDATA[include "lib::comInclude.xjs"

this.div_search_Button00_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	// 이 부분은 실제로는 form_onload 에서 처리될 부분입니다.
	this.fn_loadComboNonCodeTbl();
}

// 아이템을 선택하였을 때...
this.div_search_cmb_area_onitemchanged = function(obj:Combo, e:nexacro.ItemChangeEventInfo)
{
	this.ds_condCombo00.setColumn(0, "CODE_LVL_2", e.postvalue);
	this.fn_loadComboNonCodeTbl("ds_comCode01", obj);
}

/*
 * 함수명  	: fn_loadCombo
 * 설명 		: 화면의 Combo 에 데이터를 불러온다.
 * params  		: None
 * return Type 	: None
 * 사용법		: this.fn_loadComboNonCodeTbl();
 */
this.fn_loadComboNonCodeTbl = function (strDs, obj)
{
/*
params  		: 1. param_1    : 반환받을 DATASET 명 			(예 : ds_comCode00)
                  2. param_2	: 조건 Dataset	명				(예 : "ds_condCombo00")
                  3. param_3	: 사용여부		    			(예 : 1(사용), ""(사용안함))
                  4. param_4	: 콤보박스INDEX(0) 표시		(예 : "전체", "선택", " "(공백), ""(첫번째데이터부터시작) )
                  5. param_5	: Service URL (Controller)
                  6. param_6	: Combo Level (Combo 간 계층구조가 있을 경우, 해당 레벨을 표시한다.)
*/
	var comboParams = [
			["ds_comCode00", "ds_condCombo00", "1", "선택", "hsco/pms/cmp/bsnsAreaCodeList2.do", 1],
			["ds_comCode01", "ds_condCombo00", "1", "선택", "hsco/pms/cmp/locplcCodeList2.do", 2],
			["ds_comCode02", "ds_condCombo02", "1", " ", "hsco/pms/cmp/bsnsAreaCodeList2.do", 0],
			["ds_comCode03", "ds_condCombo03", "1", "", "hsco/pms/cmp/bsnsAreaCodeList2.do", 0]
		];

	this.gfn_comboLoadNonCodeTbl(comboParams, this.fn_callbackAfter, strDs, obj);
}

this.fn_callbackAfter = function (svcId)
{
	switch (svcId) {
		case "ds_comCode00" :
// 			alert("ds_comCode00");
			break;
		case "ds_comCode01" :
// 			alert("ds_comCode01");
			break;
		case "ds_comCode02" :
// 			alert("ds_comCode02");
			break;
		case "ds_comCode03" :
// 			alert("ds_comCode03");
			break;
	}
}

//========================================================================================
// 윗 부분은 Form 에서 처리되는 부분입니다.
// 아랫 부분이 공통함수로 처리될 부분입니다.
//========================================================================================

// strDs : 해당 dataset의 코드만 불러와야 할 경우 기술해 줌. (생략된 경우에는 전체 dataset 을 load.)
this.gfn_comboLoadNonCodeTbl = function (params, callbackAfter, strDs, obj)
{
	if(!this.comUtils.isNullEmpty(strDs)) {
		for (var j = 0; j < params.length; j++)
		{
			var param = params[j];

			if(param[0] == strDs) {
				var v_condVal = this.objects[param[1]].getColumn(0, "CODE_LVL_" + param[5]);
				if(this.comUtils.isNullEmpty(v_condVal)) {
					// TODO
					this.objects[strDs].clearData();
					if(param[3] != " ") {
						this.objects[strDs].addRow();
						
						this.objects[strDs].setColumn(0, "CODE", "");
						this.objects[strDs].setColumn(0, "CODE_NM", param[3]);
						this.objects[strDs].setColumn(0, "ALL_CODE_NM", param[3]);
						
						obj.parent.components[obj.next].set_index(0);
					}
					
					return;
				}
				
				this._loadEachCmb(params, j, callbackAfter);
				break;
			} else {
				continue;
			}
		}
	} else {
		for(var i = 0; i < params.length; i++)
		{
			var param = params[i];

			if(parseInt(param[5]) <= 1) {
				this._loadEachCmb(params, i, callbackAfter);
			}
		}
	}
}

this._loadEachCmb = function (params, no, callbackAfter)
{
	var param = params[no];
	
	var context = this;
	var sSvcID = param[0];
	var sController = param[4];
	var sCallback;
	var strInDsName = "";
// 	var strOutDsName = param[0].trim() + "=output1";
	var objInDs;
	var sArgs = "";

	if(!this.comUtils.isNullEmpty(param[1])) {
		objInDs = this.objects[param[1]];
		var colInfo = objInDs.getColumnInfo("USE_YN");
		if(colInfo == null) {
			objInDs.addColumn("USE_YN", "string");
		}
	} else {
		strInDsName = "ds_condCombo" + this.objects.length.toString().padLeft(2, "0");
		objInDs = this._makeInDataset(strInDsName, params);
		param[1] = strInDsName;
	}
	if(objInDs.rowcount == 0) {
		objInDs.addRow();
	}
	objInDs.setColumn(0, "USE_YN", this._getValidUseYn(param[2]));
	
//	strInDsName = "input1=" + objInDs.name;
	strInDsName = objInDs.name;
	
	var strInDs = "input1=" + objInDs.name;
	var strOutDs = param[0].trim() + "=output1";

	// Callback 함수 정의
	//===================================================
	var _callback = function(svcId, errorCode, errorMsg){
		var objDs = this.objects[param[0]]; // Parameter로 정의된 dataset 얻어오기
		
		// 해당 dataset이 존재하지 않을 경우
		if(this.comUtils.isNullEmpty(objDs)) {
			alert("Dataset " + param[0] + "이 존재하지 않습니다. \n 해당 Dataset을 먼저 생성하십시요.");
			return;
		}

		// 기존 구분자도 적용할 수 있도록...
		//=======================================
		switch(param[3]) {
			case "A" :
				param[3] = "전체";
				break;
			case "S" :
				param[3] = "선택";
				break;
			case "E" :
				param[3] = " ";
				break;
			case "D" :
				param[3] = "";
				break;
		}

		// "전체", "선택" 일 때, dataset에 해당 텍스트를 insert.
		if(!this.comUtils.isNullEmpty(param[3].trim()))
		{
			objDs.insertRow(0);
			
			objDs.setColumn(0, "CODE", "");
			objDs.setColumn(0, "CODE_NM", param[3].trim());
			objDs.setColumn(0, "ALL_CODE_NM", param[3].trim());
		}
		
		// 조건을 처리하는 Division 얻기
		var objDiv = this.div_search;
		if(this.comUtils.isNull(objDiv)) {
			objDiv = this.div_SEARCH;
		}
		if(this.comUtils.isNull(objDiv)) {
			objDiv = this.div_SEARCH_AREA;
		}
		if(this.comUtils.isNull(objDiv)) {
			objDiv = this.div_SEARCHAREA;
		}
		if(this.comUtils.isNull(objDiv)) {
			objDiv = this.div_SearchArea;
		}

		// Combo에 text 나타내기
		var objCurCombo;
// 		for(var j = 0; j < objDiv.components.length; j++)
		for(var j in objDiv)
		{
			var obj = objDiv.components[j];
			
			if(obj instanceof Combo)
			{
				var strInnerDs = obj.innerdataset;
				
				if(!this.comUtils.isNullEmpty(strInnerDs.trim())) {
					this._setTextOne(obj, strInnerDs, param); // 텍스트 나타내는 함수
				}
				
				if(param[0] == strInnerDs) {
					objCurCombo = obj;
					break;
				}
			}
		}

		// 계층 콤보 처리 로직
		if(parseInt(param[5]) > 0) {
			this._procStepCombo (params, no, objCurCombo, callbackAfter);
		}
		
		// callback 이후에 처리할 함수 호출
		if(typeof(callbackAfter) == "function") {
			callbackAfter.call(this, svcId);
		}
	}
	//===================================================

	if(typeof _callback == "function") {
		sCallback = "callback_" + sSvcID;
		context[sCallback] = _callback;
	} else if (typeof callback == "string") {
		sCallback = _callback;
	} else {
		sCallback = "";
	}

	// Transaction 처리
	Ex.core.tran(this, sSvcID, sController, strInDs, strOutDs, sArgs, sCallback);
}

this._setTextOne = function (obj, strInnerDs, param)
{
	if(strInnerDs == param[0]) {			
		if(param[3] == " ") {
			obj.set_index(-1);
		} else {
			obj.set_index(0);
		}
		return;
	}
}

this._procStepCombo = function (params, no, combo, callbackAfter)
{
	var param = params[no];
	var nextParam;
	var nextCombo = combo.parent.components[combo.next];
	
	if(no < (params.length - 1)) {
		nextParam = params[no + 1];
	} else {
		return false;
	}
	
	if(param[5] > 0) {
		var objDs = this.objects[nextParam[1]];
		if(objDs.rowcount == 0) {
			objDs.addRow();
		}
		
		if(nextParam[5] > 0) {
			if(this.comUtils.isNullEmpty(combo.value)) {
				for(var i = no+1; i < params.length; i++) {
					if(params[i][5] > param[5]) {
						this.objects[params[i][0]].clearData();
						if(!this.comUtils.isNullEmpty(nextParam[3])) {
							var nRow = this.objects[params[i][0]].addRow();
							this.objects[params[i][0]].setColumn(nRow, "CODE", "");
							this.objects[params[i][0]].setColumn(nRow, "CODE_NM", params[i][3]);
							this.objects[params[i][0]].setColumn(nRow, "ALL_CODE_NM", params[i][3]);
							
							nextCombo.set_index(0);
							nextCombo = nextCombo.parent.components[nextCombo.next];
							
							this.objects[params[i][1]].setColumn(0, "CODE_LVL_" + params[i][5], "");
						}
					} else {
						break;
					}
				}
				return;
			}
			objDs.setColumn(0, "CODE_LVL_" + (parseInt(param[5]) + 1), combo.value);
			this.gfn_comboLoadNonCodeTbl(params, callbackAfter, nextParam[0]);
		}
	} else {
		return false;
	}
}

this._procStepCombo_OLD = function (params, no, combo, callbackAfter)
{
	var param = params[no];
	var nextParam;
	
	if(no < (params.length - 1)) {
		nextParam = params[no + 1];
	} else {
		return false;
	}
	
	if(param[5] > 0) {
		var objDs = this.objects[nextParam[1]];
		if(objDs.rowcount == 0) {
			objDs.addRow();
		}
		
		if(nextParam[5] > 0) {
			if(this.comUtils.isNullEmpty(combo.value)) {
				this.objects[nextParam[0]].clearData();
				if(!this.comUtils.isNullEmpty(nextParam[3])) {
					var nRow = this.objects[nextParam[0]].addRow();
					this.objects[nextParam[0]].setColumn(nRow, "CODE", "");
					this.objects[nextParam[0]].setColumn(nRow, "CODE_NM", nextParam[3]);
					this.objects[nextParam[0]].setColumn(nRow, "ALL_CODE_NM", nextParam[3]);
					
					combo.parent.components[combo.next].set_index(0);
				}
				
				return;
			}
			
			objDs.setColumn(0, "CODE_LVL_" + (parseInt(param[5]) + 1), combo.value);
			this.gfn_comboLoadNonCodeTbl(params, callbackAfter, nextParam[0]);
		}
	} else {
		return false;
	}
}
]]></Script>
  </Form>
</FDL>
