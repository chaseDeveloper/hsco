<?xml version="1.0" encoding="utf-8"?>
<FDL version="1.5">
  <TypeDefinition url="..\default_typedef.xml"/>
  <Form id="SAM000007" classname="Sample_06" left="0" top="0" width="1039" height="799" titletext="체크버튼 그룹 동적 생성">
    <Layouts>
      <Layout>
        <Grid id="Grid00" taborder="0" useinputpanel="false" left="10" top="48" width="220" height="514" binddataset="ds_exam">
          <Formats>
            <Format id="default">
              <Columns>
                <Col size="80"/>
                <Col size="80"/>
              </Columns>
              <Rows>
                <Row band="head" size="24"/>
                <Row band="body" size="24"/>
              </Rows>
              <Band id="head">
                <Cell col="0" disptype="normal" text="CODE"/>
                <Cell col="1" disptype="normal" text="CODE_NM"/>
              </Band>
              <Band id="body">
                <Cell col="0" disptype="normal" text="bind:CODE"/>
                <Cell col="1" disptype="normal" text="bind:CODE_NM"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
        <Button id="btn_makeChkGroup" taborder="1" text="체크 그룹 만들기" left="9" top="10" width="220" height="29" style="border:2 solid #808080ff ;" onclick="btn_makeChkGroup_onclick"/>
        <Div id="div_chkGrp" taborder="2" left="251" top="10" width="773" height="286" style="border:1 solid #808080ff ;">
          <Layouts>
            <Layout/>
          </Layouts>
        </Div>
        <Button id="btn_makeSearchStr" taborder="3" text="조회 조건 값 만들기" left="9" top="578" width="220" height="29" style="border:2 solid #808080ff ;" onclick="btn_makeSearchStr_onclick"/>
        <TextArea id="txa_explanation" taborder="4" value="I.  공통 함수 원형 위치&#13;&#10;  1. lib::comForm.xjs&#13;&#10;&#13;&#10;II. 사용 함수&#13;&#10;  1. this.gfn_makeCheckGroup = function (ds : Dataset, div : Div, cols)&#13;&#10;&#13;&#10;III.  함수 상세 설명&#13;&#10;  1. gfn_makeCheckGroup&#13;&#10;   * 설명 &#9;&#9;    : Dataset을 토대로 CheckBox를 생성한다.&#13;&#10;   * params  &#9;    : 1. ds - Dataset&#13;&#10;                    2. div - Div&#13;&#10;                    3. cols - CheckBox의 열 수 (예 : 1 - 1줄, 2 - 2줄, ...)&#13;&#10;   * return Type &#9;: 없음&#13;&#10;   * 사용법&#9;&#9;    : this.gfn_makeCheckGroup(this.ds_chkGrp, this.div_chkGrp, 3);&#13;&#10;&#13;&#10;IV. 사용 위치 및 예제&#13;&#10;    1. 함수 사용 위치 설명&#13;&#10;      - CheckBox로 표현할 코드 데이터를 불러온 후, Callback 이후에 처리할 함수에 기술해준다.&#13;&#10;      - 만약, Dataset과 Data를 Form에서 직접 생성한 후, 사용하는 경우에는, Form_onload 이벤트함수에서 사용하면 된다.&#13;&#10;      * 아래 예제에는 편의상, Button을 생성하여 클릭하면 동작하도록 되어 있다.&#13;&#10;&#13;&#10;    2. 사용 예제&#13;&#10;      include &quot;lib::comInclude.xjs&quot;&#13;&#10;      &#13;&#10;      // CheckBox 만들기&#13;&#10;      this.btn_makeChkGroup_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)&#13;&#10;      {&#13;&#10;      &#9;/*******************************************************************************&#13;&#10;      &#9; * 함수 위치   : lib::comForm.xjs&#13;&#10;      &#9; * 함수명  &#9;: gfn_makeCheckGroup&#13;&#10;      &#9; * 설명 &#9;&#9;: Dataset을 토대로 CheckBox를 생성한다.&#13;&#10;      &#9; * params  &#9;&#9;: 1. ds - Dataset&#13;&#10;      &#9;&#9;&#9;&#9;&#9;  2. div - Div&#13;&#10;      &#9;&#9;&#9;&#9;&#9;  3. cols - CheckBox의 열 수 (예 : 1 - 1줄, 2 - 2줄, ...)&#13;&#10;      &#9; * return Type &#9;: None&#13;&#10;      &#9; * 사용법&#9;&#9;: this.gfn_makeCheckGroup(this.ds_chkGrp, this.div_chkGrp, 3);&#13;&#10;      &#9; ******************************************************************************/&#13;&#10;      &#9;this.gfn_makeCheckGroup(this.ds_exam, this.div_chkGrp, 4);&#13;&#10;      }&#13;&#10;      &#13;&#10;      // 체크된 값 가져오기&#13;&#10;      this.btn_makeSearchStr_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)&#13;&#10;      {&#13;&#10;      &#9;alert(this.div_chkGrp.text);&#13;&#10;      }&#13;&#10;" wordwrap="english" readonly="true" left="251" top="307" right="15" bottom="4"/>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="ds_exam" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="CODE_NM" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CODE">1</Col>
            <Col id="CODE_NM">A</Col>
          </Row>
          <Row>
            <Col id="CODE">2</Col>
            <Col id="CODE_NM">B</Col>
          </Row>
          <Row>
            <Col id="CODE">3</Col>
            <Col id="CODE_NM">C</Col>
          </Row>
          <Row>
            <Col id="CODE">4</Col>
            <Col id="CODE_NM">D</Col>
          </Row>
          <Row>
            <Col id="CODE">5</Col>
            <Col id="CODE_NM">E</Col>
          </Row>
          <Row>
            <Col id="CODE">6</Col>
            <Col id="CODE_NM">F</Col>
          </Row>
          <Row>
            <Col id="CODE">7</Col>
            <Col id="CODE_NM">GGGGGGGG</Col>
          </Row>
          <Row>
            <Col id="CODE">8</Col>
            <Col id="CODE_NM">H</Col>
          </Row>
          <Row>
            <Col id="CODE">9</Col>
            <Col id="CODE_NM">I</Col>
          </Row>
          <Row>
            <Col id="CODE">10</Col>
            <Col id="CODE_NM">J</Col>
          </Row>
          <Row>
            <Col id="CODE">11</Col>
            <Col id="CODE_NM">K</Col>
          </Row>
          <Row>
            <Col id="CODE">12</Col>
            <Col id="CODE_NM">L</Col>
          </Row>
          <Row>
            <Col id="CODE">13</Col>
            <Col id="CODE_NM">M</Col>
          </Row>
          <Row>
            <Col id="CODE">14</Col>
            <Col id="CODE_NM">N</Col>
          </Row>
          <Row>
            <Col id="CODE">15</Col>
            <Col id="CODE_NM">O</Col>
          </Row>
          <Row>
            <Col id="CODE">16</Col>
            <Col id="CODE_NM">P</Col>
          </Row>
          <Row>
            <Col id="CODE">17</Col>
            <Col id="CODE_NM">Q</Col>
          </Row>
          <Row>
            <Col id="CODE">18</Col>
            <Col id="CODE_NM">R</Col>
          </Row>
          <Row>
            <Col id="CODE">19</Col>
            <Col id="CODE_NM">S</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Script type="xscript5.0"><![CDATA[include "lib::comInclude.xjs"

// CheckBox 만들기
this.btn_makeChkGroup_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	/*******************************************************************************
	 * 함수 위치   : lib::comForm.xjs
	 * 함수명  	: gfn_makeCheckGroup
	 * 설명 		: Dataset을 토대로 CheckBox를 생성한다.
	 * params  		: 1. ds - Dataset
					  2. div - Div
					  3. cols - CheckBox의 열 수 (예 : 1 - 1줄, 2 - 2줄, ...)
	 * return Type 	: None
	 * 사용법		: this.gfn_makeCheckGroup(this.ds_chkGrp, this.div_chkGrp, 3);
	 ******************************************************************************/
	this.gfn_makeCheckGroup(this.ds_exam, this.div_chkGrp, 4);
}

// 체크된 값 가져오기
this.btn_makeSearchStr_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	alert(this.div_chkGrp.text);
}

// this.cv_nTop = 8;
// this.cv_nLeft = 15;
// this.cv_nH = 21;
// this.cv_nHGap = 8;
// this.cv_nVGap = 8;
// this.cv_nMaxWidth = 50;
// this.cv_nAddPix = 50;
// 
// this.gfn_makeCheckGroup = function (ds : Dataset, div : Div, cols)
// {
// 	if(this.comUtils.isNullEmpty(cols) || cols == 0)
// 	{
// 		cols = 1;
// 	}
// 	
// 	var nLineH = this.cv_nH + this.cv_nHGap;
// 	
// 	this.gfn_destroyAll(div);
// 	
// 	this._makeCheckAll(div);
// 	this._calcMaxWidth(ds);
// 	
// 	for(var i = 0; i < ds.rowcount; i++)
// 	{
// 		var objChk = new CheckBox();
// 		var strId = "chk_" + ds.getColumn(i, "CODE");
// 		var strTxt = ds.getColumn(i, "CODE_NM");
// 		var objSize;
// 		var nW;
// 		var nLeft = this.cv_nLeft + ((this.cv_nMaxWidth + this.cv_nAddPix) * (i % cols));
// 
// 		objChk.init(strId, "absolute", nLeft, this.cv_nTop + nLineH * (nexacro.floor(i / cols) + 1), 100, this.cv_nH);
// 		objChk.set_text(strTxt);
// 
// 		nW = this.cv_nMaxWidth + this.cv_nAddPix;
// 
// 		objChk.set_width(nW);
// 		objChk.addEventHandler("onclick", this._chk_onclick, this);
// 		
// 		div.addChild(strId, objChk);
// 		
// 		objChk.show();
// 	}
// }
// 
// this._chk_onclick = function(obj:CheckBox, e:nexacro.ClickEventInfo)
// {
// 	obj.parent.chk_all.set_value(false);
// 	this.gfn_makeSearchStr(obj.parent);
// }
// 
// this._makeCheckAll = function (div : Div)
// {
// 	var objChk = new CheckBox();
// 	var strId = "chk_all";
// 	var objSize;
// 	var nW;
// 
// 	objChk.init(strId, "absolute", this.cv_nLeft, this.cv_nTop, 100, this.cv_nH);
// 	objChk.set_text("전체 선택");
// 
// 	objSize = this.comUtils.getTextSize("전체 선택", objChk);
// 	nW = (objSize[0] > this.cv_nMaxWidth ? objSize[0] : this.cv_nMaxWidth) + this.cv_nAddPix;
// 	this.cv_nMaxWidth = nW - this.cv_nAddPix;
// 
// 	objChk.set_width(nW);
// 	objChk.addEventHandler("onclick", this._chk_all_onclick, this);
// 	
// 	div.addChild(strId, objChk);
// 	
// 	objChk.show();
// }
// 
// this._chk_all_onclick = function(obj:CheckBox, e:nexacro.ClickEventInfo)
// {
// 	this._checkAll(obj.parent, obj.value);
// 	this.gfn_makeSearchStr(obj.parent);
// }
// 
// this._checkAll = function (obj, bVal)
// {
// 	var comps = obj.components;
// 	for(var i = 0; i < comps.length; i++)
// 	{
// 		comps[i].set_value(bVal);
// 	}
// }
// 
// this._calcMaxWidth = function (ds : Dataset)
// {
// 	var objChk = new CheckBox();
// 	objChk.init("chkTemp", "absolute", this.cv_nLeft, this.cv_nTop, 100, this.cv_nH);
// 	
// 	for(var i = 0; i < ds.rowcount; i++)
// 	{
// 		objChk.set_text(ds.getColumn(i, "CODE_NM"));
// 		objSize = this.comUtils.getTextSize(objChk.text, objChk);
// 		this.cv_nMaxWidth = (objSize[0] > this.cv_nMaxWidth ? objSize[0] : this.cv_nMaxWidth);
// 	}
// 	
// 	// Destroy Object  
// 	objChk.destroy(); 
// 	objChk = null;
// 	
// 	return this.cv_nMaxWidth;
// }
// 
// this.gfn_destroyAll = function (div : Div)
// {
// 	var comps = div.components;
// 	var nCnt = comps.length;
// 	
// 	for(var i = nCnt - 1; i >= 0; --i)
// 	{
// 		var comp = comps[i];
// 		
// 		div.removeChild(comp.name);
// 		comp.destroy();
// 		comp = null;
// 	}
// }
// 
// this.gfn_makeSearchStr = function (div : Div)
// {
// 	var comps = div.components;
// 	var nCnt = comps.length;
// 	var strSearchStr = "";
// 	
// 	for(var i = 0; i < nCnt; i++)
// 	{
// 		var comp = comps[i];
// 		if(comp.name == "chk_all")
// 		{
// 			continue;
// 		}
// 		
// 		if(comp.value)
// 		{
// 			strSearchStr += nexacro.wrapQuote(comp.name.substr(4)) + ",";
// 		}
// 	}
// 	
// 	div.set_text(strSearchStr.substr(0, strSearchStr.length-1));
// 	
// 	alert(div.text);
// }
]]></Script>
  </Form>
</FDL>
