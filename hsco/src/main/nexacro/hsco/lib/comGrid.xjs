<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript5.0"><![CDATA[/*****************************************************************************
 * 프로그램명 		: 	comGrid.xjs
 * 작  성  자  	: 	
 * 작  성  일   	: 	
 * 설      명  		:   그리드 관련 공통함수다.
 * 수  정  자  	: 	 
 * 수 정 이력  	: 	
 * 사용방법	    :   
*******************************************************************************/

/**
*@fileoverview nexacro service library 
*@gfn_GridAdd					: Grid의 데이타 신규 추가
*@gfn_GridInsert				: Grid의 데이타 신규 행 삽입
*@gfn_GridDel					: Grid의 Row 삭제
*@gfn_gridSort					: 그리드의 Sort를 처리
*@gfn_clearSortMark				: Sort Mark 제거
*@gfnSetGridCheckAll			: Grid Head중 check box가 있을 경우, check box 클릭 이벤트 발생시 전체 row에 대한 check/uncheck 설정 함수
*@gfn_isUpdateRow				: 해당 Row가 Update 되었는지 여부
*@gfn_exportExcel				: Grid를 Excel로 Export하는 함수
*@gfn_exportExcelContextMenu	: Context Menu에서 Grid를 Excel로 Export하는 함수
*@_gfn_exportExcelEndError 		: Export 실행 시, 오류 이벤트 처리 함수
*@_gfn_exportExcelEnd 			: Export 실행 시, 성공 이벤트 처리 함수
*@gfn_importExcel				: Excel을 데이타셋으로 Import 하는 함수
*@_gfn_excelImport_onerror 		: Import 실행 시, 오류 이벤트 처리 함수
*@_gfn_excelImport_onsuccess	: Import 실행 시, 성공 이벤트 처리 함수
*@gfn_gridFind					: 그리드 검색 내 찾기 기능
*@gfn_scrollLeftGrid			: Grid를 왼쪽으로 1페이지 스크롤한다.
*@gfn_scrollRightGrid			: Grid를 오른쪽으로 1페이지 스크롤한다.
* @memberof! comGrid
*/

var CONST_ASC_MARK 	= "▲";
var CONST_DESC_MARK = "▼";
var CUR_GRID_OBJECT = null;

/*******************************************************************************
 * Function Name: gfn_gridSort
 * Description  : 그리드의 Sort를 처리한다.
 * Arguments    : object Grid, GridClickEventInfo e
 * Return       : None
 ******************************************************************************/
this.gfn_gridSort = function (obj:Grid, e:GridClickEventInfo)
{
	// 컬럼의 정렬방식을 'head'의 text에 "↑,↓"여부로 판단.
	// 이미지로 대체 가능.
	//sort 방법  asc -> desc -> 해제 -> asc -> desc
	var strType = obj.getCellProperty("head", e.cell, "displaytype");
	if (strType == "checkbox") 
	{
		return;
	}
    
	var bindDs = this.comUtils._getDataset(obj.binddataset);
	
	if (bindDs == -1)
	{
	    application.trace("bind Dataset 확인요");
	    return;
	}
	
	if (bindDs.getRowCount() == 0) 
	{
		return false;
	}

	var BodyColId = (obj.getCellProperty("body", e.col, "text")).toString().split(":");
	
	if (BodyColId.length != 2)
	    return;
	
	var sortStatus="";
	var sSaveHeadText="";
	
	//bindDs.set_enableevent(false);
	for (var i = 0; i < obj.getCellCount("head"); i++) 
	{
		if (obj.getCellText(-1, i) == "undefined") 
		{
			continue;
		}

		var strHeadText = obj.getCellText(-1, i);

		if (i == e.cell) 
		{
			if (strHeadText.substr(strHeadText.length - 1) == CONST_ASC_MARK) 
			{
				obj.setCellProperty("head", i, "text", strHeadText.substr(0, strHeadText.length - 1) + CONST_DESC_MARK);
				bindDs.set_keystring(("S:-" + BodyColId[1]));
				sortStatus = 2;
				sSaveHeadText = strHeadText.substr(0, strHeadText.length - 1);
			}
			else if (strHeadText.substr(strHeadText.length - 1) == CONST_DESC_MARK) 
			{
			    this.gfn_clearSortMark(obj, null, "COM");
			    bindDs.set_keystring("");
			    obj.user_orgSort = "";    //공통에서 sort한 정보 저장
			    return;
			}
			else 
			{
				obj.setCellProperty("head", i, "text", strHeadText + CONST_ASC_MARK);
				bindDs.set_keystring(("S:+" + BodyColId[1]));
				sortStatus = 1;
				sSaveHeadText = strHeadText;
			}			
			
			Eco.XComp.setUserProperty(obj, "sortKeyString", (sortStatus==1?"S:+":"S:-") + BodyColId[1]);
			
		}
		else 
		{
			// 정렬표시 삭제
			if (strHeadText.substr(strHeadText.length - 1) == CONST_ASC_MARK || strHeadText.substr(strHeadText.length - 1) == CONST_DESC_MARK) 
			{
				obj.setCellProperty("head", i, "text", strHeadText.substr(0, strHeadText.length - 1));
			}
		}
	}
	
	obj.user_orgSort = bindDs.keystring;    //공통에서 sort한 정보 저장
	
	// 대상 grid 에 정렬정보를 가지는 사용자 속성 확인/추가
	Eco.XComp.setUserProperty(obj, "sortInfos", {});
	
	// 정렬대상컬럼 (순서중요)
	Eco.XComp.setUserProperty(obj, "sortItems", []);
	
	var refCell;
	var format = obj._curFormat;
	refCell = format._headcells[e.cell];
	
	var sortInfos = Eco.XComp.getUserProperty(obj, "sortInfos"),
	    sortItems = Eco.XComp.getUserProperty(obj, "sortItems"),
		sortInfo = sortInfos[BodyColId[1]];
	
	if ( Eco.isEmpty(sortInfo) )
	{
		// executeSort에서 정렬 표시를 위해 cell index 가 필요한데
		// cell moving 될 경우 index는 변하므로 cell object 를 참조하여 값을 얻어온다. 
		sortInfo = sortInfos[BodyColId[1]] = { status: 0, text: sSaveHeadText, refCell: refCell};
	}
	
	sortInfo.status = sortStatus;
	sortItems.push(BodyColId[1]);
	
	//bindDs.set_enableevent(true);
}

/*******************************************************************************
 * Function Name: gfn_clearSortMark
 * Description  : Sort Mark 제거
 * Arguments    : grdObj: Grid, nCell: cell index, sGb - 공통 처리 여부(COM 일경우 공통 내부적으로 사용)
 * Return       : None
 ******************************************************************************/
this.gfn_clearSortMark = function (obj, nCell, sGb)
{
    var objDs = obj.getBindDataset();
    
    if (objDs.loadkeymode != 'keep' || sGb == 'COM')
    {
		var nColCnt = obj.getCellCount("head");
		var sRepText;

		for (var ii = 0; ii < nColCnt; ii++) 
		{
			if (nCell != null && nCell == ii) 
			{
				continue;
			}

            if (obj.getCellProperty("head", ii, "displaytype") == "checkbox")
                continue;

            if (this.comUtils.isNullEmpty(obj.getCellProperty("head", ii, "text")))
                continue;

			sRepText = obj.getCellProperty("head", ii, "text").split(CONST_ASC_MARK).join("").split(CONST_DESC_MARK).join("");
			obj.setCellProperty("head", ii, "text", sRepText);
		}

	    // 	var bindDs = this.comUtils._getDataset(obj.binddataset);
	    // 	bindDs.set_keystring("");

		// Sort 정보 초기화
		if ( !Eco.isUndefined(Eco.XComp.getUserProperty(obj, "sortInfos")) )
			Eco.XComp.setUserProperty(obj, "sortInfos", {});
			
		if ( !Eco.isUndefined(Eco.XComp.getUserProperty(obj, "sortItems")) )
			Eco.XComp.setUserProperty(obj, "sortItems", []);
    }
}

/********************************************************************************
 * Function Name	: gfnSetGridCheckAll										*
 * Desc				: Grid Head중 check box가 있을 경우, check box 클릭 이벤트 발생시 전체 row에 대한 check/uncheck 설정 함수	*
 * Parameter		: obj = Grid												*
 *					  e = GridClickEventInfo									*
 * Return 			: 															*
 ********************************************************************************/
this.gfn_setGridCheckAll = function (obj:Grid, e:GridClickEventInfo)
{
	if (obj.readonly == true) 
	{
		return;
	}

	var strVal;
	var strChkCol;
	var dsObj;

	dsObj = this.comUtils._getDataset(obj.binddataset);
	if(Eco.isNull(obj.getCellProperty("body", e.col, "text")) || Eco.isUndefined(obj.getCellProperty("body", e.col, "text")))
	{
		strChkCol = "";
	}
	else
	{
		strChkCol = obj.getCellProperty("body", e.col, "text");
	}
// 	strChkCol = this.gfn_nvl(obj.getCellProperty("body", e.col, "text"), "");

	strChkCol = strChkCol.split("bind:").join("");

	var strType = obj.getCellProperty("head", e.cell, "displaytype");
	if (strType != "checkbox") 
	{
		return;
	}

	// Head셋팅
	strVal = obj.getCellProperty("head", e.cell, "text");
	if (this.comUtils.isNullEmpty(strVal)) 
	{
		strVal = "0";
	}

	if (strVal == "0") 
	{
		obj.setCellProperty("head", e.cell, "text", '1');
		strVal = "1";
	}
	else
	{
		obj.setCellProperty("head", e.cell, "text", '0');
		strVal = "0";
	}

	// Body셋팅
	dsObj.set_enableevent(false);
	for (var i = 0; i < dsObj.getRowCount(); i++) 
	{
		dsObj.setColumn(i, strChkCol, strVal);
	}
	dsObj.set_enableevent(true);
}

/***************work***********************/

	/**
	 * Grid innerdataset에서 지정한 Row Item의 데이터를 Map형으로 반환한다.
	 * 특정컬럼을 지정할 경우 지정한 RowItem에서 해당 컬럼의 값(String)을 반환한다.
	 * @param grid 대상 Grid
	 * @param rowIdx 대상 RowIndex
	 * @param columnId 대상 컬럼ID
	 * @return Object(String/Map)
	 */
this.gfn_getGridItem = function(grid, rowIdx, columnId){
		var result = null;
		var gridDsNm = grid.binddataset;  // String 
		var gridDs = this.lookup(gridDsNm);
		
		result = this._gfn_getDatasetSelectedItem(gridDs, rowIdx, columnId);
		
		return result;
	}
	
	/**
	 * Grid innerdataset에서 지정한 Row Item의 데이터를 Map형으로 반환한다.
	 * 특정컬럼을 지정할 경우 지정한 RowItem에서 해당 컬럼의 값(String)을 반환한다.
	 * @param grid 대상 Grid
	 * @param rowIdx 대상 RowIndex 배열
	 * @param columnId 대상 컬럼ID
	 * @return Object(String/Map)
	 */
this.gfn_getGridItems = function(grid, rowIdxArr, columnId){
		var result = null;
		var gridDsNm = grid.binddataset;  // String 
		var gridDs = this.lookup(gridDsNm);
		
		result = this._gfn_getDatasetSelectedItem(gridDs, rowIdxArr, columnId);
		
		return result;
	}
	
	/**
	 * Grid innerdataset에서 선택된 Row Item의 데이터를 Map형으로 반환한다.
	 * 특정컬럼을 지정할 경우 선택된 RowItem에서 해당 컬럼의 값(String)을 반환한다.
	 * @param grid 대상 Grid
	 * @param columnId 대상 컬럼ID
	 * @return Object(String/Map)
	 */
this.gfn_getGridSelectedItem = function(grid, columnId){
		var result = null;
		var gridDsNm = grid.binddataset;  // String 
		var gridDs = this.lookup(gridDsNm);

		// todo
		var selIndex = gridDs.rowposition;  // Bug
		
		result = this._gfn_getDatasetSelectedItem(gridDs, selIndex, columnId);
		
		return result;
	}
	
	/**
	 * Grid innerdataset에서 선택된 Row Item의 데이터 중 지정한 columnId에 value 값으로 변경한다.
	 * @param grid 대상 Grid
	 * @param columnId 대상 컬럼ID
	 * @param value 변경 값
	 * @return Boolean
	 */
this.gfn_setGridSelectedItemValue = function(grid, columnId, value){
		var result = null;
		var gridDsNm = grid.binddataset;  // String 
		var gridDs = this.lookup(gridDsNm);

		var selIndex = gridDs.rowposition;
		
		var result = gridDs.setColumn(selIndex, columnId, value);
		
		return result;
	}
	
	/**
	 * Grid innerdataset에서 선택된 복수의 Row Item의 데이터를 Map형으로 반환한다.
	 * 특정컬럼을 지정할 경우 선택된 RowItem에서 해당 컬럼의 값(String)을 반환한다.
	 * @param grid 대상 Grid
	 * @param columnId 대상 컬럼ID
	 * @return Object(String/Map)
	 */
this.gfn_getGridSelectedItems = function(grid, columnId){
		var result = null;
		var gridDsNm = grid.binddataset;  // String 
		var gridDs = this.lookup(gridDsNm);
		var selIdxArr = grid.getSelectedDatasetRows();
		
		result = this._gfn_getDatasetSelectedItem(gridDs, selIdxArr, columnId);
		
		return result;
	}
	
	/**
	 * Grid innerdataset에서 선택된 Row Item의 데이터를 삭제한다.
	 * 삭제 결과를 Boolean 값으로 반환한다.
	 * @param grid 대상 Grid
	 * @return boolean
	 */
this.gfn_deleteGridSelectedItem = function(grid){
		var result = null;
		var gridDsNm = grid.binddataset;  // String 
		var gridDs = this.lookup(gridDsNm);
		var selIdxArr = grid.getSelectedDatasetRows();
		
		result = gridDs.deleteRow(selIdxArr);
		
		return result;
	}
	
	/**
	 * Grid innerdataset에서 수정(신규,수정)된 Row Item의 ArrayList<Map>형으로 반환한다.
	 * 삭제된 행의 정보는 hasDelete 값이 true일 경우에만 포함한다.
	 * @param grid 대상 Grid Component
	 * @param hasDelete 삭제 행 포함여부
	 * @return ArrayList
	 */
this.gfn_getGridUpdatedItems = function(grid, hasDelete){
		var result = null;
		var hasDelete = this.comUtils.isNullEmpty(hasDelete) ? false : hasDelete;
		
		var gridDsNm = grid.binddataset;  // String 
		var gridDs = this.lookup(gridDsNm);
		var isUpdated = this.comUtils.isDatasetUpdated(gridDs);
		
		if(isUpdated){
			var rowsArr = [];
			var dsLeng = gridDs.getRowCount();
			for(var i = 0; i < dsLeng; i++){
				var rowType = gridDs.getRowType(i);
				if(rowType == Dataset.ROWTYPE_INSERT || rowType == Dataset.ROWTYPE_UPDATE){
					rowsArr.push(i);
				}
				
				if(hasDelete && rowType == Dataset.ROWTYPE_DELETE){
					rowsArr.push(i);
				}
			}
			
			var option = {
				viewRow : rowsArr
			};
			result = this.gfn_datasetToObject(gridDs, option, true);
		}
		
		return result;
	}
	
	/**
	 * Grid innerdataset에서 신규 Row Item의 데이터를 ArrayList<Map>형으로 반환한다.
	 * @param grid 대상 Grid Component
	 * @return ArrayList
	 */
this.gfn_getGridInsertItems = function(grid){
		var result = null;
		
		var gridDsNm = grid.binddataset;  // String 
		var gridDs = this.lookup(gridDsNm);
		var isUpdated = this.comUtils.isDatasetUpdated(gridDs);
		
		if(isUpdated){
			var rowsArr = [];
			var dsLeng = gridDs.getRowCount();
			for(var i = 0; i < dsLeng; i++){
				var rowType = gridDs.getRowType(i);
				if(rowType == Dataset.ROWTYPE_INSERT){
					rowsArr.push(i);
				}
			}
			
			var option = {
				viewRow : rowsArr
			};
			result = this.gfn_datasetToObject(gridDs, option, true);
		}
		
		return result;
	}
	
	/**
	 * Grid innerdataset에서 수정 Row Item의 데이터를 ArrayList<Map>형으로 반환한다.
	 * @param grid 대상 Grid Component
	 * @return ArrayList
	 */
this.gfn_getGridModifyItems = function(grid){
		var result = null;
		
		var gridDsNm = grid.binddataset;  // String 
		var gridDs = this.lookup(gridDsNm);
		var isUpdated = this.comUtils.isDatasetUpdated(gridDs);
		
		if(isUpdated){
			var rowsArr = [];
			var dsLeng = gridDs.getRowCount();
			for(var i = 0; i < dsLeng; i++){
				var rowType = gridDs.getRowType(i);
				if(rowType == Dataset.ROWTYPE_UPDATE){
					rowsArr.push(i);
				}
			}
			
			var option = {
				viewRow : rowsArr
			};
			result = this.gfn_datasetToObject(gridDs, option, true);
		}
		
		return result;
	}
	
	/**
	 * Grid innerdataset에서 삭제 Row Item의 데이터를 ArrayList<Map>형으로 반환한다.
	 * @param grid 대상 Grid Component
	 * @return ArrayList
	 */
this.gfn_getGridDeleteItems = function(grid){
		var result = null;
		
		var gridDsNm = grid.binddataset;  // String 
		var gridDs = this.lookup(gridDsNm);
		var isUpdated = this.comUtils.isDatasetUpdated(gridDs);
		
		if(isUpdated){
			var rowsArr = [];
			var dsLeng = gridDs.getRowCount();
			for(var i = 0; i < dsLeng; i++){
				var rowType = gridDs.getRowType(i);
				
				if(rowType == Dataset.ROWTYPE_DELETE){
					rowsArr.push(i);
				}
			}
			
			var option = {
				viewRow : rowsArr
			};
			result = this.gfn_datasetToObject(gridDs, option, true);
		}
		
		return result;
	}
/**
	 * 특정Dataset의 특정 행 데이터를 Map 또는 String으로 반환한다.
	 */
this.gfn_getDatasetItem = function(targetDs, rowIndex, columnId){
		return this._gfn_getDatasetSelectedItem(targetDs, rowIndex, columnId);
	}
	
	/*
	 * 특정 Dataset의 선택 행 데이터를 Map 또는 String으로 반환한다.
	 */
this._gfn_getDatasetSelectedItem = function(targetDs, selIndex, columnId){
		var result = null;
		
		var idxIsNull = this.comUtils.isNullEmpty(selIndex);
		var colIsNull = this.comUtils.isNullEmpty(columnId);
		
		var rowIndex = idxIsNull ? targetDs.rowposition : selIndex;
		var isMultiSelect = this.comUtils.isArray(rowIndex);
		var isMultiColumn = colIsNull ? true : this.comUtils.isArray(columnId);
		
		if(isMultiSelect || isMultiColumn){
			var option = {};
			if(colIsNull){
				option["viewRow"] = isMultiSelect ? selIndex : [rowIndex];
			}else{
				option["viewRow"] = isMultiSelect ? selIndex : [rowIndex];
				option["viewCol"] = columnId;
			}
			result = this.gfn_datasetToObject(targetDs, option, true);
		}else{
			result = targetDs.getColumn(selIndex, columnId);
		}
		
		return result;
	}
/******************work**************************/



/********************************************************************************
 * Function Name	: gfn_isUpdateRow - 이동됨 (comUtil.xjs)  					*
 * Desc				: 해당 Row가 Update 되었는지 여부							*
 * Parameter		: objDs = Dataset											*
 *					  nRow = Row  												*
 * Return 			: 															*
 ********************************************************************************/
this.gfn_isUpdateRow = function(objDs:Dataset, nRow)
{
    var bRetVal = false;
    
    for  (var i=0; i<objDs.getColCount(); i++)
    {
        var sColId = objDs.getColID(i);
        if (sColId == "chk")
            continue;
            
        if (objDs.getColumn(nRow, i) == objDs.getOrgColumn(nRow,i))
            continue;
            
        bRetVal = true;
        break;
    }
    
    return bRetVal;
}

/********************************************************************************
 * Function Name	: gfn_exportExcel										*
 * Desc				: Grid를 Excel로 Export하는 함수
 * Parameter		: obj = 단일Export -  Grid Object  , 다수Export - Array Objec[Grid Object,Grid Object]							*
 *					  sFileName - Export될 파일명									*
 * Return 			: 															*
 ********************************************************************************/
this.gfn_exportExcel = function(targetGrid,sFileName,param)
{
	this.setWaitCursor(true,true);
	var sExportObjName = "obj_commonExport";
	var exportObj = new ExcelExportObject();
	var dToday = new Date();
	var sSheetName;
// 	var sSvcUrl = application.services["svcurl"].url+"/com/XExportImport.do";
	var sSvcUrl = application.services["svcurl"].url+"XExportImport.do";
	var _param = "";
	exportObj.set_name(sExportObjName);
	exportObj.addEventHandler("onsuccess", this._gfn_exportExcelEnd, this);
	exportObj.addEventHandler("onerror", this._gfn_exportExcelEndError, this);
	exportObj.clearExportItems(nexacro.ExportTypes.EXCEL2007);
	
	
// 	if(!this.comUtils.isNullEmpty(sFileName)){
// 		sFileName = dToday.getTime() + "_" + sFileName;
// 	}else{
// 		sFileName = dToday.getTime();
// 	}
	
	if (targetGrid instanceof Grid) {
	    sSheetName = "Sheet1!A1";
	    exportObj.addExportItem(nexacro.ExportItemTypes.GRID, targetGrid, sSheetName,"allband","allrecord","suppress","onlyvalue","none","color,background","both");
	   //exportObj.addExportItem(nexacro.ExportItemTypes.GRID, targetGrid, "Sheet1!A1");
	} else {
	    for(var i=0; i<targetGrid.length; i++) {
	        sSheetName = "A"+(i+1);
	        oGrid = obj[i];
	        exportObj.addExportItem(nexacro.ExportItemTypes.GRID, targetGrid,  sSheetName + "!A1","allband","allrecord","suppress","none","background","font", "both");
	    }
	}
	
	exportObj.set_exporttype(nexacro.ExportTypes.EXCEL2007);	
	exportObj.set_exportfilename(sFileName);
	exportObj.set_exporturl(sSvcUrl);

	if(!param){
		_param = "cntn_file=N";
	}else{
		//전자결재 파일첨부기능사용
		_param = "cntn_file=Y svcurl="+application.services["svcurl"].url+" extrSantn="+param;
	}
	var result = exportObj.exportData(_param);
}

/********************************************************************************
 * Function Name	: gfn_exportExcelContextMenu										*
 * Desc				: Context Menu를 통해 Grid를 Excel로 Export하는 함수
 * Parameter		: obj = 단일Export -  Grid Object  , 다수Export - Array Objec[Grid Object,Grid Object]							*
 *					  sFileName - Export될 파일명									*
 *                    prvonshUseAt - 엑셀다운로드사유팝업 사용 여부 *
 * Return 			: 															*
 ********************************************************************************/
this.gfn_exportExcelContextMenu = function(targetGrid, sFileName, prvonshUseAt, param)
{
	
	var sExportObjName = "obj_commonExport";
	var exportObj = new ExcelExportObject();
	var dToday = new Date();
	var sSheetName;
	var sSvcUrl = application.services["svcurl"].url+"XExportImport.do";
	var _param = "";
	
	var usrId    = this.gfn_getUserId();
	var usrNm    = this.gfn_getUserName();
	var conectIp = this.gfn_getConectIp();
	
	var date = new Date();
	var dwldDe = date.getFullYear();
	dwldDe += "-" + (date.getMonth() + 1).toString().padLeft(2, "0");
	dwldDe += "-" + date.getDate().toString().padLeft(2, "0");
	dwldDe += " " + date.getHours().toString().padLeft(2, "0");
	dwldDe += ":" + date.getMinutes().toString().padLeft(2, "0");
	dwldDe += ":" + date.getSeconds().toString().padLeft(2, "0");
	
	var str = "[출력자ID : ";
	str += usrId;
	str += ", 출력자명 : ";
	str += usrNm;
	str += ", 출력자IP : ";
	str += conectIp;
	str += ", 출력일시 : ";
	str += dwldDe + "]";
	
	exportObj.set_name(sExportObjName);
	exportObj.addEventHandler("onsuccess", this._gfn_exportExcelEnd, this);
	exportObj.addEventHandler("onerror", this._gfn_exportExcelEndError, this);
	exportObj.clearExportItems(nexacro.ExportTypes.EXCEL2007);
	
	if (!this.comUtils.isNullEmpty(sFileName)) {
		sFileName = sFileName;
	} else  {
		sFileName = dToday.getTime();
	}
	sFileName = sFileName.split("/").join("");
	
	if(prvonshUseAt != "Y") {	// 다운로드 사유 미사용
		if (targetGrid instanceof Grid) {
			sSheetName = "Sheet1!A1";
			exportObj.addExportItem(nexacro.ExportItemTypes.GRID, targetGrid, sSheetName,"allband","allrecord","suppress","onlyvalue","none","color,background","both");
		}
		
		exportObj.set_exporttype(nexacro.ExportTypes.EXCEL2007);
		exportObj.set_exportfilename(sFileName.substr(0, sFileName.indexOf("(")));
		exportObj.set_exporturl(sSvcUrl);
		exportObj.set_exportuitype("exportprogress");
		exportObj.set_exportmessageprocess( "%d건(%d / %d)                    ");
		
		if (!param) {
			_param = "cntn_file=N";
		} else {
			//전자결재 파일첨부기능사용
			_param = "cntn_file=Y svcurl="+application.services["svcurl"].url+" extrSantn="+param;
		}
		this.setWaitCursor(true,true);
		var result = exportObj.exportData(_param);
	} else {					// 다운로드 사유 사용
		var parm = {
			pUsrId		: usrId
		   ,pFileName	: sFileName
		   ,pConectIp	: conectIp
		};
		this.gfn_popup("excelExportPrvonshPopup", 500, 300, "엑셀다운로드사유팝업" , parm, "common::excelExportPrvonshPopup.xfdl", "excelExportPrvonshPopupCallBack", true);
		
		this.excelExportPrvonshPopupCallBack = function(strID, variant)
		{
			var dsTemp = new Dataset();
			var loadCnt = dsTemp.loadXML(variant);
			
			// 값이 존재하지 않을 경우에는 아무런 값을 덮어쓰지 않음
			if(loadCnt > 0) {
				if (targetGrid instanceof Grid) {
					sSheetName = "Sheet1!A1";
					exportObj.addExportItem(nexacro.ExportItemTypes.GRID, targetGrid, sSheetName,"allband","allrecord","suppress","onlyvalue","none","color,background","both");
				}
				
				exportObj.set_exporttype(nexacro.ExportTypes.EXCEL2007);
				exportObj.set_exportfilename(sFileName.substr(0, sFileName.indexOf("(")));
				exportObj.set_exporturl(sSvcUrl);
				exportObj.set_exportuitype("exportprogress");
				exportObj.set_exportmessageprocess( "%d건(%d / %d)                    ");
				
				if (!param) {
					_param = "cntn_file=N";
				} else{
					//전자결재 파일첨부기능사용
					_param = "cntn_file=Y svcurl="+application.services["svcurl"].url+" extrSantn="+param;
				}
				this.setWaitCursor(true,true);
				var result = exportObj.exportData(_param);
			}
		}
	}
}

this._gfn_exportExcelEndError = function(obj:ExcelExportObject, e:nexacro.ExcelExportErrorEventInfo)
{
    this.setWaitCursor(false,true);
}

this._gfn_exportExcelEnd = function(obj:ExcelExportObject, e:nexacro.ExcelExportEventInfo)
{
	this.setWaitCursor(false,true);
}

this.gfn_exportExcelList = function(arrTarget, sFileName)
{
	this.setWaitCursor(true,true);
	var sExportObjName = "obj_commonExport";
	var exportObj = new ExcelExportObject();
	var dToday = new Date();
	var sSheetName;
	var sSvcUrl = application.services["svcurl"].url+"XExportImport.do";
	var _param = "";
	exportObj.set_name(sExportObjName);
	exportObj.addEventHandler("onsuccess", this._gfn_exportExcelEnd, this);
	exportObj.addEventHandler("onerror", this._gfn_exportExcelEndError, this);
	exportObj.clearExportItems(nexacro.ExportTypes.EXCEL2007);
	
	
	if(!this.comUtils.isNullEmpty(sFileName)){
		sFileName = dToday.getTime() + "_" + sFileName;
	}else{
		sFileName = dToday.getTime();
	}
	
	for(i = 0 ; i < arrTarget.length; i++) {
		exportObj.addExportItem(nexacro.ExportItemTypes.GRID, arrTarget[i].grid, arrTarget[i].sheetName + "!A1","allband","allrecord","suppress","onlyvalue","none","color,background","both");
	}
	
	exportObj.set_exporttype(nexacro.ExportTypes.EXCEL2007);	
	exportObj.set_exportfilename(sFileName);
	exportObj.set_exporturl(sSvcUrl);

	var result = exportObj.exportData("cntn_file=N");
}

/********************************************************************************
 * Function Name	: gfn_importExcel										*
 * Desc				: Excel을 데이타셋으로 Import 하는 함수
 * Parameter		: obj = 단일Export -  Grid Object  , 다수Export - Array Objec[Grid Object,Grid Object]							*
 *					  sFileName - Export될 파일명									*
 * Return 			: 															*
 ********************************************************************************/
//********************************************* START *******************************************************
this.gfn_importExcel = function(arg)
{
	var importObj, objNm = "_common_excel_import";
	
	importObj = new nexacro.ExcelImportObject(objNm, this);
	this[objNm] = importObj;
	importObj.set_importtype(nexacro.ImportTypes.EXCEL);
	importObj.addEventHandler("onsuccess", this._gfn_excelImport_onsuccess, this);
	importObj.addEventHandler("onerror", this._gfn_excelImport_onerror, this);	
// 	importObj.set_importurl(application.services["svcurl"].url + "/com/XImport.do");
	importObj.set_importurl(application.services["svcurl"].url + "XImport.do");
//	importObj.user_menuId = this.getOwnerFrame().arguments.menuId;
	
	importObj.user_callBack = null;
	importObj.user_targetGrid = null;
    
    var objTargetDs = null;

    if(arg.targetDs) {
		objTargetDs = arg.targetDs.name;
    } else if (arg.targetGrid) {
		importObj.user_targetGrid = arg.targetGrid.id;
        objTargetDs = arg.targetGrid.getBindDataset().name;
    }

    if (typeof arg.callBack == "function") {
		importObj.user_callBack = arg.callBack;
    }

	if (!arg.headSet) {
	    importObj.importData("", "[command=getsheetdata;output=outDs;body=!A1;]", "["+objTargetDs+"=outDs]","");	
	} else {
		importObj.importData("", "[command=getsheetdata;output=outDs;Head=!A1:ZZ1;body=!A2;]", "["+objTargetDs+"=outDs]","");		  //헤더 정보 지정 시
	}
}

//onsuccess Event
this._gfn_excelImport_onsuccess = function(obj:ExcelImportObject,  e:nexacro.ExcelImportEventInfo)
{    
	this.setWaitCursor(false);
// 	if (this.utils.isValid(obj.user_targetGrid)) {
// 	    this[obj.user_targetGrid].createFormat();
// 	}
    
    if (typeof obj.user_callBack == 'function') {
        obj.user_callBack.call(this);
	}
	this._common_excel_import.destroy();
}

//onerror Event
this._gfn_excelImport_onerror = function(obj:ExcelImportObject,  e:nexacro.ExcelImportErrorEventInfo)
{
	trace(e.errormsg);
// 	this.utils.log(e.errormsg, e);
// 	var time;
// 	time = setTimeout(function(){
// 		var form = application.gv_AppWorkFrameSet["Child_" + obj.user_menuId].form.components.div_Work;
// 		form._common_excel_import.destroy();
// 		form.setWaitCursor(false);
// 		clearTimeout(time);
// 	}, 200);
	this._common_excel_import.destroy();	
}
//********************************************* END *******************************************************

/*******************************************************************************
 * Function Name: gfn_scrollLeftGrid
 * Description	: Grid를 왼쪽으로 1페이지 스크롤한다.
 * Arguments	: obj - 그리드 Component                  
 * Return 		: 
 ********************************************************************************/
this.gfn_scrollLeftGrid = function(obj)
{
	var objHScrollBar = obj.hscrollbar;
	var objVScrollBar = obj.vscrollbar;
	var nPos = parseInt(objHScrollBar.pos);
	var nScrollAmt = parseInt(obj.width) - 10;
	
	if(objVScrollBar.enable)
	{
		nScrollAmt -= parseInt(objVScrollBar.width);
	}

	objHScrollBar.set_pos(nPos - parseInt(nScrollAmt));
}

/*******************************************************************************
 * Function Name: gfn_scrollRightGrid
 * Description	: Grid를 오른쪽으로 1페이지 스크롤한다.
 * Arguments	: obj - 그리드 Component                  
 * Return 		: 
 ********************************************************************************/
this.gfn_scrollRightGrid = function(obj)
{
	var objHScrollBar = obj.hscrollbar;
	var objVScrollBar = obj.vscrollbar;
	var nPos = parseInt(objHScrollBar.pos);
	var nScrollAmt = parseInt(obj.width) - 10;
	
	if(objVScrollBar.enable)
	{
		nScrollAmt -= parseInt(objVScrollBar.width);
	}

	objHScrollBar.set_pos(nPos + parseInt(nScrollAmt));
}

/*******************************************************************************
 * Function Name: gfn_gridSize
 * Description	: Grid 또는 Grid를 포함하고 있는 Division 등을 좌우로 확장 또는 원래 크기로 되돌린다.
 * Arguments	: obj - Button, objTarget -  Grid 또는 Grid를 포함하고 있는 Div, Tab 등
 * Return 		: 
 ********************************************************************************/
this.gfn_gridSize = function (obj:Button, objTarget)
{
	var nLeft;
	if(obj.cssclass == "btn_WF_Gridexpand") // 화면 확장
	{
		objTarget.orgleft = objTarget.left;
		objTarget.orgtop = objTarget.top;
		objTarget.orgwidth = objTarget.width;
		objTarget.orgheight = objTarget.height;
		objTarget.orgright = objTarget.right;
		objTarget.orgbottom = objTarget.bottom;
		
		objTarget.set_left(15);
		objTarget.set_right(15);
		
		obj.set_cssclass("btn_WF_Gridreduce");
	}
	else // 화면 축소
	{
		objTarget.set_left(objTarget.orgleft);
		objTarget.set_top(objTarget.orgtop);
		objTarget.set_width(objTarget.orgwidth);
		objTarget.set_height(objTarget.orgheight);
		objTarget.set_right(objTarget.orgright);
		objTarget.set_bottom(objTarget.orgbottom);

		obj.set_cssclass("btn_WF_Gridexpand");
	}
}

/*******************************************************************************
 * Function Name: gfn_getCheckData
 * Description	: Grid의 Check 된 데이터만 가져온다.
 * Arguments	: grid - 해당 Grid, bindCol - Check Col.
 * Return 		: dataset
 ********************************************************************************/
this.gfn_getCheckData = function (grid:Grid, bindCol)
{
	var dsRtn = new Dataset;
	var dsSrc;
	var strBindDataset = grid.binddataset;

	if(this.comUtils.isNullEmpty(this.objects["ds_checked_data"]))
	{
		this.addChild("ds_checked_data", dsRtn);
	}
	else
	{
		dsRtn = this.objects["ds_checked_data"];
		dsRtn.clearData();
	}
	
	dsRtn.set_name("ds_checked_data");
	dsRtn.set_updatecontrol(false);
	
	if(this.comUtils.isNullEmpty(strBindDataset))
	{
		alert("해당 Grid에 Bind된 Dataset이 없습니다.");
		return dsRtn;
	}

	dsSrc = this.objects[strBindDataset];
	
	dsRtn.copyData(dsSrc);
	dsRtn.clearData();
	
	for(var i = 0; i < dsSrc.rowcount; i++)
	{
		var vChk = dsSrc.getColumn(i, bindCol);
		
		if(this.comUtils.isNullEmpty(vChk))
		{
			vChk = "0";
		}
		
		if(vChk.toString() != "0")
		{
			var vRowType = dsSrc.getRowType(i);
			var nRow = dsRtn.addRow();
			dsRtn.copyRow(nRow, dsSrc, i);
			dsRtn.setRowType(nRow, vRowType);
		}
	}
	
	return dsRtn;
}



// =========== 이후 함수는 Customizing 및 표준화가 필요하여 보류함 / 사용하지 않음 =========== //

/********************************************************************************
 * Function Name	: gfn_GridAdd												*
 * Desc				: Grid의 데이타 신규 추가                                	*
 * Parameter		: objDs(object) - 바인드 데이타셋							*
 *                    sEnableEventYn - enable 이벤트 발생 여부				*
 *					  sFlagColId(String) - Flag Column							*
 * Return 			: nDr - 신규 추가 행    									*
 ********************************************************************************/
this.gfn_GridAdd = function (objGrid:Grid,sEnableEventYn,sFlagColId)
{
    //20140827 - 0번째 행으로 Insert
    var objDs = this.objects[objGrid.binddataset];
    
    if (objDs.getRowCount() == 0)
    {   
		if (this.comUtils.isNull(sFlagColId))
			sFlagColId = "_flag";

		if (this.comUtils.trimString(sEnableEventYn)=='N')
			objDs.set_enableevent(false);

		var nDr = objDs.addRow();
		//objDs.setColumn(nDr, "_flag", "I");
		
		if (this.comUtils.trimString(sEnableEventYn)=='N')
			objDs.set_enableevent(true);
	} else {
	    var nDr = this.gfn_GridInsert(objGrid,0,sEnableEventYn,sFlagColId);
	}
	
	return nDr;
}

/********************************************************************************
 * Function Name	: gfn_GridInsert											*
 * Desc				: Grid의 데이타 신규 행삽입                             	*
 * Parameter		: objDs(object) - 바인드 데이타셋							*
                      nRow - 삽입 할 행
                      sEnableEventYn - 이벤트 발생 여부
 *					  sFlagColId(String) - Flag Column							*
 * Return 			: nDr - 신규 추가 행										*
 ********************************************************************************/
this.gfn_GridInsert = function (objGrid:Grid,nRow,sEnableEventYn,sFlagColId)
{
    var objDs = this.objects[objGrid.binddataset];
    
    if (objDs.getRowCount() == 0)
    {
        return this.gfn_GridAdd(objGrid,sEnableEventYn,sFlagColId);
    }
    
    if (this.comUtils.isNull(nRow))
        nRow = objDs.rowposition;
    
    if (this.comUtils.isNull(sFlagColId))
        sFlagColId = "_flag";
    
    if (this.comUtils.trimString(sEnableEventYn)=='N')
        objDs.set_enableevent(false);
    
    if (objDs.rowposition == 0)
        objDs.set_rowposition(-1);

    var nDr = objDs.insertRow(nRow);
    objDs.rowposition = nDr;
	
	if (this.comUtils.trimString(sEnableEventYn)=='N')
        objDs.set_enableevent(true);
	
	return nDr;
}
/********************************************************************************
 * Function Name	: gfn_GridDel												*
 * Desc				: Grid의 Row 삭제                                         	*
 * Parameter		: objDs(object) - 바인드 데이타셋							*
 *                    sEnableEventYn - Dataset enableEvent 발생 여부			*
 *                    sDelFlagColId - 살제 대상 컬럼							*
 *					  sFlagColId(String) - Flag Column							*
 *                    nRow - 삭제 행											*
 * Return 			: 처리 건수   										*
 ********************************************************************************/
this.gfn_GridDel = function (objGrid:Grid, sEnableEventYn, sDelFlagColId, sFlagColId, nRow)
{
    var objDs = this.objects[objGrid.binddataset];

    if (this.comUtils.isNull(sDelFlagColId)) sDelFlagColId = "chk";

    if (objDs.findRow(sDelFlagColId, "1") == -1)
        return 0;
    
    var nRetCnt=0;
    
    objGrid.set_enableevent(false);
    objDs.set_enableevent(false);
    objDs.set_updatecontrol(false);
    
    for (var i=objDs.getRowCount()-1; i>-1; i--)
    {
        if (objDs.getColumn(i, sDelFlagColId) == '1')
        {
            if( objDs.getRowType(i) == Dataset.ROWTYPE_INSERT) {
                objDs.deleteRow(i);
            } else if (objDs.getRowType(i) ==  Dataset.ROWTYPE_UPDATE) {
                //삭제 요청 시 전체 해당 로우의 데이타를 초기화 한다.
				for (var ii=0; ii<objDs.getColCount(); ii++)
				{
					var sColId = objDs.getColID(ii);
					
					if (sColId == sFlagColId || sColId == sDelFlagColId)
						continue;
					
					var sOrgColData = objDs.getOrgColumn(i,sColId);
					var sColData = objDs.getColumn(i,sColId);
					
					objDs.setColumn(i, sColId, sOrgColData);
				}

                objDs.setRowType(i, Dataset.ROWTYPE_DELETE);
                nRetCnt++;
            } else {
                objDs.setRowType(i, Dataset.ROWTYPE_DELETE);
                nRetCnt++;
            }
        }
    }
    objDs.set_updatecontrol(true);
    objDs.set_enableevent(true);
    objGrid.set_enableevent(true);
    
    return nRetCnt;
}

/*******************************************************************************
 * Function Name: gfn_gridFind
 * Description	: 그리드 검색 내 찾기 기능
 * Arguments	: objGrid - 그리드 Component                  
 * Return 		: 
 ********************************************************************************/
this.gfn_gridFind = function(objGrid:Grid,sGb)
{
    var objPopup = application.popupframes["commonGrdFindPopup"];
    
    if (!this.comUtils.isNull(objPopup))
    {
        objPopup.setFocus();
        return;
    }

    var objBindDs = objGrid.getBindDataset();
    var sParam = {pv_Grid:objGrid,pv_Dataset:objBindDs};
	this.gfn_popupOpen("commonGrdFindPopup", sParam, "COM_DIV::commonGridFindPopup.xfdl", "", 400, 188, this);
    return true;
}

/*******************************************************************************
 * Description	: 그리드 체크박스 이벤트
 ********************************************************************************/
this.gfn_gridBindDs_cancolumnchange = function(obj:Dataset, e:nexacro.DSColChangeEventInfo)
{
    if (e.columnid == "chk" || (obj._commonChkIgnoreUpdate && e.columnid in obj._commonChkIgnoreUpdate)) {
        if (obj.getRowType(e.row) == Dataset.ROWTYPE_NORMAL ) {
			obj.set_updatecontrol(false);
        }
    }
}

/*******************************************************************************
 * Description	: 그리드 체크박스 이벤트
 ********************************************************************************/
this.gfn_gridBindDs_oncolumnchanged = function(obj:Dataset, e:nexacro.DSColChangeEventInfo)
{
    if (e.columnid == "chk" || (obj._commonChkIgnoreUpdate && e.columnid in obj._commonChkIgnoreUpdate)) {
		var colIdx = e.columnid == "chk" ? 0 : obj._commonChkIgnoreUpdate[e.columnid];
		if (!obj.updatecontrol) {
			obj.set_updatecontrol(true);
		}
		
		// 삭제 실행후 체크 해제시 삭제 취소
		if (e.columnid == "chk" && obj.getRowType(e.row)== Dataset.ROWTYPE_DELETE && e.newvalue == '0') {
			obj.set_updatecontrol(false);
			obj.setRowType(e.row, Dataset.ROWTYPE_NORMAL);
			obj.set_updatecontrol(true);
		}
		
		// 바디 체크박스에 따라 헤드체크박스 컨트롤
		if (obj.gridObject.getCellProperty("head", 0, "edittype") == "checkbox") {
		    var headCheckFlag = obj.getSumNF(e.columnid + '=="1"') == obj.getRowCount() ? "1" : "0";
		    obj.gridObject.setCellProperty( "Head", colIdx, "text", headCheckFlag);
		}
    }
}

/********************************************************************************
 * Description	: 그리드 헤더 클릭    --  임시적으로 처리 (조건 : 헤더 한줄에 head:body=1:1)
 ********************************************************************************/
this.gfn_grid_onheadclick = function (obj:Grid, e:nexacro.GridClickEventInfo)
{
    var objBindDs = obj.getBindDataset();
        
    if (obj.getCellProperty("head", e.cell, "edittype") == "checkbox")
    {
        if (objBindDs.getRowCount() == 0 && obj.getCellText(-1, e.cell) == '1')
        {
            obj.setCellProperty( "Head", e.cell, "text", '0');
            return false;
        }
    
        var sColId = obj.getCellProperty("body", e.cell, "text").replace(/bind:/, "");
        this.gfn_setGridCheckAllExpr(obj, e.cell, sColId);
        return true;
    } else {
        if (obj.user_sort == 'Y' && obj.user_autoSort != "N")        
            this.gfn_gridSort(obj, e);

        return true;
    }
}

/********************************************************************************************************
 * Desc				: Grid Header Click 시 조건에 맞는 항목만 체크한다.								*
 ********************************************************************************************************/
this.gfn_setGridCheckAllExpr = function (obj:Grid, nCell, strColId, strExpr, nMaxCnt)
{
	var celltype = this.comUtils.trimString(obj.getCellProperty("head", nCell, "displaytype"));
	//null인 경우
	if(celltype == -1) {
		return;
	}
	
	if(this.comUtils.isNull(strColId)) {
		return;
	}

	if (celltype.toUpperCase() != "CHECKBOX") {	
		return;
	}
	var strTrueValue	= "1";
	var strFalseValue	= "0";
	var strNewValue = (obj.getCellText(-1, nCell) == strTrueValue) ? strFalseValue : strTrueValue;
	var objDs = this.comUtils._getDataset(obj.binddataset);
	this.gfn_setColumnAllExpr(obj, objDs, strColId, strNewValue, strFalseValue, strExpr, nMaxCnt);

	obj.setCellProperty("Head", nCell, "text", strNewValue);
}

/********************************************************************************************************
 * Desc				: Dataset의 Column 값을 조건에 따라 일괄 변경한다.								*
 ********************************************************************************************************/
this.gfn_setColumnAllExpr = function (obj, objDs, strColId, strValue, strDefault, strExpr, nMaxCnt) 
{
	if (objDs.getRowCount() > 0) {
		if (nMaxCnt == null || nMaxCnt == "" || nMaxCnt <= 0) {
			nMaxCnt	= objDs.getRowCount();
		}
		var nChkCnt	= 0;

        
		objDs.set_enableevent(false);
		
		if (strColId=="chk")
			objDs.set_updatecontrol(false);
		for (var i=0; i<objDs.getRowCount(); i++) {
		
		    objDs.setColumn(i, strColId, strValue);
			nChkCnt++;
			
		    if (objDs.getRowType(i) == Dataset.ROWTYPE_UPDATE) {
		    } else if (objDs.getRowType(i) == Dataset.ROWTYPE_NORMAL) {
		        
		    }
		}
		
		if (strColId=="chk")
			objDs.set_updatecontrol(true);
		objDs.set_enableevent(true);
	}
}

/********************************************************************************************************
 * Desc				: Grid의 잔상효과를 강제로 없애준다.											*
 ********************************************************************************************************/
this.gfn_removeNoise = function(grid:Grid)
{
	if(this.comUtils.isNullEmpty(grid.left))
	{
		grid.set_left(parseInt(grid.left) + 1);
		grid.set_left(parseInt(grid.left) - 1);
		return;
	}
	if(this.comUtils.isNullEmpty(grid.top))
	{
		grid.set_left(parseInt(grid.top) + 1);
		grid.set_left(parseInt(grid.top) - 1);
		return;
	}
	if(this.comUtils.isNullEmpty(grid.right))
	{
		grid.set_left(parseInt(grid.right) + 1);
		grid.set_left(parseInt(grid.right) - 1);
		return;
	}
	if(this.comUtils.isNullEmpty(grid.bottom))
	{
		grid.set_left(parseInt(grid.bottom) + 1);
		grid.set_left(parseInt(grid.bottom) - 1);
		return;
	}
}

/***********************************************************************************
* 설명	: 현재 컨테이너의 그리드에 이벤트 핸들러 설정(컨테이너이면 재귀호출)
***********************************************************************************/	
this._gfn_initGridEventHandler = function(area)	
{
	var len = area.components.length;

	for(var i=0; i<len; i++){ 
	
		var item = area.components.get_item(i);
		
		if(item instanceof Grid){

		    item.addEventHandler("onrbuttondown",this._gfn_gridOnRbttHandler,this);
		    //그리드 필터링 관련 초기화 작업
		    // 그리드 헤드 영역 추가 필터기능 사용을 위한 초기화
			this.initGridHeadAppendFilter(item);
		} else if (item instanceof Div || item instanceof Tab || item instanceof Tabpage) {

			this._gfn_initGridEventHandler(item);
		}//else{ 그리드를 찾지 못하고 종료하는 경우 있어 주석처리
		   //return false;
		//}
	}
}	
 
	
/***********************************************************************************
* 설명	: 그리드의 기능확장을 위한 팝업메뉴 및 데이터셋을 생성한다.
***********************************************************************************/
this.gfn_initGridCommon = function(){
	
	this._gfn_initGridEventHandler(this);
 	/*
 	var len = this.components.length;
 	
 	for(var i=0; i<len; i++){
	
 		var item = this.components.get_item(i);
 		if(item instanceof Grid){
 		   
 		   item.addEventHandler("onrbuttondown",this._gfn_gridOnRbttHandler,this);
 		    
 		    //그리드 필터링 관련 초기화 작업
		    // 그리드 헤드 영역 추가 필터기능 사용을 위한 초기화
 			this.initGridHeadAppendFilter(item);
 		}
 	}
    */
    var ds = new Dataset;
    var ds_rntSort = new Dataset;
    var objPopupMenu = new PopupMenu("PopupMenu", "absolute","608px","83px","142px","211px",null,null);
    var curRow = 0;
   
    var codeVal  = ["01","02","03","04"];
    var dataVal  = ["다중정렬","필터사용","엑셀다운"];
    var levelVal = ["0","0","0","0"];
    var idVal    = ["0","1","2","3"];
 	    
    ds.addColumn("CODE", "string");
	ds.addColumn("DATA", "string");
	ds.addColumn("LEVEL", "string");
	ds.addColumn("ID", "string");
	
    ds_rntSort.addColumn("IDX", "string");
    ds_rntSort.addColumn("COL_NM", "string");
    ds_rntSort.addColumn("COL_ID", "string");
    ds_rntSort.addColumn("SORT_SE", "string");
	
	
	ds.set_name("ds_popupMenu");
    ds_rntSort.set_name("ds_rntSort");
    
    for(var i = 0 ; i < 3 ; i++)
    {
	   //필터 제거부분
       //if(i == 1) continue; // 필터추후구현
       
       curRow = ds.addRow();
       ds.setColumn(curRow,"CODE",codeVal[i]);
       ds.setColumn(curRow,"DATA",dataVal[i]);
       ds.setColumn(curRow,"LEVEL",levelVal[i]);
       ds.setColumn(curRow,"ID",idVal[i]);
    }
	
	this.addChild("ds_popupMenu", ds);
	this.addChild("ds_rntSort", ds_rntSort);
	
	objPopupMenu.set_innerdataset(ds);
	objPopupMenu.set_captioncolumn("DATA");
    objPopupMenu.set_idcolumn("ID");
    objPopupMenu.set_levelcolumn("LEVEL");
	objPopupMenu.set_userdatacolumn("CODE");
	objPopupMenu.style.set_border("1 solid lightgrey"); 
    objPopupMenu.style.set_itemborder("1 solid bisque,0 none #f7cc8cff,1 solid lightgrey,0 none #f7cc8cff"); 
	objPopupMenu.style.set_itemheight("30");
	objPopupMenu.style.set_itempadding("0 8 0 8");
	objPopupMenu.style.set_background("bisque");
	
	objPopupMenu.setEventHandler("onmenuclick",this._gfn_pmenuHandler,this);
	this.addChild("PopupMenu", objPopupMenu);
	objPopupMenu.show();	
}

/***********************************************************************************
* 설명	: 그리드 기능확장 팝업메뉴 메뉴표시
***********************************************************************************/
this._gfn_gridOnRbttHandler = function(obj:Grid, e:nexacro.GridMouseEventInfo)
{
    this.CUR_GRID_OBJECT = obj;
    
	var nX = system.screenToClientX(this, e.screenX);
	var nY = system.screenToClientY(this, e.screenY);
	//var nX = system.screenToClientX(this, e.screenX) + parseInt(obj.left);
	//var nY = system.screenToClientY(this, e.screenY) + parseInt(obj.top);
	
	//팝업 메뉴가 뜨는 시점에서 현 그리드의 Filter 상태를 체크하여
	//팝업메뉴 수정함
	var nCurRow = this.ds_popupMenu.findRow("CODE", "02");
	var show = Eco.XComp.getUserProperty(this.CUR_GRID_OBJECT, "showFilter");
	var text = show ? "필터제거" : "필터사용";
	this.ds_popupMenu.setColumn(nCurRow, "DATA", text);		
	
	this.PopupMenu.trackPopup(nX + 225, nY + 115, "right bottom");
}

/***********************************************************************************
* 설명	: 그리드 기능확장 팝업메뉴 메뉴클릭
***********************************************************************************/
this._gfn_pmenuHandler = function(obj:PopupMenu, e:nexacro.MenuClickEventInfo)
{
  var menu = e.userdata;
	
	switch (menu) {		
	  
	   case "01":
	      var parm = {
				arg_0 : this,
				arg_1 : this.CUR_GRID_OBJECT
			};
			
		  this.gfn_popup("Popup_Sort", 300, 200, "", parm, "common::frmGridSort.xfdl", "gfn_gridSort_callback",true);
	
	   break;
	   
	   case "02":
	        /* 
	          var dataVal = this.ds_popupMenu.getColumn(e.id,"DATA");
	          var cnt =  this.div_work.grd_batchRstlList.getFormatRowCount();
	          var band = "";
	          var idx = 0;
	          var colCnt = this.div_work.grd_batchRstlList.getFormatColCount();
	          
	          for(var i = 0 ; cnt > i ; i++)
	          {
	             
	            band = this.div_work.grd_batchRstlList.getFormatRowProperty(i,"band");
	           
	            if(band == "head" ) idx++;
	          }
	         
	          if(dataVal == "필터")
	          {
	              this.ds_popupMenu.setColumn(e.id,"DATA","필터제거");
	              this.div_work.grd_batchRstlList.insertContentsRow("head",idx);
	              
                  this.div_work.grd_batchRstlList.set_cellmovingtype("col");									
	             
	              
	          }else{
	              this.ds_popupMenu.setColumn(e.id,"DATA","필터");
	              this.div_work.grd_batchRstlList.deleteContentsRow("head",idx-1);
	          }
            */
            
			
			var show = Eco.XComp.getUserProperty(this.CUR_GRID_OBJECT, "showFilter");
			//var nCurRow = this.ds_popupMenu.findRow("CODE", menu);
			
			if ( show )
			{		
				this.hideHeadAppendFilter(this.CUR_GRID_OBJECT);
			}
			else
			{
				this.showHeadAppendFilter(this.CUR_GRID_OBJECT);
			}
			
			show = show ? false : true;
			//var text = show ? "필터제거" : "필터사용";
			//this.ds_popupMenu.setColumn(nCurRow, "DATA", text);			

			Eco.XComp.setUserProperty(this.CUR_GRID_OBJECT, "showFilter", show);	
            
	   break;
	   
	   //엑셀다운
	   case "03":
			var tabIndex = application.gv_mdiFrame.form.tab_mdi.tabindex;
			var menuNm = application.gds_openMenu.getColumn(tabIndex, "MENU_NM");
			var indvdlinfoAt = application.gds_openMenu.getColumn(tabIndex, "INDVDLINFO_AT");
			var gridNm = this.CUR_GRID_OBJECT.name;
			var excelFileNm = menuNm + "(" + gridNm + ")";
			this.gfn_exportExcelContextMenu(this.CUR_GRID_OBJECT, excelFileNm, indvdlinfoAt);
	   break; 
	    
	    }
	    
}	  
	     
// 그리드 정렬 콜백	    
this.gfn_gridSort_callback = function(id,rtn)
{
     this.ds_rntSort.loadXML(rtn);
  
     var ds = this[this.CUR_GRID_OBJECT.binddataset];
     
     var keySt = "S:";
     
     for(var i = 0 ; i < this.ds_rntSort.getRowCount() ; i++)
     {
        keySt = keySt + this.ds_rntSort.getColumn(i,"SORT_SE") + this.ds_rntSort.getColumn(i,"COL_ID");
     }
 
     ds.set_keystring(keySt);
     
}




/******************************************************************************
**그리드 헤드 영역 추가 필터기능 관련 function(필터링)
******************************************************************************/

/**
 * Grid head에 filer 기능 추가하기 초기화
 * @param {Grid} grid 대상 Grid Component
 */
this.initGridHeadAppendFilter = function(grid)
{
	// 대상이 이미 초기화 되었는지 확인
	if ( Eco.XComp.getUserProperty(grid, "initGridHeadAppendFilter") )
	{
		return;
	}
	
	// 필터영역(Div) 컴포넌트 name 을 담아둘 속성 추가
	Eco.XComp.setUserProperty(grid, "appendFilterCompNameList", []);
	
	// 필터적용 정보를 담아둘 속성 추가
	Eco.XComp.setUserProperty(grid, "filterInfos", {});
	
	// 사용자에 의해 셀이 이동된 경우 필터 관련 컴포넌트 재배치
	this.setUserGridOnCellMoved(grid, this.arrangeAppendFilterComps, this);
	
	// 사용자에 의해 컬럼 사이즈가 변경된 경우 필터 관련 컴포넌트 재배치
	this.setUserGridOnColResized(grid, this.arrangeAppendFilterComps, this);

	// add onhscroll handler - 가로 스크롤 발생 시 컴포넌트 재배치
	grid.addEventHandler("onhscroll", this.arrangeAppendFilterComps, this);
	
	// 초기화 설정 완료 속성 지정 - 초기화 재설정 방지용
	Eco.XComp.setUserProperty(grid, "initGridHeadAppendFilter", true);	
}


/**
 * Grid head append filter 보이기
 * @param {Grid} grid 대상 Grid Component
 */
this.showHeadAppendFilter = function(grid)
{	
	var index = Eco.XComp.getUserProperty(grid, "appendHeadRowIndex");	
	if ( Eco.isUndefined(index) )
	{
		index = grid.appendContentsRow("head");
		
		// 추가된 head row index를 담아두어 제거시 사용
		Eco.XComp.setUserProperty(grid, "appendHeadRowIndex", index);
		
		this.arrangeAppendFilterComps(grid);
	}
}

/**
 * Grid head append filter 숨기기 (필터제거 포함)
 * @param {Grid} grid 대상 Grid Component
 */
this.hideHeadAppendFilter = function(grid)
{
	var index = Eco.XComp.getUserProperty(grid, "appendHeadRowIndex");
	if ( !Eco.isUndefined(index) )
	{
		grid.deleteContentsRow("head", index);
		
		// Div 숨기기 및 값 초기화
		var comps = grid.parent.components;
		var comp, nameList = Eco.XComp.getUserProperty(grid, "appendFilterCompNameList");
		for (var i=0,len=nameList.length; i<len; i++)
		{
			comp = comps[nameList[i]];
			if ( comp )
			{
				comp.set_visible(false);			
				comp.initValue();
			}
		}
				
		// 정보 초기화
		Eco.XComp.deleteUserProperty(grid, "appendHeadRowIndex");
		
		this.clearFilter(grid);
	}
}

/**
 * Grid head append filter 기능에 필요한 컴포넌트 생성 및 위치 조정
 * @param {Grid} grid 대상 Grid Component
 */
this.arrangeAppendFilterComps = function(grid, e)
{
	var index = Eco.XComp.getUserProperty(grid, "appendHeadRowIndex");
	
	if ( Eco.isUndefined(index) ) return;
	
	// 스크롤 이벤트에 의해 호출된 경우
	var adjustRectSize = 0;
	if ( e ) 
	{
		switch(e.type)
		{
			// 아래의 경우 처리 불필요
			case 'trackfirstover' :
			case 'tracklastover' :
			case 'trackstart' :
				return;
				break;
			case 'track' :
			case 'pageleft' :
			case 'pageright' :
				// 이 type 으로 이벤트가 발생한 시점에 rect이 정확치 않다.	
				// getCellRect 에서 scroll 값을 참조하는데 scroll 이벤트 발생 후 값이 반영되는 듯 하다.
				Eco.XComp.Event.requestAnimationFrame(this.arrangeAppendFilterComps, this, grid);
				return;
				break;
		}
	}
	
	var form = grid.parent;
	var nameList = Eco.XComp.getUserProperty(grid, "appendFilterCompNameList");
	var comp, comps = form.components;
	for (var i=0,len=nameList.length; i<len; i++)
	{
		comp = comps[nameList[i]];
		if ( comp )
		{
			comp.set_visible(false);
		}
	}	
	
	var filterInfos = Eco.XComp.getUserProperty(grid, "filterInfos");
	
	var gridLeftPos = grid.getOffsetLeft();
	var gridTopPos = grid.getOffsetTop();
	var gridWidth = grid.getOffsetWidth();
	var gridPos = [gridLeftPos, gridTopPos, gridLeftPos + gridWidth, gridTopPos + grid.getOffsetBottom()];
	var borderWidths = Eco.XComp.Style.getBorderWidth(grid);
	var scrollWidth = grid.vscrollbar ? grid.vscrollbar.getOffsetWidth() : 0;		
	
	var rect, rects = [];
	var cellCnt = grid.getCellCount("head");
	var bodyCellIndex, columnName, comp, name, type, info;
	var col, colspan, band, pivotIndex;
	var l, t, w, h;
	
	// band "left", "body", "right" 를 고려하여 현재 보이는 셀 영역을 찾는다.
	var hScrollPos = grid.hscrollbar ? grid.hscrollbar.pos : 0;
	var hScrollMax = grid.hscrollbar ? grid.hscrollbar.max : 0;
	var vScrollWidth = grid.vscrollbar ? grid.vscrollbar.getOffsetWidth() : 0;
	var areaLeft = 0;
	var areaRight = grid.getOffsetWidth() - vScrollWidth;
	var makeInfo = [];
	
	// head 'left' and 'right' band
	for (var i=0; i<cellCnt; i++)
	{	
		if ( grid.getCellProperty("head", i, "row") == index )
		{
			col = grid.getCellProperty("head", i, "col");
			band = grid.getFormatColProperty(col, "band");
			
			if ( band == "body" ) continue;
			
			rect = grid.getCellRect(-1, i, Eco.decode(band, "left", -1, "right", -2, 0));
			
			if ( band == "left" )
			{
				l = rect.left;
				r = rect.right;
				areaLeft = Math.max(areaLeft, rect.right);
			}
			else if ( band == "right" )
			{
				l = rect.left - hScrollMax;
				areaRight = Math.min(areaRight, l);
			}
			
			makeInfo.push({
				'cell': i, 
				'left': l,
				'top': rect.top,
				'width': rect.width,
				'height': rect.height
			});
		}
	}
	
	// head 'body' band	
	for (var i=0; i<cellCnt; i++)
	{	
		if ( grid.getCellProperty("head", i, "row") == index )
		{
			col = grid.getCellProperty("head", i, "col");
			band = grid.getFormatColProperty(col, "band");
						
			if ( band == "body" )
			{
				rect = grid.getCellRect(-1, i, 0);
				
				l = rect.left;
				r = rect.right;
				
				if ( r > areaLeft && l < areaRight )
				{
					if ( l < areaLeft )
					{
						l = areaLeft;				
					}
					
					if ( r > areaRight )
					{
						r = areaRight;
					}

					w = r - l;
					
					// 보이는 셀 영역 최소 기준 값 적용
					if ( w >= 50 )
					{
						makeInfo.push({
							'cell': i, 
							'left': l,
							'top': rect.top,
							'width': r - l,
							'height': rect.height
						});	
					}
				}
			}
		}
	}

	// 현재 보이는 cell 영역에 필터 입력 영역 생성
	var len = makeInfo.length;
	var info;
	for (var i=0; i<len; i++)
	{	
		info = makeInfo[i];		
		bodyCellIndex = this.getBodyCellIndex(grid, info.cell);
		columnName = this.getBindColumnNameByIndex(grid, bodyCellIndex);
		type = grid.getCellProperty("body", bodyCellIndex, "displaytype");
		
		if ( Eco.isUndefined(type) ) type = "normal";
		
		name = grid.name + "_headAppendComp" + i;
		
		// 컴포넌트가 존재하지 않으면 추가
		if ( Eco.array.indexOf(nameList, name) < 0 )
		{
			nameList.push(name);
			
			comp = new Div(name, "absolute", 0, 0, 0, 0);
			comp.style.set_border("0px none #ffffff");
			comp.set_scrollbars("none");
			comp.set_async(false);
			comp.set_visible(false);				
			form.addChild(comp.name, comp);
			comp.set_url("common::GridFilterDiv.xfdl");
			comp.show();
		}
		else
		{
			comp = form.components[name];
			
			// 내용 초기화
			comp.initValue();
		}
		
		// Div에 참조값 지정
		Eco.XComp.setUserProperty(comp, "grid", grid);
		Eco.XComp.setUserProperty(comp, "refCell", this.getGridCellObject(grid, "head", info.cell));
		Eco.XComp.setUserProperty(comp, "displayType", type);
		Eco.XComp.setUserProperty(comp, "filterColumnName", columnName);
		Eco.XComp.setUserProperty(comp, "filterInfo", filterInfos[columnName]);
		
		// 필터 정보 지정
		comp.setFilterInfo();
	
		// 위치 조정
		l = gridPos[0] + info.left;
		t = gridPos[1] + info.top + borderWidths[1];
		w = info.width - 1;
		h = info.height - 1;
		
		comp.move(l, t, w, h);
		comp.set_visible(true);
	}
	
	var div = Eco.XComp.getUserProperty(grid, "currentFocusDiv");
	if ( !Eco.isEmpty(div) ) div.setFocus();
}

/**
 * Grid head append filter 기능에 추가된 컴포넌트 제거
 * @param {Grid} grid 대상 Grid Component
 */
this.removeAppendFilterComps = function(grid)
{
	var form = grid.parent;
	var comps = form.components;
	var comp, nameList = Eco.XComp.getUserProperty(grid, "appendFilterCompNameList");
	var removed;
	for (var i=0,len=nameList.length; i<len; i++)
	{
		comp = comps[nameList[i]];
		if ( comp )
		{
			removed = form.removeChild(comp.name);
			removed.destroy();
		}
	}
}


/******************************************************************************
	4. 필터 처리 core function
******************************************************************************/
// 필터 가능 표시 이미지
//this.FILTER_ENABLE_IMAGE_URL = "image::grd_filter_combo.png";
this.FILTER_ENABLE_IMAGE_URL = "theme://images/grd_filter_combo.png";
this.FILTER_ENABLE_IMAGE_SIZE = [17, 15];

// 필터 적용 표시 이미지
//this.FILTER_APPLY_IMAGE_URL = "image::grd_filter_check.png";
this.FILTER_APPLY_IMAGE_URL = "theme://images/grd_filter_check.png";
this.FILTER_APPLY_IMAGE_SIZE = [17, 15];

/**
 * 대상 그리드에서 주어진 컬럼에 해당하는 필터 정보를 반환한다.
 * @param {Grid} grid 대상 Grid Component
 * @param {string} columnName 적용할 조건식
 * @return {array} 필터 정보로 {logic, operator, value} 형태의 object 배열이다.
 */
this.getFilterInfo = function(grid, columnName)
{
	var filterInfos = Eco.XComp.getUserProperty(grid, "filterInfos");

	return filterInfos[columnName];
}

/**
 * 대상 그리드에 주어진 컬럼에 해당하는 필터 정보를 지정한다.
 * @param {Grid} grid 대상 Grid Component
 * @param {string} columnName 적용할 조건식
 * @param {array} datas 필터 데이터로 {logic, operator, value} 형태의 object 배열이다.
 */
this.setFilterInfo = function(grid, columnName, datas)
{
	var filterInfos = Eco.XComp.getUserProperty(grid, "filterInfos");

	filterInfos[columnName] = datas;
}

/**
 * 대상 그리드에 주어진 컬럼에 해당하는 필터 데이터를 제거한다.
 * @param {Grid} grid 대상 Grid Component
 * @param {string} columnName 대상 데이터셋 컬럼명
 */
this.removeFilterInfo = function(grid, columnName)
{
	var filterInfos = Eco.XComp.getUserProperty(grid, "filterInfos");
	var filterInfo = filterInfos[columnName];
	
	if ( !Eco.isUndefined(filterInfo) )
	{
		filterInfo = null;
		delete filterInfos[columnName];
	}
}

/**
 * 대상 그리드 필터 실행
 * @param {Grid} grid 대상 Grid Component
 */
this.executeFilter = function(grid) 
{	
	var ds = Eco.XComp.lookup(grid.parent, grid.binddataset);
	
	var filterString = "";
	var filterInfos = Eco.XComp.getUserProperty(grid, "filterInfos");
	var filterInfo;
	var info, colType, logic;
	
	// 필터 항목의 데이터를 추출하여 filter string 을 만든다.
	for (var columnName in filterInfos )
	{
		if ( filterInfos.hasOwnProperty(columnName) )
		{
			if ( !Eco.isEmpty(filterString) )
			{
				filterString += " && ";
			}
			
			filterInfo = filterInfos[columnName];
			colType = ds.getColumnInfo(columnName).type;
			
			filterString += "(";
			
			for (var i=0,len=filterInfo.length; i<len; i++)
			{
				info = filterInfo[i];
				logic = info.logic;
				
				if ( i > 0  )
				{			
					if ( logic == "and" )
					{
						filterString += " && ";
					}
					else if ( logic == "or" )
					{
						filterString += " || ";
					}
				}
				
				filterString += this.getFilterExprString(columnName, colType, info.operator, info.value);
			}
			
			filterString += ")";
		}
	}
	
	//Eco.Logger.debug("filter==>"+filterString);
	
	// 필터 적용
	ds.filter(filterString);
}

/**
 * 현재 적용된 필터를 제거한다.
 * @param {Grid} grid 대상 Grid Component
 */
this.clearFilter = function(grid)
{
	// 데이터셋 필터 제거
	var ds = Eco.XComp.lookup(grid.parent, grid.binddataset);
	ds.filter("");
	
	// 정보 초기화
	Eco.XComp.setUserProperty(grid, "filterInfos", {});
}

/**
 * 필터 조건문 문자열을 반환
 * @param {string} columnName 필터 대상 데이터셋 컬럼명
 * @param {string} colType 필터 대상 데이터셋 컬럼형
 * @param {string} operator 연산자
 * @param {*} value 피연산자 값
 */
this.getFilterExprString = function(columnName, colType, operator, value)
{
	var expr = "";
	switch(operator) 
	{
		case 'equal' :
			expr = "==" + ( colType.toUpperCase() == "STRING" ? nexacro.wrapQuote(value) : value);
		break;
		case 'notEqual' :					
			expr = "!=" + ( colType.toUpperCase() == "STRING" ? nexacro.wrapQuote(value) : value);
		break;
		case 'greaterThan' :
			expr = ">" + ( colType.toUpperCase() == "STRING" ? nexacro.wrapQuote(value) : value);					
		break;
		case 'greaterThanOrEqual' :
			expr = ">=" + ( colType.toUpperCase() == "STRING" ? nexacro.wrapQuote(value) : value);					
		break;
		case 'lessThan' :
			expr = "<" + ( colType.toUpperCase() == "STRING" ? nexacro.wrapQuote(value) : value);					
		break;
		case 'lessThanOrEqual' :
			expr = "<=" + ( colType.toUpperCase() == "STRING" ? nexacro.wrapQuote(value) : value);			
		break;
		case 'startWith' :
			expr = ".toString().substr(0, "+value.length+") == '" + value + "'";
		break;
		case 'endWith' :
			expr = ".toString().substr("+columnName+".toString().length-"+value.length+") == '" + value + "'";
		break;
		case 'contains' :
			expr = ".toString().search('"+value+"') > -1";
		break;
	}
	
	if ( !Eco.isEmpty(expr) )
	{
		expr = columnName + expr;
	}
	
	return expr;
}


/******************************************************************************
	Grid Utility function
******************************************************************************/

/**
 * Cell object 를 반환 (Grid 내부 속성이므로 get 용도로만 사용)
 * @param {Grid} grid 대상 Grid Component
 * @param {string} band 얻고자 하는 cell 의 band (head/body/summ);
 * @param {number} index 얻고자 하는 cell 의 index
 * @return {object} cell object
 */
this.getGridCellObject = function(grid, band, index)
{
	// 내부속성을 통해 얻어온다.
	var refCell;
	var format = grid._curFormat;
	if (format)
	{
		if ( band == "head" )
		{
			refCell = format._headcells[index];
		}
		else if ( band == "body" )
		{
			refCell = format._bodycells[index];
		}
		else if ( band == "summ" || band == "summary" )
		{
			refCell = format._summcells[index];
		}
	}
	
	return refCell;
}

/**
 * cell object에서 index 를 얻어온다. (Grid 내부 속성이므로 get 용도로만 사용)
 * @param {object} cell 대상 cell object
 * @return {number} cell index
 */
this.getCellObjectIndex = function(cell)
{
	return cell._cellidx;
}

/**
 * body cell index로 binding 된 컬럼명을 얻어온다.
 * @param {Grid} grid 대상 Grid Component
 * @param {number} index body cell index
 */
this.getBindColumnNameByIndex = function(grid, index) 
{
	var text = "";
	var columnid = "";
	var subCell = grid.getCellProperty("body", index, "subcell");
	if ( subCell > 0 )
	{
		text = grid.getSubCellProperty("body", index, 0, "text");
	}
	else
	{
		text = grid.getCellProperty("body", index, "text");
	}
	
	if ( !Eco.isEmpty(text) )
	{
		if ( text.search(/^BIND\(/) > -1 ) 
		{	
			columnid = text.replace(/^BIND\(/, "");
			columnid = columnid.substr(0, columnid.length-1);
		} 
		else if ( text.search(/^bind:/) > -1 ) 
		{
			columnid = text.replace(/^bind:/, "");
		}
	}
	
	return columnid;
}

/**
 * head cell에 match되는 body cell을 얻어온다
 * @param {Grid} grid 대상 Grid Component
 * @param {number} headCellIndex head cell index
 * @param {boolean=} useColspan head cell 이 colspan 일 경우에도 반환값을 받을지 여부
 */
this.getBodyCellIndex = function(grid, headCellIndex, useColspan) 
{	
	// Max Head Row Index
	var maxHeadRow = 0;
	for (var i=0, len=grid.getCellCount("head"); i<len; i++) 
	{
		var row = grid.getCellProperty("head", i, "row");
		if (maxHeadRow < row) 
		{
			maxHeadRow = row;
		}
	}
	// Max Body Row Index
	var maxBodyRow = 0;
	for (var i=0, len=grid.getCellCount("body"); i<len; i++) 
	{
		var row = grid.getCellProperty("body", i, "row");
		if (maxBodyRow < row) 
		{
			maxBodyRow = row;
		}
	}
	
	if (maxHeadRow == 0 && maxBodyRow == 0) 
	{
		return headCellIndex;
	}
	
	// Body Row 가 1개 이상일 경우
	// Head의 row 가 Body의 row 보다 클 경우 차이 row 를 뺀 것을 대상으로 찾고
	// Body의 row 가 Head의 row 보다 크거나 같을 경우 row index가 같은 대상을 찾는다.			
	var cellIndex = -1;
	var sRow = -1;
	var nRow = parseInt(grid.getCellProperty("head", headCellIndex, "row"));
	var nCol = parseInt(grid.getCellProperty("head", headCellIndex, "col"));
	var nColspan = parseInt(grid.getCellProperty("head", headCellIndex, "colspan"));				
	
	if (maxHeadRow > maxBodyRow) 
	{
		sRow = nRow - (maxHeadRow - maxBodyRow);
		sRow = (sRow < 0 ? 0 : sRow);
	}
	else 
	{
		sRow = nRow;
	}
	
	var cRow, cCol, cColspan;
	for (var i=0, len=grid.getCellCount("body"); i<len; i++) 
	{
		cRow = parseInt(grid.getCellProperty("body", i, "row"));
		cCol = parseInt(grid.getCellProperty("body", i, "col"));	
		cColspan = parseInt(grid.getCellProperty("body", i, "colspan"));					

		// colspan 이 적용된 cell 도 반환값을 사용할 경우 첫번째 항목에 매칭되는 index
		if ( useColspan )
		{
			if (sRow == cRow && nCol <= cCol && cCol < (nCol + nColspan)) 
			{		
				cellIndex = i;
				break;
			}		
		}
		else
		{
			if (sRow == cRow && nCol == cCol && nColspan == cColspan) 
			{		
				cellIndex = i;
				break;
			}
		}
	}
	return cellIndex;
}

/**
 * Grid column 이 사용자에 의해 resizing 중인지 여부를 반환
 * @param {Grid} grid 대상 Grid Component
 * @return {boolean} resizing 여부 반환
 */
this.isGridColResizing = function(grid)
{
	// 내부 속성을 확인한다.
	var resizer = grid._resizer_elem;
	if ( resizer && resizer._is_tracking )
	{
		return true;
	}
	return false;
}

/**
 * column resize 가 완료되었을 때 주어진 함수를 호출한다.<br>
 * (Column resize 이벤트가 없으므로 내부속성을 이용하여 확인한다.)
 * @param {Grid} grid 대상 Grid Component
 * @param {function} func resize가 발생했을 때 호출할 함수 (호출시 넘겨줄 인자 object는 {col, oldvalue, newvalue} )
 * @param {scope=} scope 함수 내부에서 this 로 사용할 scope (인자 값이 없다면 grid parent)
 */
this.setUserGridOnColResized = function(grid, func, scope)
{	
	// check grid argument
	if ( Eco.isEmpty(grid) || Eco.XComp.typeOf(grid) != "Grid" )
	{
		var msg = {
			'message': "1'st argument must be a Grid Component",
			'stack' : true
		};
		Eco.Logger.error(msg);
	}
	
	// check func argument
	if ( Eco.isEmpty(func) || !Eco.isFunction(func) )
	{
		var msg = {
			'message': "2'nd argument must be a Function",
			'stack' : true
		};
		Eco.Logger.error(msg);
	}
	
	// check scope argument
	if ( Eco.isEmpty(scope) )
	{
		scope = grid.parent;
	}
	
	// 대상 그리드에 이미 추가 되었는지 확인
	if ( Eco.XComp.getUserProperty(grid, "setUserGridOnColResized") )
	{
		return;
	}
	
	// add onmousemove handler
	// 마우스 이동 시 내부 속성을 확인하여 리사이즈 정보를 지정한다.
	grid.addEventHandler("onmousemove", function(obj, e) {
		
		if ( obj.cellsizingtype == "col" || obj.cellsizingtype == "both" )
		{
			Eco.XComp.setUserProperty(obj, "colResizeInfo", null);
			
			var resizer = obj._resizer_elem;
			if ( resizer && resizer._is_tracking )
			{
				var idx = resizer._index;
				var pos = resizer._movedPos;
				if ( idx > -1 && pos != 0 )
				{
					Eco.XComp.setUserProperty(obj, "colResizeInfo", {
						'col' : idx,
						'oldvalue' : obj.getRealColSize(idx)
					});
				}
			}
		}
		
	}, scope);
	
	// add onlbuttonup handler
	grid.addEventHandler("onlbuttonup", function(obj, e) {
	
		if ( obj.cellsizingtype == "col" || obj.cellsizingtype == "both" )
		{	
			var colResizeInfo = Eco.XComp.getUserProperty(obj, "colResizeInfo");
			if ( !Eco.isEmpty(colResizeInfo) )
			{
				var info = {
					'col': colResizeInfo.col,
					'oldvalue': colResizeInfo.oldvalue,
					'newvalue': obj.getRealColSize(colResizeInfo.col)
				};
				func.call(scope, obj, info);
			}
		}
	
	}, scope);
	
	// 재정의 방지용
	Eco.XComp.setUserProperty(grid, "setUserGridOnColResized", true);	
}

/**
 * cell move 가 발생할 때 주어진 함수를 호출한다.<br>
 * (cell moving 이벤트가 없으므로 내부속성을 이용하여 확인한다.)
 * @param {Grid} grid 대상 Grid Component
 * @param {function} func moving이 발생했을 때 호출할 함수 (호출시 넘겨줄 인자 object는 {col, oldcell, newcell, oldcol, newcol} )
 * @param {scope=} scope 함수 내부에서 this 로 사용할 scope (인자 값이 없다면 grid parent)
 */
this.setUserGridOnCellMoved = function(grid, func, scope)
{
	// check grid argument
	if ( Eco.isEmpty(grid) || Eco.XComp.typeOf(grid) != "Grid" )
	{
		var msg = {
			'message': "1'st argument must be a Grid Component",
			'stack' : true
		};
		Eco.Logger.error(msg);
	}
	
	// check func argument
	if ( Eco.isEmpty(func) || !Eco.isFunction(func) )
	{
		var msg = {
			'message': "2'nd argument must be a Function",
			'stack' : true
		};
		Eco.Logger.error(msg);
	}
	
	// check scope argument
	if ( Eco.isEmpty(scope) )
	{
		scope = grid.parent;
	}
	
	// 대상 그리드에 이미 추가 되었는지 확인
	if ( Eco.XComp.getUserProperty(grid, "setUserGridOnCellMoved") )
	{
		return;
	}	
	
	// add onlbuttondown handler
	grid.addEventHandler("onlbuttondown", function(obj, e) {
		if ( obj.cellmovingtype == "col" && e.row == -1 )
		{
			var cellMovingInfo = {
				'oldcell': e.cell,
				'oldcol': e.col,
				'refCell': this.getGridCellObject(obj, "head", e.cell)
			};
			Eco.XComp.setUserProperty(obj, "cellMovingInfo", cellMovingInfo);
		}
		else
		{
			Eco.XComp.setUserProperty(obj, "cellMovingInfo", null);
		}
	
	}, scope);
	
	// add onlbuttonup handler
	grid.addEventHandler("onlbuttonup", function(obj, e) {
		if ( obj.cellmovingtype == "col" && e.row < 0 )
		{			
			var cellMovingInfo = Eco.XComp.getUserProperty(obj, "cellMovingInfo");

			if ( !Eco.isEmpty(cellMovingInfo) )
			{
				if ( cellMovingInfo.oldcell != e.cell )
				{
					var info = {
						'oldcell': cellMovingInfo.oldcell,
						'newcell': cellMovingInfo.refCell._cellidx,
						'oldcol': cellMovingInfo.oldcol,
						'newcol': cellMovingInfo.refCell._col
					};
					
					func.call(scope, obj, info);
					
					Eco.XComp.setUserProperty(obj, "cellMovingInfo", null);
				}
			}
		}
	
	}, scope);
	
	Eco.XComp.setUserProperty(grid, "setUserGridOnCellMoved", true);
}
]]></Script>
