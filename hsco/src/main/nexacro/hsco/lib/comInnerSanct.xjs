<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript5.0"><![CDATA[/*****************************************************************************
 * 프로그램명 		: 	comInnerSanct.xjs
 * 작  성  자  	: 	정윤원
 * 작  성  일   	: 	2015.09.01
 * 설      명  		:   내부결재관련 공통 함수
 * 수  정  자  	: 	
 * 수 정 이력  	: 	
 * 사용방법	    :   
*******************************************************************************/
this.mstDsNm = "ds_sanctionRptParam";
this.slvDsNm = "ds_rptParamInfo";
this.slvDsNmClob = "ds_innerSanctnReprtDataClob";

this.reportTitle = "";
this.userName = "";
this.reportUri = "";
this.saveFileName = "";
this.vOpts ;
this.dsCnt = 0;
this.gds_apprline;
this.gds_fixapprline;
this.isApprline=false;
this.isViewMode=true; // true: report 모드, false : file변환

this.gfn_initSanctionReportMetaDs = function(sanctnId){
	//var dsMetaMst = this.lookup(this.mstDsNm);
	//var dsMetaSlv = this.lookup(this.slvDsNm);
	//if(dsMetaMst){
	//	dsMetaMst.clearData();
	//}
	
	//if(dsMetaSlv){
	//	dsMetaSlv.clearData();
	//}
	if(this.isValidObject(this.mstDsNm)){
		var dsMetaMst = this.lookup(this.mstDsNm);
		dsMetaMst.clearData();
	}else{
		this.gfn_makeRptMeta_Dataset();
	}
	
	if(this.isValidObject(this.slvDsNm)){
		var dsMetaSlv = this.lookup(this.slvDsNm);
		dsMetaSlv.clearData();
	}else{
		this.gfn_makeRptDataMeta_Dataset();
	}
	
	//if(!this.isValidObject(this.slvDsNmClob)){
	//	var dsMetaSlvClob = this.lookup(this.slvDsNmClob);
	//	dsMetaSlvClob.clearData();
	//}
}


this.gfn_createTranMetaDs = function(){

    //var dsMetaMst = this.lookup(this.mstDsNm);
    //if(dsMetaMst == null){
    if(!this.isValidObject(this.mstDsNm)){
        this.gfn_makeRptMeta_Dataset();
    } 
        
    //var dsMetaSlv = this.lookup(this.slvDsNm);
    //if(dsMetaSlv == null){
    if(!this.isValidObject(this.slvDsNm)){
        this.gfn_makeRptDataMeta_Dataset();
    }
    
    //var dsMetaSlvClob = this.lookup(this.slvDsNmClob);
    //if(!this.isValidObject(this.slvDsNmClob)){
	//	this.gfn_makeRptDataMetaClob_Dataset();
    //}
}

this.gfn_makeRptMeta_Dataset = function(){
   var mstXml = '<Dataset id="ds_sanctionRptParam" >';
    mstXml += '    <ColumnInfo>';
    mstXml += '        <Column id="INNER_SANCTN_ID" type="STRING" size="256"/>';
    mstXml += '        <Column id="SN" type="BIGDECIMAL" size="256"/>';
    mstXml += '        <Column id="SVC_ID" type="STRING" size="256"/>';
    mstXml += '        <Column id="SVC_URL" type="STRING" size="512"/>';
    mstXml += '        <Column id="INPUT_DATA_SET" type="STRING" size="512"/>';
    mstXml += '        <Column id="OUTPUT_DATA_SET" type="STRING" size="512"/>';
    mstXml += '        <Column id="REPRT_URL" type="STRING" size="512"/>';  
    mstXml += '        <Column id="REPRT_SJ" type="STRING" size="256"/>';  
    mstXml += '        <Column id="STRE_FILE_NM" type="STRING" size="100"/>';
    mstXml += '    </ColumnInfo>';
    mstXml += '</Dataset>';

    var dsMetaMst = this.lookup(this.mstDsNm);
    //if(dsMetaMst == null){
        var dsMetaMst = new Dataset(this.mstDsNm);
        dsMetaMst.loadXML(mstXml);
        this.addChild(this.mstDsNm, dsMetaMst);
    //}
}

this.gfn_makeRptDataMeta_Dataset = function(){
    var slvXml = '<Dataset id="ds_rptParamInfo" >';
    slvXml += '    <ColumnInfo>';
    slvXml += '      <Column id="INNER_SANCTN_ID" type="STRING" size="256"/>';
    slvXml += '      <Column id="SN" type="BIGDECIMAL" size="256"/>';
    slvXml += '      <Column id="SVC_ID" type="STRING" size="256"/>';
    slvXml += '      <Column id="SVC_URL" type="STRING" size="512"/>';
    slvXml += '      <Column id="DATA_SET_SE" type="STRING" size="256"/>';
    slvXml += '      <Column id="PARAMTR_ID" type="STRING" size="256"/>';
    slvXml += '      <Column id="DATA_SET_NM" type="STRING" size="256"/>';
    slvXml += '      <Column id="INPUT_DATA" type="STRING" size="4000"/>';
    slvXml += '      <Column id="OUTPUT_XML" type="STRING" size="4000"/>';
    slvXml += '      <Column id="ORDR" type="BIGDECIMAL" size="256"/>';
    slvXml += '    </ColumnInfo>';
    slvXml += '</Dataset>';
    var dsMetaSlv = this.lookup(this.slvDsNm);
    //if(dsMetaSlv == null){
        dsMetaSlv = new Dataset(this.slvDsNm);
        dsMetaSlv.loadXML(slvXml);
        this.addChild(this.slvDsNm, dsMetaSlv);
    //} 
}

this.gfn_makeRptDataMetaClob_Dataset = function(){
    var slvXmlClob = '<Dataset id="ds_innerSanctnReprtDataClob" >';
    slvXmlClob += '    <ColumnInfo>';
    slvXmlClob += '      <Column id="INNER_SANCTN_ID" type="STRING" size="256"/>';
    slvXmlClob += '      <Column id="SN" type="BIGDECIMAL" size="256"/>';
    slvXmlClob += '      <Column id="SVC_ID" type="STRING" size="256"/>';
    slvXmlClob += '      <Column id="SVC_URL" type="STRING" size="512"/>';
    slvXmlClob += '      <Column id="DATA_SET_SE" type="STRING" size="256"/>';
    slvXmlClob += '      <Column id="PARAMTR_ID" type="STRING" size="256"/>';
    slvXmlClob += '      <Column id="DATA_SET_NM" type="STRING" size="256"/>';
    slvXmlClob += '      <Column id="INPUT_DATA_CLOB" type="STRING" size="4000"/>';
    slvXmlClob += '      <Column id="OUTPUT_XML_CLOB" type="STRING" size="4000"/>';
    slvXmlClob += '      <Column id="ORDR" type="BIGDECIMAL" size="256"/>';
    slvXmlClob += '    </ColumnInfo>';
    slvXmlClob += '</Dataset>';
    
    //if(!this.isValidObject(this.slvDsNmClob)){
		var dsMetaSlvClob = this.lookup(this.slvDsNmClob);
        dsMetaSlvClob = new Dataset(this.slvDsNmClob);
        dsMetaSlvClob.loadXML(slvXmlClob);
        this.addChild(this.slvDsNmClob, dsMetaSlvClob);
    //}
}

//보고서 dataset 저장
this.gfn_makeOutputDsToXml = function(){
	if(!this.isValidObject(this.slvDsNmClob)){
		this.gfn_makeRptDataMetaClob_Dataset();
	}
	
	var dsMetaSlvClob = this.lookup(this.slvDsNmClob);
	dsMetaSlvClob.clearData();
	var dsMetaSlv = this.lookup(this.slvDsNm);
	
	dsMetaSlvClob.copyData(dsMetaSlv);
	if(dsMetaSlvClob.getConstColumn("INPUT_DATA_CLOB")==undefined){
		dsMetaSlvClob.addColumn("INPUT_DATA_CLOB","STRING");
	}
	if(dsMetaSlvClob.getConstColumn("OUTPUT_XML_CLOB")==undefined){
		dsMetaSlvClob.addColumn("OUTPUT_XML_CLOB","STRING");
	}
	for(var i=0; i<dsMetaSlv.rowcount; i++){
		var dataSetSe = dsMetaSlv.getColumn(i,"DATA_SET_SE");
		if("O"==dataSetSe){
			var ds = this.lookup(dsMetaSlv.getColumn(i,"PARAMTR_ID"));
			dsMetaSlvClob.setColumn(i, "OUTPUT_XML_CLOB", ds.saveXML());
		}else if("I"==dataSetSe){
			dsMetaSlvClob.setColumn(i, "INPUT_DATA_CLOB", dsMetaSlv.getColumn(i,"INPUT_DATA"));
		}
	}
}

// 보고서 dataset show
this.gfn_showOutputDsToXml = function(ds_innserSanctnReprtInfo, ds_innerSanctnReprtData, ds_apprline){
	var vOpts = new this.cf_Opts();
		vOpts.setArgs("TODAY", this.dateUtils.today());	
		vOpts.setReportPath(ds_innserSanctnReprtInfo.getColumn(0,"REPRT_URL"));
		vOpts.setSaveFilename(ds_innserSanctnReprtInfo.getColumn(0,"STRE_FILE_NM"));
	for(var i=0; i<ds_innerSanctnReprtData.rowcount; i++){
		var dataSetSe = ds_innerSanctnReprtData.getColumn(i,"DATA_SET_SE");
		if("O"==dataSetSe){
			var ds_name = ds_innerSanctnReprtData.getColumn(i,"PARAMTR_ID");
			var ds = new Dataset(ds_name);
			ds.loadXML(ds_innerSanctnReprtData.getColumn(i,"OUTPUT_XML"));
			vOpts.setLocalDs([ds_name, ds]);
		}
	}
	this.gfn_makeGdsApplineData(ds_apprline);
	this.gfn_makeGdsFixApplineData(ds_apprline);
	vOpts.setLocalDs(["gds_apprline",this.gds_apprline]);
	vOpts.setLocalDs(["gds_fixapprline",this.gds_fixapprline]);
	this.div_ubiReport.showReport(vOpts);
}

// 보고서내 apprline 동적변경 (결재상신시 사용)
this.gfn_showApprLine = function(ds_apprline){
	this.gfn_makeGdsApplineData(ds_apprline);
	this.gfn_makeGdsFixApplineData(ds_apprline);
	this.vOpts.setLocalDs(["gds_apprline",this.gds_apprline]);
	this.vOpts.setLocalDs(["gds_fixapprline",this.gds_fixapprline]);
	this.div_ubiReport.showReport(this.vOpts);
}

//공통결재라인
this.gfn_makeGdsApplineMeta_Dataset = function(){
    var apprlineXml = '<Dataset id="gds_apprline" >'
					+ '    <ColumnInfo>'
					+ '      <Column id="APPRLINE_COL1" type="STRING" size="256"/>'
					+ '      <Column id="APPRLINE_COL2" type="STRING" size="256"/>'
					+ '      <Column id="APPRLINE_COL3" type="STRING" size="256"/>'
					+ '      <Column id="SANCTNER_ID" type="STRING" size="256"/>'
					+ '    </ColumnInfo>'
					+ '</Dataset>';
	return apprlineXml;
}

this.gfn_makeGdsApplineData = function(ds_apprline){
	this.gds_apprline = new Dataset("gds_apprline");
	var outXml = this.gfn_makeGdsApplineMeta_Dataset(); 
	this.gds_apprline.loadXML(outXml);
		
	var appr_max_cnt = 6;
	var appr_cnt = ds_apprline.rowcount;
	var appr_blank_cnt = appr_max_cnt - appr_cnt;
	
	//blank apprline
	for(var i=0; i<appr_blank_cnt; i++){
		this.gds_apprline.addRow();
		this.gds_apprline.setColumn(i, "APPRLINE_COL1", "");
	}	
	this.gds_apprline.appendData(ds_apprline);
}

//고정결재라인
this.gfn_makeGdsFixApplineMeta_Dataset = function(){
    var fixapprlineXml 	= '<Dataset id="gds_fixapprline" >'
						+ '    <ColumnInfo>'
						+ '      <Column id="C1_SANCTNER" type="STRING" size="256"/>'
						+ '      <Column id="C1_SANCTNDT" type="STRING" size="256"/>'
						+ '      <Column id="C2_SANCTNER" type="STRING" size="256"/>'
						+ '      <Column id="C2_SANCTNDT" type="STRING" size="256"/>'
						+ '      <Column id="C3_SANCTNER" type="STRING" size="256"/>'
						+ '      <Column id="C3_SANCTNDT" type="STRING" size="256"/>'
						+ '      <Column id="C4_SANCTNER" type="STRING" size="256"/>'
						+ '      <Column id="C4_SANCTNDT" type="STRING" size="256"/>'
						+ '      <Column id="C5_SANCTNER" type="STRING" size="256"/>'
						+ '      <Column id="C5_SANCTNDT" type="STRING" size="256"/>'
						+ '    </ColumnInfo>'
						+ '</Dataset>';
	return fixapprlineXml;
}

this.gfn_makeGdsFixApplineData = function(ds_apprline){
	this.gds_fixapprline = new Dataset("gds_fixapprline");
	var outXml = this.gfn_makeGdsFixApplineMeta_Dataset(); 
	this.gds_fixapprline.loadXML(outXml);
	this.gds_fixapprline.addRow();
		
	//create fixed apprline 
	for(var i=0; i<ds_apprline.rowcount; i++){
		var colIdx = i+1;
		this.gds_fixapprline.setColumn(0, "C"+colIdx+"_SANCTNER", ds_apprline.getColumn(i,"APPRLINE_COL2"));
		this.gds_fixapprline.setColumn(0, "C"+colIdx+"_SANCTNDT", ds_apprline.getColumn(i,"APPRLINE_COL3"));
	}
}

/*
 * 함수명  	: fn_makeReportTranInfo
 * 설명 		: 내부 결재용 보고서의 입력조건 정보 및 조회 데이터셋 정보를 파싱처리한다.
 * params  		: sanctnNo 내부결재번호
 *              : strSvcId 트랜잭션 서비스ID
 *              : sController 컨트롤러 URL
 *              : sInDatasets INPUT 데이터셋 정보
 *              : sOutDatasets OUTPUT 데이터셋 정보
 * return Type 	: None
 * 사용법		: this.fn_makeReportTranInfo(sanctnNo, strSvcId, sController, sInDatasets, sOutDatasets, reportTitle, reportUri, saveFileName);
 */
this.gfn_makeReportTranInfo = function(sanctnNo, strSvcId, sController, sInDatasets, sOutDatasets, reportTitle, reportUri, saveFileName){
    // 내부결재용 보고서 메타정보 Dataset을 초기화 한다.
    this.gfn_initSanctionReportMetaDs(sanctnNo);

    //this.gfn_createTranMetaDs();
    var dsMetaMst = this.lookup(this.mstDsNm);
    var sn = dsMetaMst.getMax("SN");
    if(sn == undefined){
        sn = 1;
    } else {
        sn = sn + 1;
    }
        
    
    var strFilter = "INNER_SANCTN_ID==" + sanctnNo;
    dsMetaMst.filter("");
    dsMetaMst.filter(strFilter);
    dsMetaMst.filter("");
    // 중복 추가 시에는 아규먼트들로 새로 설정함.
    var strFilter2 = "INNER_SANCTN_ID==" + sanctnNo + " && SVC_URL=='" + sController + "'";
    var nRow = dsMetaMst.findRowExpr(strFilter2);
    if(nRow == -1) nRow = dsMetaMst.addRow();
    dsMetaMst.setColumn(nRow, "INNER_SANCTN_ID", sanctnNo);
    dsMetaMst.setColumn(nRow, "SN", sn);
    dsMetaMst.setColumn(nRow, "SVC_ID", strSvcId);
    dsMetaMst.setColumn(nRow, "SVC_URL", sController);
    dsMetaMst.setColumn(nRow, "INPUT_DATA_SET", sInDatasets);
    dsMetaMst.setColumn(nRow, "OUTPUT_DATA_SET", sOutDatasets);
    
    dsMetaMst.setColumn(nRow, "REPRT_SJ", reportTitle);
    dsMetaMst.setColumn(nRow, "REPRT_URL", reportUri);
    dsMetaMst.setColumn(nRow, "STRE_FILE_NM", saveFileName);
        

    var dsMetaSlv = this.lookup(this.slvDsNm);

    var inDsPairArr = sInDatasets.split(" ");
   
    for(var i=0; i<inDsPairArr.length; i++){
        var inDsParam = inDsPairArr[i].split("=");
        var iRow = dsMetaSlv.addRow();
        dsMetaSlv.setColumn(iRow, "INNER_SANCTN_ID", sanctnNo);
        dsMetaSlv.setColumn(iRow, "SN", sn);
        dsMetaSlv.setColumn(iRow, "SVC_ID", strSvcId);
        dsMetaSlv.setColumn(iRow, "SVC_URL", sController);
        dsMetaSlv.setColumn(iRow, "DATA_SET_SE", "I");
        dsMetaSlv.setColumn(iRow, "PARAMTR_ID", inDsParam[0]);
        dsMetaSlv.setColumn(iRow, "DATA_SET_NM", inDsParam[1]);
        var dsObj = this.lookup(inDsParam[1]);
        if(dsObj != null){
            dsMetaSlv.setColumn(iRow, "INPUT_DATA", dsObj.saveXML());
        } else {
           trace(inDsParam[1] + " 객체가 없습니다!");
        }
        dsMetaSlv.setColumn(iRow, "OUTPUT_XML", "");
    }
    var outDsPairArr = sOutDatasets.split(" ");
    for(var i=0; i<outDsPairArr.length; i++){
        var outDsParam = outDsPairArr[i].split("=");
        var iRow = dsMetaSlv.addRow();
        dsMetaSlv.setColumn(iRow, "INNER_SANCTN_ID", sanctnNo);
        dsMetaSlv.setColumn(iRow, "SN", sn);
        dsMetaSlv.setColumn(iRow, "SVC_ID", strSvcId);
        dsMetaSlv.setColumn(iRow, "SVC_URL", sController);
        dsMetaSlv.setColumn(iRow, "DATA_SET_SE", "O");
        dsMetaSlv.setColumn(iRow, "PARAMTR_ID", outDsParam[0]);
        dsMetaSlv.setColumn(iRow, "DATA_SET_NM", outDsParam[1]);
        dsMetaSlv.setColumn(iRow, "INPUT_DATA", "");
        var dsObjSlv = this.lookup(outDsParam[0]);
        if(dsObjSlv != null){
            //var outDsXml = this.gfn_getXML(dsObjSlv, outDsParam[0]);
            var ds = new Dataset(outDsParam[0]);
            ds.loadXML(dsObjSlv.saveXML());
            ds.clearData();
            dsMetaSlv.setColumn(iRow, "OUTPUT_XML", ds.saveXML());
        } else {
            trace(outDsParam[0] + "====dsObj 객체 찾을 수 없음 ====\n");
        }
    }
}

/*
 * 함수명  	: gfn_getXML
 * 설명 		: 헤더정보만 가진 데이터셋 XML 문자열을 얻는다.
 * params  		: sanctnNo 내부결재번호
 *              : strSvcId 트랜잭션 서비스ID
 *              : sController 컨트롤러 URL
 *              : sInDatasets INPUT 데이터셋 정보
 *              : sOutDatasets OUTPUT 데이터셋 정보
 * return Type 	: None
 * 사용법		: this.gfn_getXML(ds, dsName);
 */
this.gfn_getXML = function(ds, dsName){
    var outDsXml = '<Dataset id="' + dsName + '" useclientlayout="false" >' + "\n";
    outDsXml += "    <ColumnInfo>" + "\n";
    for(var i=0; i<ds.colinfos.length; i++){
       var header = ds.colinfos[i];
	   outDsXml += '        <Column id="' + header.name + '" type="' +  header.type + '" size="' + header.size + '" />' + '\n';
	}
	outDsXml += "    </ColumnInfo>" + "\n";
	outDsXml += "</Dataset>";
	//trace("outDsXml ===" + outDsXml);
	return outDsXml;
}

this._existsMetaDs = function(){
    var chkBool = true;
    var dsMetaMst = this.lookup(this.mstDsNm);
    if(dsMetaMst == null){
        chkBool = false;
        return ;
    } 
    
    var dsMetaSlv = this.lookup(this.slvDsNm);
    if(dsMetaSlv == null){
        chkBool = false;
        return ;
    } 
    return chkBool;
}

this.gfn_makeRptDatasets = function(dsMeta, ds_apprline){

    if(dsMeta != null){
        for(var i=0; i< dsMeta.getRowCount(); i++){
            
            var dsSe = dsMeta.getColumn(i, "DATA_SET_SE");
            if(dsSe == "I") {
                var dsNm = dsMeta.getColumn(i, "DATA_SET_NM");
                var ds = new Dataset(dsNm);
                var inXml = dsMeta.getColumn(i, "INPUT_DATA");
                ds.loadXML(inXml);
                this.addChild(dsNm, ds);
            } else if(dsSe == "O") {
                   var paramId = dsMeta.getColumn(i, "PARAMTR_ID");
                   var ds = this.lookup(paramId);
                   //if(ds != null && ds !=undefined){
                   if(this.isValidObject(paramId)){
                       ds.setEventHandler("onload", this.gfn_rpt_ds_onload, this);
                   } else {
                       var ds2 = new Dataset(paramId);
                       var outXml = dsMeta.getColumn(i, "OUTPUT_XML"); 
                       ds2.loadXML(outXml);
                       this.addChild(paramId, ds2);
                       ds2.set_useclientlayout(false);
                       ds2.setEventHandler("onload", this.gfn_rpt_ds_onload, this);
                   }
            }
        }
    }
    
    if(ds_apprline){
		//내부결재라인사용
		this.isApprline = true;	
		this.gfn_makeGdsApplineData(ds_apprline);
		this.gds_apprline.setEventHandler("onload", this.gfn_rpt_dsapprline_onload, this);		
	}
}

this.gfn_openInnerSanctionPopup = function(dsArg, fn_innerSactnCallback, registDt){
	if(registDt == undefined || registDt==""){
		this.gfn_message("info.처리불가","업무데이터 등록일시가 입력되지 않았습니다.");
		return;
	}
	
	var sysOpenDt = application.gds_userInfo.getColumn(0,"SYS_OPEN_DT");
	if(sysOpenDt == undefined || sysOpenDt ==""){
		this.gfn_message("info.처리불가","시스템 오픈일자가 없습니다.");
		return;
	}
	
	switch(registDt.length){
		case 14 :
			if(Number(registDt)<Number(sysOpenDt+"000000")){
				this.gfn_message("info.처리불가","차세대 시스템 오픈전 등록 데이터는 내부결재가 불가능합니다.");
				return;
			}
			break;
		case 8 :
			if(Number(registDt)<Number(sysOpenDt)){
				this.gfn_message("info.처리불가","차세대 시스템 오픈전 등록 데이터는 내부결재가 불가능합니다.");
				return;
			}
			break;
		default :
			this.gfn_message("info.처리불가","업무데이터 등록일시 자리수를 확인하여 주시기 바랍니다.");
			return;
	}

    // 보고서 팝업으로 데이터 전달
    if(!this._existsMetaDs){
        return ;
    }
    var dsMetaMst = this.lookup(this.mstDsNm);   
    var dsMetaSlv = this.lookup(this.slvDsNm);

    var param = {
		arg_0 : this,  
		arg_1 : dsMetaMst,
		arg_2 : dsMetaSlv,
		arg_3 : dsArg
	};
	this.gfn_popup("InnerSactionPopup", 1100, 730, "내부결재관리", param, "com_sym_ism::SYM090200_P11.xfdl", fn_innerSactnCallback);
}

/*
this.gfn_InnerSactionPopup_callback = function(){
    var dsMetaMst = this.lookup(this.mstDsNm);  
    dsMetaMst.clearData();
    var dsMetaSlv = this.lookup(this.slvDsNm);
    dsMetaSlv.clearData();
}
*/

this.filteredRowCount = function(ds, col, val){
    var cnt = 0;
    for(var i=0; i<ds.getRowCount(); i++){
         
        if(ds.getColumn(i, col) == val){
            cnt++;
        }
    }
    return cnt;
}

this.gfn_selectReportDs = function(dsMst, dsSlv){
    this.dsCnt = this.filteredRowCount(dsSlv, "DATA_SET_SE" , "O");
    
    var cnt = dsMst.getRowCount();
    this.vOpts = new this.cf_Opts();
    this.vOpts.setToolbar(false);
	this.vOpts.setScale(100);
	
	this.reportTitle = dsMst.getColumn(0, "REPRT_SJ");
    this.reportUri = dsMst.getColumn(0, "REPRT_URL");
    this.saveFileName = dsMst.getColumn(0, "STRE_FILE_NM");

	this.vOpts.setArgs("title", this.reportTitle);
	this.vOpts.setArgs("EMPNO", this.gfn_getUserId());
	this.vOpts.setArgs("EMPNM", this.gfn_getUserName());
	this.vOpts.setReportPath(this.reportUri);
	this.vOpts.setSaveFilename(this.saveFileName);
    
    for(var i=0; i<cnt; i++){
        var sanctnNo = dsMst.getColumn(i, "INNER_SANCTN_ID");
        var sSvcID = dsMst.getColumn(i, "SVC_ID");
	    var sController   	= dsMst.getColumn(i, "SVC_URL");
	    var sInDatasets   	= dsMst.getColumn(i, "INPUT_DATA_SET");
	    var sOutDatasets  	= dsMst.getColumn(i, "OUTPUT_DATA_SET");
	    var sArgs = dsMst.getColumn(i, "INPUT_DATA_SET");
	    for(var j=0; j<dsSlv.getRowCount();j++){
	        var dsSe = dsSlv.getColumn(j, "DATA_SET_SE");
	        var paramId = dsSlv.getColumn(j, "PARAMTR_ID");
	        var dsNm = dsSlv.getColumn(j, "DATA_SET_NM");
	        if(dsSe == "I"){
	            var ds = this.lookup(dsNm); 
	            ds.removeEventHandler("onload", this.gfn_rpt_ds_onload, this);
	            ds.clearData();
	            ds.loadXML(dsSlv.getColumn(j, "INPUT_DATA"));
	            ds.setEventHandler("onload", this.gfn_rpt_ds_onload, this);
	        }	        
        }
        Ex.core.tran(this, sSvcID, sController, sInDatasets, sOutDatasets, sArgs, "gfn_reportDsCallback", false, false);
    }
}

this.gfn_reportDsCallback = function (svcId, errorCode, errorMsg) {
	if(this.isApprline){
		this.gds_apprline.load();
	}
}

this.gfn_rpt_dsapprline_onload = function(obj:Dataset, e:nexacro.DSLoadEventInfo){
	this.vOpts.setLocalDs([obj.name, obj]);
	if(this.isViewMode){
		this.div_ubiReport.showReport(this.vOpts);
	}
}

this.gfn_rpt_ds_onload = function(obj:Dataset, e:nexacro.DSLoadEventInfo){   
	this.vOpts.setLocalDs([obj.name, obj]);
	var cnt = this.vOpts.getLocalDs().length;
	if(this.isViewMode && cnt == this.dsCnt && !this.isApprline){
		this.div_ubiReport.showReport(this.vOpts);
	}
}

this.gfn_setSandtionIdToRptDs = function(sanctionId, ds){
    
    var cnt = ds.getRowCount();
    if(cnt > 0){
	    for(var i=0; i< cnt; i++){
	        ds.setColumn(0, "INNER_SANCTN_ID", sanctionId);
	    }
	}
}

// 결재 취소, 반송, 완료건 pdf 파일 변환처리
this.gfn_exportRptToPdf = function(inner_sanctn_id, reprt_url, job_se, sanctn_sttus, isLastSanctner, dataset_rpt, dataset_sanctn_sttus){
	//결재상태,일자 UPDATE
	//1) 마지막 결재자인경인 경우
	//2) 반송, 취소인경우
	
	// SANCTN_STTUS
	// S01	완료	COM032
	// S08	취소	COM032
	// S09	반송	COM032
		
	// 완료 보고서 파일을 만든 후 결재종료처리
	// 추후 Java 구현가능이 가능하면 결재와 동시에 처리.
	if("S08"==sanctn_sttus
		|| "S09"==sanctn_sttus
		|| ("S01"==sanctn_sttus && isLastSanctner) ){
		var _nrs_ = String.fromCharCode(28);
		var _ncs_ = String.fromCharCode(29);
		var _rs_ = String.fromCharCode(30);
		var _cs_ = String.fromCharCode(31);

		var ubiUrl = "/ubireport/ubi_export_pdf.jsp";
		var ubiJrf = reprt_url;					//보고서URL
		var ubiArg = "title#"+ this.reportTitle+"#"
				   + "EMPNO#"+ this.gfn_getUserId()+"#"
				   + "EMPNM#"+ this.gfn_getUserName()+"#";
		var ubiDataType = "DS";	// DS : Local Dataset, SVC : Service URL
		var jobse = job_se;							//파일저장시 jobse를 디렉토리로 사용
		var ubiExportFile = inner_sanctn_id;		//파일명을 내부결재ID로 사용
		var ubiData = dataset_rpt;
		
		//결재라인상태 변경
		for( var i = 0; i < ubiData.length; i++ ) {
			if(ubiData[i][1].name=="gds_apprline"){
				var ds_apprline_tmp = ubiData[i][1];
				
				var sanctn_sttus_nm = dataset_sanctn_sttus.getColumn(dataset_sanctn_sttus.findRow("CODE", sanctn_sttus),"CODE_NM"); //결재상태
				var apprline_col3 = this.dateUtils.format(this.gfn_today(),'mm/dd')+'('+sanctn_sttus_nm+')';
				
				var row_ds_apprline_tmp = ds_apprline_tmp.findRow("SANCTNER_ID",this.gfn_getUserId());	//1) 현재 결재자 정보(대결자고려해야함)
				ubiData[i][1].setColumn(row_ds_apprline_tmp, "APPRLINE_COL3", apprline_col3);
				break;
			}
		}

		var ssvData = [];
		ssvData.push("LOCALDATASET:" + _rs_);
		for( var i = 0; i < ubiData.length; i++ ) {
			if( ubiData[i] && ubiData[i].length == 2 ) {
				ssvData.push(ubiData[i][0] + _cs_);
				ssvData.push(ubiData[i][1].name + _cs_);
				ssvData.push(_rs_);
			}
		}

		for( var i = 0; i < ubiData.length; i++ ) {
			if( ubiData[i] && ubiData[i].length == 2 ) {
				if( i == 0 ){
					ssvData.push("SSV:utf-8" + _rs_);
				}
				ssvData.push(ubiData[i][1].saveSSV(ubiData[i][1].name, "N"));
			}
		}
				
		// Form 정보 설정
		var dynamicForm = document.createElement("form");
		dynamicForm.setAttribute("id", "preview_form"+inner_sanctn_id);
		dynamicForm.setAttribute("method", "post");
		dynamicForm.setAttribute("action", ubiUrl);
		dynamicForm.setAttribute("target", "UBI_WIN_EXPORT"+inner_sanctn_id);

		var inputJrf = document.createElement('input');
		inputJrf.type = 'hidden';
		inputJrf.name = 'jrf';
		inputJrf.value = ubiJrf;
		dynamicForm.appendChild(inputJrf);

		var inputArg = document.createElement('input');
		inputArg.type = 'hidden';
		inputArg.name = 'arg';
		inputArg.value = ubiArg;
		dynamicForm.appendChild(inputArg);

		var inputDataType = document.createElement('input');
		inputDataType.type = 'hidden';
		inputDataType.name = 'datatype';
		inputDataType.value = ubiDataType;
		dynamicForm.appendChild(inputDataType);

		var inputExportDir = document.createElement('input');
		inputExportDir.type = 'hidden';
		inputExportDir.name = 'jobse';
		inputExportDir.value = jobse;
		dynamicForm.appendChild(inputExportDir);

		var inputExportFile = document.createElement('input');
		inputExportFile.type = 'hidden';
		inputExportFile.name = 'exportfile';
		inputExportFile.value = ubiExportFile;
		dynamicForm.appendChild(inputExportFile);

		var inputSsvData = document.createElement('input');
		inputSsvData.type = 'hidden';
		inputSsvData.name = 'ssvdata';
		inputSsvData.value = ssvData.join("");
		dynamicForm.appendChild(inputSsvData);
		
		document.body.appendChild(dynamicForm);
		
		var aIframe = document.createElement("iframe");
		aIframe.setAttribute("id","UBI_WIN_EXPORT"+inner_sanctn_id);
		aIframe.setAttribute("name","UBI_WIN_EXPORT"+inner_sanctn_id);
		aIframe.style.width = "0";
		aIframe.style.height = "0";
		document.body.appendChild(aIframe);
		dynamicForm.submit();
				
		// 팝업 창 너비와 높이, 위치 변수 선언
		//var newWidth = 1000, newHeight = 700, newLeft = 0, newTop = 0;
		//window.open('', 'UBI_WIN_EXPORT', 'left=' + newLeft + ',top=' + newTop + ',width=' + newWidth + ',height=' + newHeight + ',scrollbars=yes,resizable=yes');
		//dynamicForm.submit();
		
		/*	
		this.ds_ubirptTopdf.clearData();
		this.ds_ubirptTopdf.addRow();
		this.ds_ubirptTopdf.setColumn(0, "dir", ubiDir);
		this.ds_ubirptTopdf.setColumn(0, "jrf", ubiJrf);
		this.ds_ubirptTopdf.setColumn(0, "arg", ubiArg);
		this.ds_ubirptTopdf.setColumn(0, "datatype", ubiDataType);
		this.ds_ubirptTopdf.setColumn(0, "exportdir", ubiExportDir);
		this.ds_ubirptTopdf.setColumn(0, "exporttype", ubiExportType);
		this.ds_ubirptTopdf.setColumn(0, "exportfile", ubiExportFile);
		this.ds_ubirptTopdf.setColumn(0, "ssvdata", ssvData.join(""));
		
		this.fn_transaction("UBIRptToPdf");
	*/
	}
}]]></Script>
