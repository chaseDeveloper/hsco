<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript5.0"><![CDATA[/*****************************************************************************
 * 프로그램명 		: 	comFile.xjs
 * 작  성  자  	: 	
 * 작  성  일   	: 	
 * 설      명  		:   FileUpload/FileDownload 관련 공통함수다.
 * 수  정  자  	: 	
 * 수 정 이력  	: 	
 * 사용방법	    :   
*******************************************************************************/
include "lib::comInclude.xjs";
/**
*/
this.extUp;     //file upload object
this.extDown;   //file download object

this.fileConfig = {
		host : application.services["svcurl"].url, 
		uploadUrl : "hsco/cmm/file/uploadFile.do",
		downloadUrl : "hsco/cmm/download/downloadFile.do",
		deleteUrl : "hsco/cmm/file/deleteFile.do",
		downImage : "theme://images/fileUpDownload/img_file.png",
		delImage : "theme://images/img_WF_ConfirmE.png",
		allowTypes : ["jpg","jpeg","gif","png","bmp","txt","zip","7z","gzip","doc","docx","ppt","pptx","xls","xlsx","pdf", "hwp", "hwt", ""],
		maxCount : 10,
		maxSize : "5MB",
		maxTotalSize : "200MB",
	};
	
//아이콘별 확장자 목록.
this.iconInfo = {
		file_icon_ZIP: ["zip","rar","7z"],
		file_icon_IMG: ["jpg", "jpeg", "gif", "png", "bmp"],
		file_icon_TXT: ["txt", "xml"],
		file_icon_DOC: ["doc", "docx"],
		file_icon_XLS: ["xls", "xlsx"],
		file_icon_PPT: ["ppt", "pptx"],
		file_icon_PDF: ["pdf"],
		file_icon_HWP: ["hwp", "hwt"],
		file_icon_ETC: ["etc"] //위 확장자 목록에 일치하지 않을 경우. default icon
	};
	 
	 
//확장자별 아이콘 정보	 
this.extToIcon = {}; 	

//XHR2 진행처리용
this.tranFiles = {
	added : [],				// 업로드 파일 정보
	downloaded : [],		// 다운로드 파일 정보
	transferFileSize : 0,	// 현재까지 전송된 파일 크기
	transferFileIndex : 0,	// 현재 전송중인 파일 인덱스
	preFileSizeSum : 0		// 현재까지 전송된 파일크기 합계
};

this.transferType = "all";	

/**
 * File upload/download 샘플실행을 위한 초기화
 * 
 *
 */
this.initFile = function()
{
	//확장자별 파일아이콘 설정.
	this.initExtToIcon();
	
	//==============================================
	//	파일 업로드 컴포넌트 생성 및 설정
	//==============================================	
	var name = Eco.getUniqueId("extUpload_");
	var extUp = new nexacro.ExtFileUpload(name, this);
	this.addChild(extUp.name, extUp);
	this.extUp = extUp;
	
	extUp.set_multiselect(true);
	extUp.setResponseZone(this, this.sta_helpMessage, this.grd_files);	
	
	// == Event 설정 ==
	//	파일 다이얼로그를 통해 파일을 선택했을 때 발생하는 이벤트입니다
	extUp.addEventHandler("onchange", this.extUpload_onchange, this);
	
	//통신 성공시에 발생하는 이벤트입니다
	extUp.addEventHandler("onsuccess", this.extUpload_onsuccess, this);
    
    //통신 오류 시 발생하는 이벤트입니다.
	extUp.addEventHandler("onerror", this.extUpload_onerror, this);
	
	//HTML5 Only : XMLHttpRequest가 데이터를 보내거나 받는 동안 서버에서 정의된 간격으로 발생합니다.
	extUp.addEventHandler("onprogress", this.extUpload_onprogress, this);
	
	//HTML5 Only : XMLHttpRequest 통신시 readystate 속성 변경 event
	extUp.addEventHandler("onreadystatechange", this.extUpload_onreadystatechange, this);		
	
	extUp.show();
	
	//==============================================
	//	파일 다운로드 컴포넌트 생성 및 설정
	//==============================================		
	var name = Eco.getUniqueId("extDownload_");
	var extDown = new nexacro.ExtFileDownload(name, this);
	this.addChild(extDown.name, extDown);
	this.extDown = extDown;
		

	// == Event 설정 ==
    //통신 성공시에 발생하는 이벤트입니다
    extDown.addEventHandler("onsuccess", this.extDownload_onsuccess, this);
    
    //통신 오류 시 발생하는 이벤트입니다.
	extDown.addEventHandler("onerror", this.extDownload_onerror, this);
	
	//HTML5 Only : XMLHttpRequest가 데이터를 보내거나 받는 동안 서버에서 정의된 간격으로 발생합니다.
	extDown.addEventHandler("onprogress", this.extDownload_onprogress, this);
	
	extDown.show();
	

	//==============================================
	//	브라우저별 기능 표시
	//==============================================	
	//Drag and Drop 미지원 브라우저 확인.
	if(extUp.support.FileAPI == false) 
	{
		this.sta_helpMessage.set_visible(false);
		
		this.sta_support_dnd.style.set_color("red");
		this.sta_support_dnd.set_text("• Drag & Drop 미지원");
	}
	
	//XHR2와 FileAPI 지원하지 않을 경우 그리드 format 변경. ex) file 전송량 표시용 progress bar
	if (!extUp.support.XHR2)
	{
		this.grd_files.setFormat("format1");
		this.grd_download.setFormat("format1");
		
		this.sta_support_progressBar.style.set_color("red");
		this.sta_support_progressBar.set_text("• ProgressBar 미지원");
	}	
	
	
	//Multiple File Selection.
	if (!extUp.support.MultipleInput)
	{
		this.sta_support_multiple.style.set_color("red");
		this.sta_support_multiple.set_text("• 다중선택 미지원");
	}
	else
	{
        //safari5 multiple 파일 추가시 파일사이즈 0 버그 - 단건방식으로 처리
        //nexacro.BrowserVersion은 5.1.7에서 5만 리턴함.		
		if (((nexacro.Browser == "Safari") && (nexacro.BrowserVersion == 5)) && (this.extUp.multiselect == true))
		{
		   this.sta_support_multiple.style.set_color("blue");
		   this.sta_support_multiple.set_text("• File 다중선택 지원(※Safari 버그로 단건 처리)");
		}		
	}	

}


/**********************************************
 *      File Inspection                       *
 **********************************************/


/**
* 파일 추가시 validate 체크
* @param {object} cond 체크 대상
*/
this.validateFile = function(cond)
{
   trace("this.validateFile === ");
	var rtn = 1;
	Eco.object.Each(cond, function(prop, val, object) {
	    //trace("co.object.Each === prop:"+prop + ", val:" + val);
		var result = "";
		if (prop == "name")
		{
			var fileExt = val.slice(val.lastIndexOf(".")+1).toLowerCase();
			if(!Eco.array.contains(this.fileConfig.allowTypes, fileExt))
			{
				
				this.gfn_message("info.파일.업로드.타입.불가", fileExt +'|'+val); 
				 
				rtn = 0;
				return false;
			}
			/* fileAPI file.type, mime type  - http://www.iana.org/assignments/media-types
			console.log("file.type:" + file.type);
			if(!file.type.match("image.*")) 
			{
				return 0;
			}
			*/
		}
		else if (prop == "length")
		{
			if (val >= this.fileConfig.maxCount)
			{
				this.gfn_message("info.파일.업로드.허용건수초과", this.fileConfig.maxCount + ""); 
				rtn = -1;
				return false;
			}	
		}
		else if (prop == "size")
		{	
			if (!isNaN(val) && (val >= this.sizeToByte(this.fileConfig.maxSize)))
			{
			    
			    this.gfn_message("info.파일.업로드.건당용량초과", this.fileConfig.maxSize); 
				rtn = 0;
				return false;
			}
		}
		else if (prop == "totalSize")
		{	
			if (!isNaN(val) && (val >= this.sizeToByte(this.fileConfig.maxTotalSize)))
			{
				this.gfn_message("info.파일.업로드.총량초과", this.fileConfig.maxTotalSize); 
				rtn = -1;
				return false;
			}
		}
	}, this);
	
	return rtn;
}


/**********************************************
 *      ExtFileUpload 관련 이벤트 처리부      *
 **********************************************/
 
/**
 * 파일 다이얼로그를 통해 파일을 선택했을 때 발생하는 이벤트입니다.
 * @param {ExtFileUpload} obj ExtFileUpload
 * @param {nexacro.ExtFileUploadChangeEventInfo} e ExtFileUploadChangeEventInfo
 */
this.extFileUpload_onchanged = function(e, ds, strSysGe, strJobGe, fileSn){
    	//trace("extUpload_onchange index=" + e.index + ", newvalue=" + e.newvalue   + ", oldvalue=" + e.oldvalue);
	//trace("extUpload_onchange index=" + e.index + ", files=" + e.files);
	//var ds = this.ds_files;
	var index = e.index;
 	var fileList = e.files;
 	var fileCount = fileList.length;
 	var fileSupport = (this.extUp.support.XHR2 && this.extUp.support.FileAPI);
	
	for(var i=0; i<fileCount; i++)
	{
		var file = fileList[i];
		var fileId   = file.id;
		var fileName = file.name;
        var fileSize = file.size;
        var fileType = file.type;
        var fileExtArr = fileName.split(".");
        var fileExt = fileExtArr[fileExtArr.length -1];;
        
        			
        trace( "   fileId="+fileId + ",fileName="+fileName + ",fileSize="+fileSize + ",fileType="+fileType);			
        			
		var dsCount = ds.getRowCount();
		var cond;
		if (fileSupport)
		{
			var totalSize = ds.getSum("filesize") + fileSize;
			cond = {"name" : fileName, "length" : dsCount, "size" : fileSize, "totalSize" : totalSize};
		}
		else
		{
			cond = {"name" : fileName, "length" : dsCount};
		}
		
		var valid = this.validateFile(cond);
		
		//파일 유형 에러
		if (valid == 0)
		{
			this.extUp.removeFile(fileId);
			return;
		}
		else if (valid == -1) //최대 파일첨부가능 건수 또는 size 에러.
		{
			this.extUp.removeFile(fileId);
			return;
		}
		
		
		var findRow = ds.findRow("ORGINL_FILE_NM", fileName);

		if(findRow > -1) {
		    this.gfn_message("info.파일.중복", fileName);
			this.extUp.removeFile(fileId);
			return;			
		}

		// 업로드 파일 정보 데이타 구성
		var addidx = ds.addRow();

		var downImage = this.getFileIcon(fileName); 
		if(ds.getRowCount() > 0) {
		    var fileSn = -1;
		    if(this.fileSn == "" || this.fileSn == undefined || this.fileSn == null){
		        fileSn = ds.getColumn(0, "FILE_SN");
		    } else {
		        fileSn = this.fileSn;
		    }
		        
		    ds.setColumn(addidx, "FILE_SN", fileSn);
		}
		ds.setColumn(addidx, "FILE_IMAGE", downImage);
		ds.setColumn(addidx, "SN", fileId);
		ds.setColumn(addidx, "ORGINL_FILE_NM", fileName);
		
		if(fileSize > 0)
		{
			ds.setColumn(addidx, "FILE_MG", fileSize);
		}
		
		ds.setColumn(addidx, "FILE_EXTSN", fileExt);
		ds.setColumn(addidx, "USE_AT", '1');
		ds.setColumn(addidx, "FILE_ID", fileId);
		ds.setColumn(addidx, "FILE_TY", fileType);
		ds.setColumn(addidx, "PROGRS", 0);
		
		ds.setColumn(addidx, "DELETE_IMAGE", this.fileConfig.delImage);
		if(fileSn > 0) ds.setColumn(addidx, "FILE_SN", fileSn);
		ds.setColumn(addidx, "SYS_SE_CODE", strSysGe);
		ds.setColumn(addidx, "JOB_SE", strJobGe);
	}
	this.resetSn(ds);
}



/**
 * [HTML5 Only] XMLHttpRequest가 데이터를 보내거나 받는 동안 서버에서 정의된 간격으로 발생합니다.
 * file upload & download 진행시 progress bar 처리용
 * @param {ExtFileUpload} obj ExtFileUpload
 * @param {ExtFileProgress} e ExtFileProgress
 */
this.extUpload_onprogress = function(obj,e)
{
	//trace("\n### extUpload_onprogress " + e.type + "," + e.loaded + ",e.lengthComputable=" +e.lengthComputable +", e.fileId=" + e.fileId);
	

	var addedFile = obj.getAddedFile(),
		addedFileLength = addedFile.length || 0;
	
	if (e.lengthComputable && (addedFileLength > 0))
	{
		//개별파일 전송시. "each"
		var fileId = e.fileId;
		if(fileId){
			var currentFileSize = e.loaded; // 현재까지 전송된 전체 사이즈
			var totalFileSize = e.total;   // 전체 사이즈
					
			var ds = this.ds_files;
			var row = ds.findRow("ORGINL_FILE_NM", fileId);
			var transferFileRate = Math.floor((currentFileSize / totalFileSize) * 100);
			trace("\n### extUpload_onprogress " + transferFileRate + "%, e.loaded=" + e.loaded + ",e.total=" +e.total +", e.fileId=" + e.fileId);
			ds.setColumn(row, "PROGRS", transferFileRate);
			ds.setColumn(row, "FILE_MG", totalFileSize);
			ds.setColumn(row, "TRNSMIS_FILE_SIZE", currentFileSize);					
		
			return;
		}
		
		
		var transferFileSize,			// 파일 전송 사이즈
			transferFileRate,			// 파일 전송 진행율
			transferFile,				// 파일
			currentFileId,				// 파일 ID
			currentFileSize,			// 파일 크기
			currentFileName,			// 파일명
			ds_files = this.ds_files,
			dsRow = -1;

		var tranFiles = this.tranFiles;
		// 현재까지 전송된 전체 사이즈
		tranFiles.transferFileSize = e.loaded;
		
		// 현재까지 전송된 크기가 이전파일 크기 합계보다 크면 진행바 상태 표시를 반복 수행
		while ((tranFiles.transferFileSize > tranFiles.preFileSizeSum) && (tranFiles.transferFileIndex < addedFileLength))
		{
			currentFileId = addedFile[tranFiles.transferFileIndex].id;
			dsRow = ds_files.findRow("FILE_ID", currentFileId);
			
			transferFile = addedFile[tranFiles.transferFileIndex].file;
			currentFileSize = transferFile.size;
			currentFileName = transferFile.name;
			
			ds_files.setColumn(dsRow, "FILE_MG", currentFileSize);
		
			transferFileSize = tranFiles.transferFileSize - tranFiles.preFileSizeSum;
			transferFileRate = Math.floor((transferFileSize / currentFileSize) * 100);
			
			
			//trace("@@@@ transferFileRate="+transferFileRate + ", e.loaded="+e.loaded + ",e.total="+e.total + ",transferFileSize="+transferFileSize);
			
			// 현재 파일 전송이 완료되지 않은 경우는 다음 onStatus 이벤트 호출 대기
			if (transferFileRate < 100)
			{	
				ds_files.setColumn(dsRow, "PROGRS", transferFileRate);
				ds_files.setColumn(dsRow, "TRNSMIS_FILE_SIZE", transferFileSize);
				
				break;
			}
			
			// 현재 파일 전송 완료 또는 초과하는 경우는 현재 전송파일 완료 진행 처리후 while 반복문 로직 수행
			if (transferFileRate >= 100)
			{
				transferFileSize = currentFileSize;	// 현재 파일 전송 사이즈
				transferFileRate = 100;	// 현재 파일 전송 진행율
				
				ds_files.setColumn(dsRow, "PROGRS", transferFileRate);
				ds_files.setColumn(dsRow, "FILE_MG", currentFileSize);
				ds_files.setColumn(dsRow, "TRNSMIS_FILE_SIZE", transferFileSize);
				
				// 다음 전송 파일 정보 설정
				tranFiles.preFileSizeSum += currentFileSize;	// 이전 파일 사이즈 합계
				tranFiles.transferFileIndex++;
				
				if (tranFiles.transferFileIndex >= addedFileLength)
				{
					break;
				}
			}
		}
		
	}
}



/*****************   ExtFileUpload 통신 관련 START   ********************/

/**
 * [HTML5 Only] XMLHttpRequest 통신시 readystate 속성 변경 event
 * @param {ExtFileUpload} obj ExtFileUpload
 * @param {ExtFileReadystateChangEventInfo} e ExtFileReadystateChangEventInfo
 */
this.extUpload_onreadystatechange = function(obj, e)
{
	//trace("extUpload_onreadystatechange readyState=" + e.readyState + ", status=" + e.status);
	
	if(e.readyState == 4 ){
		if(e.status != 200) {
			trace("extUpload_onreadystatechange > Fail request!!");
			//TODO
			//에러 발생에 따른 UI 처리
			
			var ds = this.ds_files;
			var count = ds.rowcount;
			for(var i=0; i<count; i++)
			{
				ds.setColumn(i, "PROGRS", -1);
			}
			
		} else if(e.status == 200) {
			//trace("Success request.");
		}
	}	
}


/*
 *   통신 성공시에 발생하는 이벤트입니다
 */
this.extUpload_onsuccess = function(obj, e)
{
	trace("extUpload_onsuccess errorcode=" + e.errorcode + ", errormsg=" + e.errormsg   + ", datasets=" + e.datasets + ", url=" + e.url  + ", fileId=" + e.fileId );
	//e.fildId는 개별전송("each")시 수신.	
	if (this.img_loading.visible)
	{
		this.img_loading.set_visible(false);
	}
	
	this.ds_files.applyChange();
	
	if(e.datasets)
	{
		
		var outputDatasets = e.datasets;
		if(outputDatasets.length == 0) return;
		
		var outDs = outputDatasets[0];
		//var ds = this.ds_download;
		var ds = this.ds_files;
		
		//trace(outDs.saveXML());
		
		//개별전송 처리로직
		if(this.transferType == "each") {
			if (this.extUp.support.XHR2) {
				var row = ds.addRow();
				ds.copyRow(row, outDs, 0);
				
				//개별파일 전송시. "each"
				var fileId = e.fileId;
				if(fileId){
					var ds = this.ds_files;
					var row = ds.findRow("ORGINL_FILE_NM", fileId);
					trace("### [개별전송] extUpload_onsuccess 처리:" +" e.fileId=" + e.fileId);
					ds.setColumn(row, "PROGRS", 100);
				}				
				
			} else {
				ds.copyData(outDs);
			}		
		
		} else {
			ds.copyData(outDs);
		
		}
	}
	
	this.setDownloadFileIcon();	
	
	//this.st_downloadTitle.set_visible(true);
	//this.st_downloadBg.set_visible(true);
	
	//this.grd_download.set_visible(true);
	
	if(typeof(this.fn_setModifyedInfo) == "function"){
		this.fn_setModifyedInfo(false);
	}
	
}

/**
 *   통신 오류 시 발생하는 이벤트입니다
 */
this.extUpload_onerror = function(obj, e)
{
  //런타임에서 e.errortype; <-- 원하는 type이 아닌 error object 가 전송됨.

	//alert("에러발생 \extUpload_onerror index=" + e.index  + ", errortype=" + e.errortype   + "\n, statuscode=" + e.statuscode + ", requesturi=" + e.requesturi);
	//
	this.gfn_message("err.서버통신.오류발생2", e.index +'|'+ e.errortype +'|'+ e.statuscode +'|'+ e.requesturi); 

	if (this.img_loading.visible)
	{
		this.img_loading.set_visible(false);
	}	
	
}
/*****************  ExtFileUpload 통신 관련 END   ********************/




/**********************************************
 *      ExtFileDownload 관련 이벤트 처리부      *
 **********************************************/
 
 
/**
 * [HTML5 Only] XMLHttpRequest가 데이터를 보내거나 받는 동안 서버에서 정의된 간격으로 발생합니다.
 * file upload & download 진행시 progress bar 처리용
 * @param {ExtFileUpload} obj ExtFileUpload
 * @param {ExtFileProgress} e ExtFileProgress
 */
this.extDownload_onprogress = function(obj,e)
{
	trace("extDownload_onprogress " + e.type + "," + e.loaded);
	if (e.lengthComputable)
	{
		var status,									 // 파일 전송 진행율
			currentFileSize,						 // 파일 크기
			transferCurrentFileSize,				 // 파일 전송 사이즈
			downFiles = this.tranFiles.downloaded,	 // 다운로드 대상 파일 목록
			currentRow = -1,
			//ds_download = this.ds_download;
			ds_download = this.ds_files;
			
		status = Math.floor((e.loaded / e.total) * 100);
		
		currentFileSize = downFiles[0].size;
		currentRow = downFiles[0].row;
		
		transferCurrentFileSize = Math.floor(currentFileSize * (status / 100));
		
		trace(" download 진행: prog=" + status + ",tranfilesize="+transferCurrentFileSize+", filesize="+  currentFileSize);
		ds_download.setColumn(currentRow, "PROGRS", status);
		ds_download.setColumn(currentRow, "FILE_MG", currentFileSize);
		ds_download.setColumn(currentRow, "TRNSMIS_FILE_SIZE", transferCurrentFileSize);
	}

}

/*****************  ExtFileDownload 통신 관련 START  ********************/
 
/**
 *   통신 오류 시 발생하는 이벤트입니다
 */
this.extDownload_onerror = function(obj, e)
{
  //런타임에서 e.errortype; <-- 원하는 type이 아닌 error object 가 전송됨.

	this.gfn_message("err.서버통신.오류발생2", e.index +'|'+ e.errortype +'|'+ e.statuscode +'|'+ e.requesturi); 

	this.resetTranFilesInfo();
	
	if (this.img_loading.visible)
	{
		this.img_loading.set_visible(false);
	}	
	
}

this.resetTranFilesInfo = function()
{
	var downFiles = this.tranFiles.downloaded;
	
	Eco.array.removeAt(downFiles, 0);		// 다운 파일 삭제
	this.tranFiles.downloaded = [];	

}


/**
 *   다운로드 성공시에 발생하는 이벤트입니다
 */
this.extDownload_onsuccess = function(obj, e)
{
	trace("	 ★ extFileDownload_onsuccess url=" + e.url);
	
	this.resetTranFilesInfo();

	if (this.img_loading.visible)
	{
		this.img_loading.set_visible(false);
	}
	
	if(!Eco.isEmpty(e.url))
	{
		this.gfn_message("success.파일.다운로드.성공");
	}
	else
	{
		this.gfn_message("err.파일.다운로드.실패");
	}
	
}


/*****************  ExtFileDownload 통신 관련 END   ********************/

/**********************************************
 *              Non-Transaction 이벤트       *
 **********************************************/
/*
 * 그리드의 순번 컬럼을 갱신한다
 */
this.resetSn = function(objDs){
    for(var i=0; i<objDs.rowcount;i++){
        var j = i+1;
		objDs.setColumn(i, "SN", j);
    }
}












/**
 * 파일 확장자에 이미지 정보를 구성한다.
*/
this.initExtToIcon = function()
{
	var extToIcon = this.extToIcon;
	var iconInfo = this.iconInfo;

	for (var name in iconInfo) {
		var len = iconInfo[name].length;
		for (var i=0; i<len; i++) 
		{
			extToIcon[iconInfo[name][i]] = name;
		}
	}

}

/**
 * 파일 확장자에 해당하는 이미지경로 반환.
 * @param {string} fileName file name
 * @return {string} image full path
*/
this.getFileIcon = function(fileName)
{
	if(Eco.isEmpty(fileName)) return;
	
	fileName = fileName.toLowerCase();
	var ext = (/[.]/.exec(fileName)) ? /[^.]+$/.exec(fileName) : undefined;
	var icon = this.extToIcon[ext];
	
	if(icon == undefined) ext = "etc";

	return "theme://images/fileUpDownload/" + this.extToIcon[ext] + ".png";
}

/**
 * 다운로드 파일의 확장자에 해당하는 이미지 설정.
 */
this.setDownloadFileIcon = function()
{
	//var ds = this.ds_download;
	var ds = this.ds_files;
	var count = ds.rowcount;
	for(var i=0; i<count; i++)
	{
		var fileName = ds.getColumn(i, "filename");
		
		var icon = this.getFileIcon(fileName); 
		ds.setColumn(i, "fileimg", icon);
	}
}


/**
 * byte를 size로 변환처리한다.
 * @param {number} filesize file size
 * @param {string} type 표시형태
 * @return {string} file size
 */
this.bytesToSize = function(filesize, type)
{
	if (Eco.isEmpty(filesize)) return;
	
    var size = filesize  + " bytes",
        multiples = ["KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
        idx = 0, 
        approx = 0;
	
    for (idx = 0, approx = filesize / 1024; approx > 1; approx /= 1024, idx++) 
    {
        if (type == 1)
        {
            size = approx.toFixed(2) + multiples[idx] + " (" + filesize + " bytes)";
        }
        else if (type == 2)
        {
            size = approx.toFixed(2);
        }
        else
        {
            size = approx.toFixed(2) + multiples[idx];
        }
    }
  
    return size;
}

/**
 * size를 byte로 변환처리한다.
 * @param {number} fileSize file size
 * @return {number} file size
 */
this.sizeToByte = function(fileSize) 
{
    
	var unit = fileSize.match(/[^\d]+/g),
		size = fileSize.match(/\d+/);

	unit = unit ? unit[0].toLowerCase() : "";
	size = size ? size[0] : fileSize;
	
	if (unit == "mb") 
	{
		return size * 1024 * 1024;
	}
	else if (unit == "gb") 
	{
		return size * 1024 * 1024 * 1024;
	}
	else if (unit == "tb") 
	{
		return size * 1024 * 1024 * 1024 * 1024;
	}
	else if (unit == "") 
	{
		return size;
	}
	else 
	{
		return fileSize;
	}
}

]]></Script>
