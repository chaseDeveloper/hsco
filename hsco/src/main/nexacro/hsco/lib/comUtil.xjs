<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript5.0"><![CDATA[/*****************************************************************************
 * 프로그램명 		: 	comUtil.xjs
 * 작  성  자  	: 	송금준 / 정윤원
 * 작  성  일   	: 	
 * 설      명  		:   Utility 공통 함수다.
 * 수  정  자  	: 	
 * 수 정 이력  	: 	
 * 사용방법	    :   
*******************************************************************************/

/**
*@fileoverview nexacro service library 
*> 사용예 : this.comUtils.isNull(str)
*@_getDataset					: Dataset을 얻어오기
*@isNull						: Null값 여부(undefined 포함, 0은 null 아님)
*@isNullEmpty					: Null값 또는 empty 여부(undefined 포함, 0은 null 아님)
*@trimString					: String을 Trim 한다.
*@isNotNull						: Null값 아닌지 여부
*@isNullThen					: 검증할 값이 Null인지 여부에 따라 지정된 값을 반환한다.
*@isNullThenEmpty				: 검증할 값이 Null일 경우에 ""(Empty-공백)을 반환한다.
*@isPhone						: 휴대폰 또는 전화번호의 정합성 체크
*@isEmail						: 이메일의 정합성 체크
*@isDomain						: 도메인의 정합성 체크
*@isJuminNo						: 주민번호 정합성 체크
*@isSaeopjaNo					: 사업자번호 정합성 체크
*@isBeopinNo					: 법인등록번호 정합성 체크
*@isTime						: 시간 정합성 체크
*@isDate						: 날짜형식 정합성 체크
*@isNumberFormatValidation		: 대상값의 정수부, 소수부의 정합성 체크
*@isFunction					: Object가 함수인지 확인한다
*@replaceAll					: Object가 replace에서 정규식 없이도 replace되도록 하는 기능.
*@getBytes						: 지정된 캐릭터셋 별로 byte length를 리턴한다.
*@indexOfSubstring				: 지정한 문자열부터 길이수 만큼 문자열을 가져온다.
*@indexOfSubstringRight			: 지정한 문자열부터 길이수 만큼 문자열을 오른쪽방향으로 가져온다.
*@dateToString					: 날짜를 String 문자열로 변환
*@stringToDate					: 문자열을 날짜로 변환
*@formatComma					: 자리 수 마다 ','를 찍어준다.
*@replaceComma					: 숫자에 찍힌 ','를 제거한다.
*@formatMask					: 문자 포맷 형식 변환
*@getClientDate					: 오늘 날짜를 가져오는 함수(클라이언트 PC기준)
*@setDateDisplayTypeExpr		: Grid의 DisplayType 이 date 인경우 값이 NULL 이면 빈칸으로, 값이 있으면 날짜형식으로 표시한다.
*@setComponentVisibleEnable		: 콤포넌트를 배열로 받아 Enable과 Visible 값을 변경한다.
*@setSearchPramArray			: 콤포넌트를 배열로 받아 조회조건을 리턴한다.
*@arrayIndexOf					: 배열에 indexOf 가 지원되지 않아 이에 동일한 기능에 대해서 구현
*@isGridCheckBoxThenRadio		: 그리드의 CheckBox를 Radio처럼 동작되되록 설정.
*@numberInputRangecheck			: 그리드에 From-To 값 입력시 정합성 체크.
*@inputLimiteCheck				: textarea max length 체크
*@limitInputText				: EDIT에서 글자입력제한(onchar 이벤트에서사용)
*@getFileUrl					: 파일 경로와 파일명을 전달받아 서버 상의 파일 경로를 return 한다.
*@getExtMailLink				: 그룹웨어 메일 컨텐츠 내에 사용될 링크를 return 한다.
*@isRcepterValid				: 결재 양식 접수자의 소속 부서 유효성 여부를 리턴한다.
*@translateColumnToUpperCase	: camelCase를 DB Column 형태로 변경
								  예를 들어 DB컬럼 명이 DEPT_NO 이면 화면에서는 CamelCase 인 deptNo를 사용하는데.
								  DB에서 컬럼값을 받아 검증 할 때 DEPT_NO 로 넘겨 주어야 한다.
								  이것을 하는 유틸리티이다.
*@checkFullChar					: 입력된 값의 한글 완성형 여부 체크
*@setComboHeadType				: Combo로 사용될 dataset에 헤더타입을 추가한다.
*@getTextSize					: 텍스트의 길이 및 높이를 폰트에 맞게 가져옴
*@decode						: decode
*@iif							: iif
*@setComma						: 숫자에 ","를 집어넣기
*@isDatasetUpdated				: dataSet의 Row 중에서 변경된 내용이 있는지 여부를
								  판단하는 함수
*@autoHypenPhone                : 전화 또는 휴대폰 번호에 하이픈(-) 넣기								  
* @memberof! comUtil
*/
// 
// function fn_alert_str(){
//  alert("0000");
//  }

/*
 * 함수명  	: utlf_necessaryParam
 * 설명 		: 필수 입력사항 확인.
 * params  		: grd : 확인대상 그리드 / chkParm : 필수컬럼명
 * return Type 	: true/false
 * 사용법		: this.fn_necessaryParam(grid명,"컬럼명1,컬러명2...")
 */
this.utlf_necessaryParam = function(grd,chkParm){
 
  var chkItem = chkParm.split(","); 
  var rtnMsg = "";
  var ds = grd.getBindDataset();
  
  for(var i = 0; i < ds.getRowCount() ; i++){
    if(ds.getRowType(i) == 2 || ds.getRowType(i) == 4){
    
       for(var j = 0;j < chkItem.length ; j++)
       { 
         if(ds.getColumn(i,chkItem[j]) == "" || ds.getColumn(i,chkItem[j]) == undefined)
         {
            var idx = grd.getBindCellIndex("body",chkItem[j]);
            var msg = grd.getCellText( -1, idx);
            rtnMsg = rtnMsg + "[" +  msg + "]";
         }
       }
       if(rtnMsg != ""){
			this.gfn_message("comm.항목.필수", rtnMsg);
	        return true;
       }
     }else{
        continue;
     }
  }
}

/*******************************************************************************
 * 함수명      : utlf_IsNull(sValue)
 * 설명        	: Null 여부를 체크한다.
 * argument     : String, Object
 * return Type 	: Boolean
 * 작성자 		: 정윤원
 ******************************************************************************/
function utlf_IsNull(sValue) {
    try {
        if (new String(sValue).valueOf() == "undefined") return true;
        if (sValue == undefined) return true;
        if (sValue == null) return true;
        var v_ChkStr = new String(sValue);
        if (v_ChkStr == null || v_ChkStr.trim() == "") return true;
        if (v_ChkStr.toString().length == 0 ) return true;
    } catch(e) {
        return false;
    }
    return false;
}

/********************************************************************************
 * Null값 또는 empty 여부(undefined 포함, 0은 null 아님)
 * @param String 검증할 값	
 * @return Boolean
 ********************************************************************************/
// this.isNullEmpty = function(value)
// {
// 	if (new String(value).valueOf() == "undefined" || new String(value).valueOf() == "null" || value == undefined || value == null) 
// 	{
// 		return true;
// 	}
// 	else 
// 	{
// 		var stringValue = new String(value);
// 		if (stringValue == null || stringValue.trim() == "") 
// 		{
// 			return true;
// 		}
// 	}
// 	return false;
// }

this.comUtils = {
	refform : this,	
	
	/********************************************************************************
	 * Dataset을 얻어오기
	 * @param String Dataset 명	
	 * @return Dataset Object
	 ********************************************************************************/
	_getDataset : function(sDs)
	{
	    var objDs = this.refform.objects[sDs];
	    if (objDs == null)
	        return -1;
	
		return objDs;
	},
	
	/********************************************************************************
	 * Null값 여부(undefined 포함, 0은 null 아님)
	 * @param String 검증할 값	
	 * @return Boolean
	 ********************************************************************************/
	isNull : function (value)
	{
		if (new String(value).valueOf() == "undefined" || new String(value).valueOf() == "null" || value == undefined || value == null) 
		{
			return true;
		}
		else 
		{
			var stringValue = new String(value);
			if (stringValue == null || stringValue.trim() == "") 
			{
				return true;
			}
		}
		return false;
	},
	
	/********************************************************************************
	 * Null값 또는 empty 여부(undefined 포함, 0은 null 아님)
	 * @param String 검증할 값	
	 * @return Boolean
	 ********************************************************************************/
	isNullEmpty : function (value)
	{
		if (new String(value).valueOf() == "undefined" || new String(value).valueOf() == "null" || value == undefined || value == null) 
		{
			return true;
		}
		else 
		{
			var stringValue = new String(value);
			if (stringValue == null || stringValue.trim() == "") 
			{
				return true;
			}
		}
		return false;
	},
	
	/********************************************************************************
	 * String을 Trim 한다.
	 * @param String Trim할 값	
	 * @return String
	 ********************************************************************************/
	trimString : function(sValue)
	{
	    //trace("AAAAA");
		if (sValue == null) return "";
		if (new String(sValue).valueOf() == "undefined") return "";
		if (new String(sValue).valueOf() == "NaN") return "";
		if (new String(sValue) == null) return "";
		var retVal = new String(sValue);
		
		retVal = retVal.replace('"','');
		retVal = retVal.replace("'",'');
		retVal = retVal.replace("\\","");
		retVal = retVal.trim();
		//retVal = retVal.trimRight();
		return retVal;
	},

	/********************************************************************************
	 * Null값 아닌지 여부
	 * @param String 검증할 값
	 * @return Boolean
	 ********************************************************************************/
	isNotNull : function (value)
	{
		if (this.isNull(value)) 
		{
			return false;
		}
		else 
		{
			return true;
		}
	},

     /********************************************************************************
	 * 검증할 값이 Null인지 여부에 따라 지정된 값을 반환한다.
     * @param String 검증할 값
	 * @param String Null일 경우의 값
	 * @return Boolean
	 ********************************************************************************/
	isNullThen : function (value, nullValue)
	{
		if (this.isNull(value)) 
		{
			return nullValue;
		}
		else 
		{
			return value;
		}
	},

	/********************************************************************************
	 * 검증할 값이 Null일 경우에 ""(Empty-공백)을 반환한다.
	 * @param String 검증할 값
	 * @return String
	 ********************************************************************************/
	isNullThenEmpty : function (value)
	{
		
		if (this.isNull(value)) 
		{
			return "";
		}
		else 
		{
			return value;
		}
	},

	/********************************************************************************
	 * 휴대폰 또는 전화번호의 정합성 체크
	 * @param String 구분값(TEL_NO, HP_NO)
	 * @param String 전화번호
	 * @return Boolean
	 ********************************************************************************/
	isPhone : function (gubun, value)
	{
		var expression;
		var returnValue = false;

		if (gubun == "TEL_NO") 
		{
			expression = new RegExp(/^0(2{1}|[0-9]{2,3})[0-9]{3,4}[0-9]{4}$/);
		}
		else if (gubun == "HP_NO") 
		{
			expression = new RegExp(/^(010|011|016|017|018|019)[0-9]{3,4}[0-9]{4}$/);
		}
		else 
		{
			this.refform.alert("isPhone함수의 첫번째 인자는 HP_NO 또는 TEL_NO 이어야합니다.");
			return false;
		}

		if (this.isNotNull(value)) 
		{
			value = value.replace(/-/g, "");
			returnValue = expression.test(value);
		}
		else 
		{
			returnValue = false;
		}

		return returnValue;
	},

	/********************************************************************************
	 * 이메일의 정합성 체크
	 * @param String 이메일주소
	 * @return Boolean
	 ********************************************************************************/
	isEmail : function (value)
	{
		var expression = new RegExp(/^[-A-Za-z0-9_]+[-A-Za-z0-9_.]*[@]{1}[-A-Za-z0-9_]+[-A-Za-z0-9_.]*[.]{1}[A-Za-z]{2,5}$/);

		if (this.isNotNull(value)) 
		{
			return expression.test(value);
		}
		else 
		{
			return false;
		}
	},

	/********************************************************************************
	 * 도메인의 정합성 체크
	 * @param String 도메인
	 * @return Boolean
	 ********************************************************************************/
	isDomain : function (value)
	{
		var expression = new RegExp(/^[-A-Za-z0-9_]+[-A-Za-z0-9_.]*[.]{1}[A-Za-z]{2,5}$/);

		if (this.isNotNull(value)) 
		{
			return expression.test(value);
		}
		else 
		{
			return false;
		}
	},

	/********************************************************************************
	 * 주민번호 정합성 체크
	 * @param String 주민등록번호
	 * @return Boolean
	 ********************************************************************************/
	isJuminNo : function (value)
	{
		if (this.isNull(value)) 
		{
			return false;
		}

		value = value.split("-").join("");

		if (value.length != 13) 
		{
			return false;
		}

		var validDay = value.substr(0, 6);
		var validNo = value.substr(6);

		var validDigit = [2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5];
		var dayExpression = new RegExp(/^[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[0-1])$/);
		var noExpression = new RegExp(/^[0-9]{7}$/);
		var foreignExpression = new RegExp(/^[5-8]{1}[0-9]{6}$/);

		if (!dayExpression.test(validDay)) 
		{
			return false;
		}

		if (!noExpression.test(validNo)) 
		{
			return false;
		}

		var sum = 0;
		for (var index = 0; index < 12; index++) 
		{
			sum += parseInt(value.substr(index, 1)) * validDigit[index];
		}
		sum = (11 - (sum % 11)) % 10;

		if (foreignExpression.test(validNo)) 
		{
			sum = (sum + 2) % 10;
		}

		if (sum == value.substr(12, 1)) 
		{
			return true;
		}
		else 
		{
			return false;
		}
	},

	/********************************************************************************
	 * 사업자번호 정합성 체크
	 * @param String 사업자번호
	 * @return Boolean
	 ********************************************************************************/
	isSaeopjaNo : function (value)
	{
		if (this.isNull(value)) 
		{
			return false;
		}

		value = value.replace(/-/g, "");
	
		var arrChk = [1, 3, 7, 1, 3, 7, 1, 3, 5, 1];
		var nSum = 0;
		var sComp;
		
		for(var index = 0; index <= 7; index++)
		{
			nSum += arrChk[index] * value.charAt(index);
		}

		sComp = "0" + (arrChk[8] * value.charAt(8));
		sComp = sComp.substring(sComp.length - 2, sComp.length);
		nSum += parseInt(sComp.charAt(0)) + parseInt(sComp.charAt(1));

		if(value.charAt(9) != (10 - (nSum % 10)) % 10) 
		{
			return false;
		}
		return true;
	},

	/********************************************************************************
	 * 법인등록번호 정합성 체크
	 * @param String 법인등록번호
	 * @return Boolean
	 ********************************************************************************/
	isBeopinNo : function (value)
	{
		if (this.isNull(value)) 
		{
			return false;
		}

		value = value.replace(/-/g, "");

		if (value.length != 13) 
		{
			return false;
		}

		var validDigit = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2];

		var sum = 0;
		for (var index = 0; index < 12; index++) 
		{
			sum += parseInt(value.substr(index, 1)) * validDigit[index];
		}
		sum = (10 - (sum % 10)) % 10;

		if (sum == value.substr(12, 1)) 
		{
			return true;
		}
		else 
		{
			return false;
		}
	},

	/********************************************************************************
	 * 시간 정합성 체크
	 * @param String 시분(1212)
	 * @return Boolean
	 ********************************************************************************/
	isTime : function (value)
	{
		var expression;
		var returnValue = false;

		value = value.split(":").join("");

		if (value.trim().toString().length != 4) 
		{
			return false;
		}

		expression = new RegExp(/^([01][0-9]|2[0-3]?)[0-5][0-9]$/);

		if (this.isNotNull(value)) 
		{
			returnValue = expression.test(value);
		}
		else 
		{
			returnValue = false;
		}

		return returnValue;
	},

	/********************************************************************************
	 * 날짜형식 정합성 체크
	 * @param String 날짜
	 * @return Boolean
	 ********************************************************************************/
	isDate : function (value)
	{
		if (this.isNull(value)) 
		{
			return false;
		}

		value = value.split("-").join("");

		if (value.length != 8) 
		{
			return false;
		}

		var year = nexacro.toNumber(value.toString().substr(0, 4));
		var month = nexacro.toNumber(value.toString().substr(4, 2));
		var date = nexacro.toNumber(value.toString().substr(6, 2));

		var dayExpression = new RegExp(/^(19|20)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[0-1])$/);
		var noExpression = new RegExp(/^[0-9]{8}$/);

		if (!dayExpression.test(value)) 
		{
			return false;
		}

		if (!noExpression.test(value)) 
		{
			return false;
		}

		if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) 
		{
			if (date > 31 || date < 1) 
			{
				return false;
			}
		}
		else if (month == 2) 
		{
			if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) 
			{
				if (date > 29 || date < 1) 
				{
					return false;
				}
			}
			else 
			{
				if (date > 28 || date < 1) 
				{
					return false;
				}
			}
		}
		else if (month == 4 || month == 6 || month == 9 || month == 11) 
		{
			if (date > 30 || date < 1) 
			{
				return false;
			}
		}

		return true;
	},

	/********************************************************************************
	 * 대상값의 정수부, 소수부의 정합성 체크
	 * @param Number 대상값
	 * @param Number 전체길이
	 * @param Number 소수부길이
	 * @return Boolean
	 ********************************************************************************/
	isNumberFormatValidation : function (value, totalLength, decimalLength)
	{
		// 대상값이 null 인경우, 정합성을 체크 하지 않는다. : 2013-04-10
		if (this.isNull(value)) 
		{
			return;
		}

		// 대상값을 "." 만 입력했을경우, false를 return 한다. : 2013-04-10
		if (value == ".") 
		{
			return false;
		}

		var dotIndex = "";
		var dotCnt = value.replace(/[^.]/g, '');
		var itegerValue = "";
		var decimalValue = "";
		var integerLength = totalLength - decimalLength;
		var returnValue = false;

		if (dotCnt.length == 0) 
		{
			itegerValue = value;
			decimalValue = "";
		}
		else 
		{
			dotIndex = value.indexOf(".");
			itegerValue = value.substr(0, dotIndex);
			decimalValue = value.substr(dotIndex + 1);
		}

		if (dotCnt.length == 0 || dotCnt.length == 1) 
		{
			if (itegerValue.length <= integerLength && decimalValue.length <= decimalLength) 
			{
				returnValue = true;
			}
		}

		// 입력포맷 메세지 처리를 위해 추가 : 2013-03-05
		var integerType = "";
		var decimalType = "";
		var inputType = "";
		if (!returnValue) 
		{
			for (var i = 0; i < integerLength; i++) 
			{
				integerType += "#";
			}

			if (decimalLength != 0) 
			{
				decimalType += ".";
				for (var i = 0; i < decimalLength; i++) 
				{
					decimalType += "#";
				}
			}

			inputType = integerType + decimalType;

			this.refform.alert("입력포맷 : " + inputType);
		}

		return returnValue;
	},

	/********************************************************************************
	 * Object가 함수인지 확인한다.
	 * @param String 함수 명
	 * @return String
	 ********************************************************************************/
	isFunction : function (functionName)
	{
		//functionName은 메서드의 이름
		var objName = functionName;
		
		//this.이 포함되지 않은 경우
		if (functionName.indexOf("this.") < 0)
		{
			objName = "this.refform." + functionName;
		}
		
		if (typeof ( eval ( objName ) ) == "function") 
		{
			return true;
		}
		else 
		{
			return false;
		}
	},

	/********************************************************************************
	 * replace에서 정규식 없이도 replace되도록 하는 기능.
	 * @param String 대상 값
	 * @param String 찾아 없앨 문자열
	 * @param String 변경할 문자열
	 * @return String
	 ********************************************************************************/
	replaceAll : function (value, originalText, replaceText)
	{
		value = new String(value);
		var returnText = value;

		if (this.isNotNull(value)) 
		{
			returnText = value.split(originalText).join(replaceText);
		}
		return returnText;
	},

	/********************************************************************************
	 * 지정된 캐릭터셋 별로 byte length를 리턴한다.
	 * @param String 대상 값
	 * @param String 구분 값 EUC-KR (한글을 2byte로 인식), UTF-8 (한글을 3byte로 인식)
	 * @return Number
	 ********************************************************************************/
	getBytes : function (value, gubun)
	{
		var inValue = value.toString();
		var length = 0;
		var step = 1;

		if (gubun == "UTF-8") 
		{
			step = 3;
		}
		else if (gubun == "EUC-KR") 
		{
			step = 2;
		}

		for (var index = 0; index < inValue.length; index++) 
		{
			if (inValue.charCodeAt(index) > 127) 
			{
				length += step;
			}
			else 
			{
				length += 1;
			}
		}
		return length;
	},

	/********************************************************************************
	 * 지정한 문자열부터 길이수 만큼 문자열을 가져온다.
	 * @param String 대상 값
	 * @param String 문자 열
	 * @param Number 추출할 길이
	 * @return String
	 ********************************************************************************/
	indexOfSubstring : function (value, subString, length)
	{
		return value.substr(value.indexOf(subString) + subString.length, length);
	},

	/********************************************************************************
	 * 지정한 문자열부터 길이수 만큼 문자열을 오른쪽방향으로 가져온다.
	 * @param String 대상 값
	 * @param String 문자 열
	 * @param Number 추출할 길이
	 * @return String
	 ********************************************************************************/
	indexOfSubstringRight : function (value, subString, length)
	{
		return value.substr(value.indexOf(subString) - length, length);
	},

	/********************************************************************************
	 * 날짜를 String 문자열로 변환
	 * @param String 문자 열
	 *
	 * @return String
	 *
	 ********************************************************************************/
	dateToString : function (value)
	{
		var objArray = new Array();

		objArray.push((new Date(value)).getFullYear());
		objArray.push(((new Date(value)).getMonth() + 1).toString().padLeft(2, "0"));
		objArray.push(((new Date(value)).getDate()).toString().padLeft(2, "0"));

		return objArray.join("-");
	},

	/********************************************************************************
	 * 문자열을 날짜로 변환
	 * @param String 문자 열
	 *
	 * @return Date
	 *
	 ********************************************************************************/
	stringToDate : function (value)
	{
		if (value.length != 6 && value.length != 8) 
		{
			this.refform.alert("stringToDate는 6자(YYMMDD) 또는 8자(YYYYMMDD) 형식으로 값을 넣어주어야 합니다.");
		}

		if (value.length == 6) 
		{
			var nowYear = (new Date()).getFullYear();
			var newYear = parseInt(value.substr(0, 2)) + 2000;

			if (nowYear < newYear) 
			{
				newYear -= 100;
			}

			value = newYear.toString() + value.substr(2);
		}

		return new Date(parseInt(value.substr(0, 4)), parseInt(value.substr(4, 2)) - 1, parseInt(value.substr(6, 2)));
	},

	/********************************************************************************
	 * 자리 수 마다 ','를 찍어준다.
	 * @param String 숫자
	 *
	 * @return String
	 *
	 ********************************************************************************/
	formatComma : function (value)
	{
		return String(value).replace(/(\d)(?=(?:\d{3})+(?!\d))/g, '$1,');
	},

	/********************************************************************************
	 * 숫자에 찍힌 ','를 제거한다.
	 * @param String 콤마가 포함된 숫자
	 *
	 * @return String
	 *
	 ********************************************************************************/
	replaceComma : function (value)
	{
		return value.replace(/[,]/g, "");
	},

	/********************************************************************************
	 * 문자 포맷 형식 변환
	 * @param String 문자열
	 * @param String 문자열 포맷(#:문자, 포맷스트링("-", ",", ".") 등
	 *
	 * @return String
	 *
	 ********************************************************************************/
	formatMask : function (value, mask)
	{
		var returnValue = "";
		var sUnit;

		if (this.isNull(value)) 
		{
			return this.isNullThenEmpty(value);
		}

		for (var index = 0; index < mask.length; index++) 
		{
			var str = mask.substr(index, 1);

			if (str == "#") 
			{
				returnValue += value.substr(0, 1);
				value = value.substr(1);
			}
			else 
			{
				returnValue += str;
			}
		}

		return returnValue;
	},

	/********************************************************************************
	 * 오늘 날짜를 가져오는 함수(클라이언트 PC기준)
	 * @param String 리턴할 값을 지정(YYYY, MM, DD, HH, HH24, MI, SS, MIL)
	 *
	 * @return String
	 *
	 ********************************************************************************/
	getClientDate : function (value)
	{
		var date = new Date();

		if (value.indexOf("YYYY") >= 0) 
		{
			value = value.replace(/YYYY/g, date.getFullYear());
		}

		if (value.indexOf("MM") >= 0) 
		{
			value = value.replace(/MM/g, (date.getMonth() + 1).toString().padLeft(2, "0"));
		}

		if (value.indexOf("DD") >= 0) 
		{
			value = value.replace(/DD/g, date.getDate().toString().padLeft(2, "0"));
		}

		if (value.indexOf("HH24") >= 0) 
		{
			value = value.replace(/HH24/g, date.getHours().toString().padLeft(2, "0"));
		}

		if (value.indexOf("HH") >= 0) 
		{
			value = value.replace(/HH/g, (date.getHours() % 12).toString().padLeft(2, "0"));
		}

		if (value.indexOf("MI") >= 0) 
		{
			value = value.replace(/MI/g, date.getMinutes().toString().padLeft(2, "0"));
		}

		if (value.indexOf("SS") >= 0) 
		{
			value = value.replace(/SS/g, date.getSeconds().toString().padLeft(2, "0"));
		}

		if (value.indexOf("MIL") >= 0) 
		{
			value = value.replace(/MIL/g, date.getMilliseconds().toString().padLeft(3, "0"));
		}

		if (value.indexOf("TIME") >= 0) 
		{
			value = value.replace(/TIME/g, date.getTime().toString().padLeft(3, "0"));
		}

		return value;
	},

	/********************************************************************************
	 * Grid의 DisplayType 이 date 인경우 값이 NULL 이면 빈칸으로, 값이 있으면 날짜형식으로 표시한다.
	 *
	 * @author 
	 * @since 2012-08-30
	 * @version 1.0
	 *
	 * @param Object objName (dataset의 컬럼명)
	 *
	 * @return Object String(objName+".toString().length==0?'text':'date'"
	 *
	 ********************************************************************************/
	setDateDisplayTypeExpr : function (value)
	{
		return eval(value + ".toString().length==0?'text':'date'");
	},

	/********************************************************************************
	 * 콤포넌트를 배열로 받아 Enable과 Visible 값을 변경한다.
	 * @param Object componentArray (Array로 받는 Component 배열)
	 * @param String gubun (visible/enable)
	 * @param Boolean value (true/false)
	 * @param String componentGubun
	 *
	 * @return
	 *
	 ********************************************************************************/
	setComponentVisibleEnable : function (componentArray, gubun, value, componentGubun)
	{
		if (componentArray.length == 0) 
		{
			return;
		}

		if (this.isNull(componentArray) || this.isNull(gubun)) 
		{
			return "";
		}

		var inIndex = -1;
		var inArray = new Array();

		if (componentGubun == "ALL" || this.isNull(componentGubun)) 
		{
			inArray = componentArray;
		}
		else if (componentGubun == "S" || componentGubun == "D") 
		{
			for (var index = 0; index < componentArray.length; index++) 
			{
				if (componentArray[index].name.substr(0, 2) == componentGubun + "_") 
				{
					inIndex += 1;
					inArray.getSetter(inIndex).set(componentArray[index]);
				}
			}
		}

		if (gubun == "visible") 
		{
			for (var index = 0; index < inArray.length; index++) 
			{
				inArray[index].set_visible(value);
			}
		}
		else if (gubun == "enable") 
		{
			for (var index = 0; index < inArray.length; index++) 
			{
				inArray[index].set_enable(value);
			}
		}
		else if (gubun == "value") 
		{
			for (var index = 0; index < inArray.length; index++) 
			{
				inArray[index].set_value(value);
			}
		}
	},

	/********************************************************************************
	 * 콤포넌트를 배열로 받아 조회조건을 리턴한다.
	 * @param Object componentArray (Array로 받는 Component 배열)
	 * @return String
	 ********************************************************************************/
	setSearchPramArray : function (componentArray)
	{
		var returnValue = "";

		if (this.SEARCHDIV.components.length == 0) 
		{
			return;
		}

		var inIndex = -1;
		var inOriginalArray = componentArray;
		var inArray = new Array();

		for (var index = 0; index < inOriginalArray.length; index++) 
		{
			if (inOriginalArray[index].name.substr(0, 2) == "S_") 
			{
				inIndex += 1;
				inArray.getSetter(inIndex).set(inOriginalArray[index]);
			}
		}

		var returnValue = new Array();
/**** 확인 *****/
		for (var index = 0; index < inArray.length; index++) 
		{
			returnValue += (index == 0 ? 'param =' : 'param += ') + inArray[this.refform.lookup("i")].name.substr(2) + '="' + this.refform.libUtils.isNullThenEmpty(inArray[this.refform.lookup("i")].value) + '" \n';
		}

		return returnValue;
	},
	
	/**
	 * 값이 Array인지 여부를 나타내는 메소드
	 * @param value Object
	 * @return Boolean
	 */
	isArray : function(value){
		var ARRAY_CLASS = "[object Array]";
		var typeClass = Object.prototype.toString.call(value);
		return typeClass === ARRAY_CLASS;
	},

	/********************************************************************************
	 * 배열에 indexOf 가 지원되지 않아 이에 동일한 기능에 대해서 구현
	 * @param Array
	 * @param String
	 *
	 * @return int
	 *
	 ********************************************************************************/
	arrayIndexOf : function (inArray, findString)
	{
		var result = -1;
		for (var index = 0; index < inArray.length; index++) 
		{
			if (inArray[index] == findString) 
			{
				result = index;
				break;
			}
		}

		return result;
	},

	/********************************************************************************
	 * 그리드의 CheckBox를 Radio처럼 동작되되록 설정.
	 * @param Dataset	대상Dataset
	 * @param String 	설정할 컬럼의 ID
	 * @param Event		DSColChangeEventInfo
	 * @return
	 ********************************************************************************/
	isGridCheckBoxThenRadio : function (obj, columnId, e)
	{
		if (e.columnid == columnId) 
		{
			for (var i = 0; i < obj.rowcount; i++) 
			{
				if(i != e.row)
				{	
					//trace(i);
					obj.setColumn(i, columnId, 0);
				}
			}
		}
	},

	/********************************************************************************
	 * 그리드에 From-To 값 입력시 정합성 체크.
	 * @param Dataset	대상Dataset
	 * @param String 	입력할 From 컬럼의 ID
	 * @param String 	입력할 To   컬럼의 ID
	 * @param String 	입력할 From 컬럼의 Value
	 * @param String 	입력할 To 	 컬럼의 Value
	 * @param String 	다른행의 중복체크 유무 구분자(1: 중복체크 하지않음, NULL : default)
	 * @param int	 	이벤트가 발생한 ROW INDEX
	 *
	 * 이벤트 발생 ROWPOSITION으로 비교하는 것이 아니라서 간접 수정의 방법을 통해 수정될 경우 제대로 중복체크를 하지 못함
	 *
	 * @return Boolean
	 *
	 ********************************************************************************/
	numberInputRangecheck : function (obj, fromId, toId, fromValue, toValue, gubun, rowIndex)
	{
		var objCnt = obj.rowcount;

		var fromValue = this.isNotNull(fromValue) ? nexacro.toNumber(fromValue) : null;
		var toValue = this.isNotNull(toValue) ? nexacro.toNumber(toValue) : null;

		var returnValue = true;

		if (fromValue > toValue && this.isNotNull(fromValue) && this.isNotNull(toValue)) 
		{
			this.refform.alert("From 입력값은 To 입력값보다 클 수 없습니다.");
			return false;
		}

		if (this.isNull(gubun)) 
		{
			// 다른행의 중복체크 유무 필요 할경우 동작
			for (var i = 0; i < objCnt; i++) 
			{
				var fromCheckValue = nexacro.toNumber(obj.getColumn(i, fromId));
				var toCheckValue = nexacro.toNumber(obj.getColumn(i, toId));

				if (i != rowIndex) 
				{
					
					var msg = "입력한 값이 " + (i + 1) + "번째  행과 중복됩니다.";

					if (this.isNull(toValue)) 
					{
						if (fromCheckValue <= fromValue && fromValue <= toCheckValue) 
						{
							this.refform.alert(msg);
							return false;
						}
					}
					else if (this.isNull(fromValue)) 
					{
						if (fromCheckValue <= toValue && toValue <= toCheckValue) 
						{
							this.refform.alert(msg);
							return false;
						}
					}
					else 
					{
						if (fromValue <= fromCheckValue && fromCheckValue <= toCheckValue && toCheckValue <= toValue) 
						{
							this.refform.alert(msg);
							return false;
						}
						else if (fromValue <= fromCheckValue && fromCheckValue <= toValue && toValue <= toCheckValue) 
						{
							this.refform.alert(msg);
							return false;
						}
						else if (fromCheckValue <= fromValue && fromValue <= toValue && toValue <= toCheckValue) 
						{
							this.refform.alert(msg);
							return false;
						}
						else if (fromCheckValue <= fromValue && fromValue <= toCheckValue && toCheckValue <= toValue) 
						{
							this.refform.alert(msg);
							return false;
						}
					}
				}
			}
		}

		return returnValue;
	},

	/*****************************************************************************************************************************
	 * textarea max length 체크
	 * @param String 검증할 값
	 * @param integer 검증할 길이
	 * @return Boolean
	 *****************************************************************************************************************************/
	inputLimiteCheck : function (content, max_length)
	{
		var contentValue = content.value;
		var one_char;
		var str_byte = 0;
		var str_length = 0;

		for (var i = 0; i < contentValue.length; i++) 
		{
			// 한글자추출
			one_char = contentValue.charAt(i);

			// 한글이면 3를 더한다.
			if (escape(one_char).length > 4) 
			{
				str_byte = str_byte + 3;
			}
			// 그외의 경우는 1을 더한다.
			else 
			{
				str_byte++;
			}

			// 전체 크기가 max_length를 넘지않으면
			if (str_byte <= max_length) 
			{
				str_length = i + 1;
			}
		}

		// 전체길이를 초과하면
		if (str_byte >= max_length) 
		{
			this.refform.alert(max_length + " 글자를 초과 입력할수 없습니다. \n 초과된 내용은 자동으로 삭제 됩니다. ");
			return false;
			//content.set_value(contentValue.substr(0, str_length - 1));
		}
		return true;
	},

	/********************************************************************************
	 * EDIT에서 글자입력제한(onchar 이벤트에서사용)
	 * @param obj:Edit
	 * @param e:CharEventInfo
	 * @return boolean
	 ********************************************************************************/
	limitInputText : function (obj, e)
	{
		var objRegExp = new RegExp("[^0-9-\]", "g");
		var objResult = objRegExp.exec(e.chartext);

		if (objResult) 
		{
			return false;
		}
		else 
		{
			return true;
		}
	},
	
	/********************************************************************************
	 * 파일 경로와 파일명을 전달받아 서버 상의 파일 경로를 return 한다.
	 * @param  url : String 파일명을 포함한 파일 경로
	 * @return String
	 ********************************************************************************/
	getFileUrl : function (url)
	{
		var value = application.services["svr"].url;
		    value += "cmmn/formlib/cmmnfileselector/cmmnFileSelectorController.do?platformType=xplatform13";
		    value += "&method=view";
		    value += "&filePath=" + encodeURIComponent(url);
		return value;
	},
	
	/********************************************************************************
	 * 그룹웨어 메일 컨텐츠 내에 사용될 링크를 return 한다.
	 * @param  param  : mis 화면을 호출하기 위한 파라미터 
	 * @return String
	 ********************************************************************************/	
	getExtMailLink : function (param)
	{
		var urlValue = encodeURIComponent(application.globalExtLinkUrl + param);
		
		var value = application.globalExtGwLinkUrl;
			value += "?url=";
			value += urlValue;
		return value;
	},	

	/********************************************************************************
	 * 결재 양식 접수자의 소속 부서 유효성 여부를 리턴한다. 
	 * @param  formCode : String 전자결재 양식 코드
	 * @return Boolean
	 ********************************************************************************/
	isRcepterValid : function (formCode)
	{
		var returnValue = false;
		if(this.refform.libUtils.isNull(formCode))
		{
			this.refform.alert("결재양식 코드가 없습니다.");
			return returnValue;
		}
		var rcepterValidList = new Dataset;
		if(this.refform.libUtils.isNull(this.refform.lookup("rcepterValidList")))
		{
			this.refform.addChild("rcepterValidList", rcepterValidList);
		}
		else
		{
			this.refform.removeChild("rcepterValidList");			
			this.refform.addChild("rcepterValidList", rcepterValidList);
		}
		
		var controllerUrl 		= "/cmmn/elctrnSanctn/rcepterAppnController.do";
		var methodName	  		= "isRcepterValid";
		var inDatasets    		= "";
		var outDatasets	  		= "rcepterValidList=rcepterValidList";
		var parameters	 		= "";
		var callBackFunction 	= "privateCallbackFunction:RcepterValidAfter";
		var isAsync 			= false;
			parameters 		   += "formCode='" + formCode + "'";
		this.refform.CmmnTransaction(controllerUrl, methodName, inDatasets, outDatasets, parameters, callBackFunction, isAsync);
		
		var resultCount = this.refform.rcepterValidList.getColumn(0, "resultCount");
		if(resultCount == 1)
		{
			returnValue = true;
		}
		else
		{
			returnValue = false;
		}
		return returnValue;
	},	
	
	/********************************************************************************
	 * camelCase를 DB Column 형태로 변경
	 * 예를 들어 DB컬럼 명이 DEPT_NO 이면 화면에서는 CamelCase 인 deptNo를 사용하는데.
	 * DB에서 컬럼값을 받아 검증 할 때 DEPT_NO 로 넘겨 주어야 한다.
	 * 이것을 하는 유틸리티이다.
	 * @param columnName : String
	 * @return String
	 ********************************************************************************/
	translateColumnToUpperCase : function (columnName)
	{
		var returnChar = "";
		
		for(var index = 0; index < columnName.length; index++)
		{
			var chr = columnName.charAt(index);
			if(chr == chr.toUpperCase())
			{
				returnChar += "_" + chr;
			}
			else{
				returnChar += chr.toUpperCase();
			}
		}
		
		return returnChar;
	},
	
	/********************************************************************************
	 * 입력된 값의 한글 완성형 여부 체크 
	 * @param	editText	확인할 문자열
	 * @param	mode		완성형 체크 모드(0 : 완성형 한글만, 1 : 숫자만, 2 : 영문만, 3 : 완성형 한글 + 숫자 + 영문 + 띄어쓰기 조합)
	 * @return	true / false
	 ********************************************************************************/
	checkFullChar : function(editText, mode)
	{
		if(editText == "")
		{
			return false;
		}
		
		for(var idx = 0; idx < editText.length; idx++){
			var chr = editText.substr(idx, 1);
			trace("mode : " + mode);
			switch(mode)
			{
				case "0" : 
					chr = escape(chr);
					if(chr.charAt(1) == "u")
					{
						chr = chr.substr(2, (chr.length - 1));
						if((chr < "AC00") || (chr > "D7A3"))
						{
							return false;
						}
					}
					else
					{
						return false;
					}
					break;
				case "1" : 
					var chk = new RegExp("[0-9]");
					return chk.test(chr);
					break;
				case "2" : 
					var chk = new RegExp("[a-zA-Z]");
					return chk.test(chr);
					break;
				case "3" : 
					var chk = new RegExp("[0-9a-zA-Z ]");
					var rtn = chk.test(chr);
					
					if(rtn)
					{
						return true;
					}
						
					chr     = escape(chr);
					if(chr.charAt(1) == "u")
					{
						chr = chr.substr(2, (chr.length - 1));
						if((chr < "AC00") || (chr > "D7A3"))
						{
							return false;
						}
					}
					else
					{
						return false;
					}
					break;
			}
		}
		
		return true;
	},
	
	/********************************************************************************
	 * Combo로 사용될 dataset에 헤더타입을 추가한다.
	 * @param dataset		Combo에서 사용되는 dataset
	 * @param headType		추가할 헤더타입 ( EMPTY, CHOICE, ALLSTRING )
	 * @return
	 ********************************************************************************/
	setComboHeadType : function(innerDs, headType)
	{
		innerDs.insertRow(0);
		innerDs.setColumn(0, "code", "");
		
		switch(headType)
		{
			case "EMPTY":
				innerDs.setColumn(0, "data", "");
			break;
			
			case "CHOICE":
				innerDs.setColumn(0, "data", "--선택--");
			break;
			
			case "ALLSTRING":
				innerDs.setColumn(0, "data", "--전체--");
			break;
			
			case "USER":
				innerDs.setColumn(0, "data", "--전체--");
				innerDs.setColumn(0, "code", undefined);
			break;
			
			default:
				innerDs.deleteRow(0);
			break;
		}
	},
	
	/********************************************************************************
	 * 텍스트의 길이 및 높이를 폰트에 맞게 가져옴
	 * @param sText		String
	 * @param obj		폰트 정보 Component
	 * @return
	 ********************************************************************************/
	getTextSize : function (sText, obj)
	{
// 	    var objFont = obj.currentstyle.font;
// 	    var arrsize = nexacro.getTextSize(sText, objFont, false, obj.getOffsetWidth(), obj.wordwrap);
		//var arrsize = nexacro._getTextSize2(sText, objFont, obj.wordwrap, obj.getOffsetWidth());
		var arrsize = Eco.XComp.PositionSize.getTextSize(obj, sText, false);

		return arrsize;
	},	
	
	/********************************************************************************
	 * decode
	 * @return      decode 실행 결과 값
	 ********************************************************************************/
	decode : function()
	{
		var varRtnValue = null;
		var arrArgument = arguments; 
		var varValue = arrArgument[0]; 
		var bIsDefault = false;
		var nCount = 0;

		if((arrArgument.length % 2) == 0) {
			nCount = arrArgument.length - 1;
			bIsDefault = true;
		} else {
			nCount = arrArgument.length;
			bIsDefault = false;
		}

		for(var i = 1; i < nCount; i+=2) {
			if(varValue == arrArgument[i]) {
				varRtnValue = arrArgument[i+1];
				i = nCount;
			}
		}

		if(varRtnValue == null && bIsDefault) {
			varRtnValue = arrArgument[arrArgument.length-1];
		}

		return varRtnValue;
	},

    /********************************************************************************
	 * iif
	 * @return      iif 실행 결과 값
	 ********************************************************************************/
	iif : function()
	{
		var varRtnValue = null;
		var arrArgument = arguments;

		if(arrArgument[0]) {
			return arrArgument[1];
		} else {
			return arrArgument[2];
		}
	},
	
	/**********************************************************************************
	 * Function Name: gfn_setComma
	 * Description  : 숫자에 ","를 집어넣기
	 * Arguments    : sNum ( 문자열 )
	 * return       : 포맷된 문자
	 **********************************************************************************/
	setComma : function (sNum)
	{
		sNum = sNum.replace(",", "");

		var ppos,sDigit,nEnd,nStart = 0,sRet = "";

		if (sNum.charAt(0) == "+" || sNum.charAt(0) == "-") 
		{
			sRet += sNum.charAt(0);
			nStart = 1;
		}

		ppos = sNum.indexOf(".", nStart);
		if (ppos < 0) 
		{
			nEnd = sNum.length;
		}
		else 
		{
			nEnd = ppos;
		}

		sDigit = sNum.substr(nStart, nEnd - nStart);
		
		for (this.refform.getSetter("pos").set(0); this.refform.lookup("pos") < sDigit.length; this.refform.lookupSetter("pos", "set_pos").postInc()) 
		{
		    //trace(this.refform.lookupSetter("pos", "set_pos").postInc());
			if (this.refform.lookup("pos") != 0 && (sDigit.length - this.refform.lookup("pos")) % 3 == 0) 
			{
				sRet += ",";
			}
			
			sRet += sDigit.charAt(this.refform.lookup("pos"));
		}
		sRet += sNum.substr(nEnd);

		return sRet;
	},
	/********************************************************************************
	 * Function Name	: isDatasetUpdated
	 * Description		: dataSet의 Row 중에서 변경된 내용이 있는지 여부를
	 *					  판단하는 함수
	 * Arguments		: objDs(DataSet)
	 * Return 			: true = 변경 된 데이터가 존재
	 *					  false = 변경 된 데이터가 없음
	 ********************************************************************************/
	isDatasetUpdated : function (objDs)
	{
	    if (objDs.getDeletedRowCount() > 0)
	    {
	        return true;
	    }
			
		if (objDs.findRowExpr("dataset.getRowType(rowidx)==4||dataset.getRowType(rowidx)==2||dataset.getRowType(rowidx)==8") > -1) 
		{
			return true;
		}
		
		return false;
	},
	
	/********************************************************************************
	 * Function Name	: isUpdateRow					       	    				*
	 * Desc				: 해당 Row가 Update 되었는지 여부							*
	 * Parameter		: objDs = Dataset											*
	 *					  nRow = Row  												*
	 * Return 			: true = 변경												*
	 *					  false = 변경 안됨										*
	 ********************************************************************************/
	isUpdateRow : function(objDs:Dataset, nRow)
	{
		var bRetVal = false;
		
		for  (var i=0; i<objDs.getColCount(); i++)
		{
			var sColId = objDs.getColID(i);
			if (sColId == "chk")
				continue;
				
			if (objDs.getColumn(nRow, i) == objDs.getOrgColumn(nRow,i))
				continue;
				
			bRetVal = true;
			break;
		}
		
		return bRetVal;
	},
	
	/********************************************************************************
	 * Function Name	: autoHypenPhone					       	    			*
	 * Desc				: 전화 또는 휴대폰 번호에 하이픈(-) 넣기				*
	 * Parameter		: str = 전화번호  											*
	 * Return 			: String = 하이픈 넣은 전화번호							*
	 ********************************************************************************/
	autoHypenPhone : function (str)
	{
		str = str.replace(/[^0-9]/g, '');
		var tmp = '';
		if( str.length < 4)
		{
			return str;
		}
		else if(str.length < 8)
		{
			tmp += str.substr(0, 3);
			tmp += '-';
			tmp += str.substr(3);
			return tmp;
		}
		else if(str.length < 9)
		{
			tmp += str.substr(0, 4);
			tmp += '-';
			tmp += str.substr(4);
			return tmp;
		}
		else if(str.length < 10)
		{
			tmp += str.substr(0, 2);
			tmp += '-';
			tmp += str.substr(2, 3);
			tmp += '-';
			tmp += str.substr(5);

			return tmp;
		}
		else if(str.length < 11)
		{
			if(str.substr(0, 2) == "02")
			{
				tmp += str.substr(0, 2);
				tmp += '-';
				tmp += str.substr(2, 4);
				tmp += '-';
				tmp += str.substr(6);
			}
			else
			{
				tmp += str.substr(0, 3);
				tmp += '-';
				tmp += str.substr(3, 3);
				tmp += '-';
				tmp += str.substr(6);
			}
			return tmp;
		}
		else
		{				
			tmp += str.substr(0, 3);
			tmp += '-';
			tmp += str.substr(3, 4);
			tmp += '-';
			tmp += str.substr(7);
			return tmp;
		}
		return str;
	}
};
]]></Script>
