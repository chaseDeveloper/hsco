#tmaxeamagent.conf

# SSO Agent 이름
#com.tmax.sso.filter.instancename = com.sun.aas.instanceName
com.tmax.sso.filter.thishost = hsco_pp

# token type을 지정한다. (common, userid)
com.tmax.sso.filter.token.type = common
# 토큰 유효성을 체크할 유효시간 (초)
com.tmax.sso.filter.token.validity.time = 180
# 토큰 암호화 알고리즘
com.tmax.sso.filter.security.algorithm = ARIA128
# 로깅 언어 (en, ko)
com.tmax.sso.filter.log.lang = ko
com.tmax.sso.filter.log.level = debug
#com.tmax.sso.filter.log.level = off
com.tmax.sso.filter.log.target = session,access,statistics
com.tmax.sso.filter.log.dir = /app_logs/sso/hsco
com.tmax.sso.filter.log.jdbc = no
com.tmax.sso.filter.charencoding = false;
com.tmax.sso.filter.preserve.log.period = -1

# p3p
com.tmax.sso.filter.p3p = CP=\"CAO PSA OTR DEM\"

# 키 교환 모드(rsa, dh, fixed)
com.tmax.sso.filter.security.key.mode = rsa
# 이중로그인시에 기존에 토큰에 대한 처리방식 (single은 기존 토큰 삭제)
com.tmax.sso.filter.keep.single = yes
# requset, response에서의 character encoding 방식
com.tmax.sso.filter.encoding = utf-8

# 로그인하기 위한 메인 페이지
com.tmax.sso.filter.login.input.url = index.jsp
# 로그아웃 페이지
com.tmax.sso.filter.logout.action.url = http:\/\/192.168.10.232\/logout.do
# 토큰 분배후 인증 처리할 페이지
com.tmax.sso.filter.login.token.url = tmaxssologin.jsp
# SSO master server
com.tmax.sso.filter.server.path.master = http:\/\/ssoserver.hsco.or.kr:8080\/
# SSO slave server
#com.tmax.sso.filter.server.path.slave = http:\/\/ssoserver.hsco.or.kr:8083\/

# 토큰 분배가 필요한 자원인지 설정
com.tmax.sso.filter.target = \/*;

# 세션 update 
#com.tmax.sso.filter.sessionupdator.using = no
com.tmax.sso.filter.sessionupdator.using = yes
com.tmax.sso.filter.sessionupdator.ip = ssoserver.hsco.or.kr
com.tmax.sso.filter.sessionupdator.port = 8080
com.tmax.sso.filter.sessionupdator.url = \/__tmax_eam_tokencheck__

# 자체 Access Control
com.tmax.eam.filter.check.permission = no
com.tmax.eam.filter.check.permission.method.rbac = no
com.tmax.eam.filter.check.permission.rbac.datasource = java:comp/env/jdbc/rbacDB
com.tmax.eam.filter.check.permission.rbac.log = yes
com.tmax.eam.filter.deny.url = 
com.tmax.eam.filter.restriction.ip = *\/*\/*;!(10.10.74.204\/*\/*)
com.tmax.eam.filter.restriction.id = 
com.tmax.eam.filter.access.failure.notify = no

# 키교환을 위한 설정
com.tmax.sso.filter.keymanager.rsa.root.cert.path = keyexchange\/tmax.der
com.tmax.sso.filter.keymanager.rsa.signer.cert.path = keyexchange\/agent\/signCert.der
com.tmax.sso.filter.keymanager.rsa.signer.privatekey.path = keyexchange\/agent\/signPri.key
com.tmax.sso.filter.keymanager.rsa.signer.privatekey.password = 0F4000B4504CC57304D247C72046546D74
com.tmax.sso.filter.keymanager.rsa.recipient.cert.path = keyexchange\/server\/kmCert.der

# SAML 설정
com.tmax.sso.filter.saml.support = no
com.tmax.sso.filter.saml.keystore = saml\/agent0.ks
com.tmax.sso.filter.saml.truststore = saml\/agent0.ts
com.tmax.sso.filter.saml.keystore.password = 4DDA5C04F77832A1A52DA361D3BADFCB53
com.tmax.sso.filter.saml.truststore.password = 4DDA5C04F77832A1A52DA361D3BADFCB53
com.tmax.sso.filter.saml.signature.algorithm = http:\/\/www.w3.org\/2000\/09\/xmldsig#rsa-sha1



#tmaxeamapi.conf

# SSO Issuer 이름(수평구조시 Agent와 같은 이름으로 설정한다.)
#com.tmax.sso.api.instancename = com.sun.aas.instanceName
com.tmax.sso.api.thishost = hsco_pp
# SSO Server Checker 주기
com.tmax.sso.api.alivecheck.interval = 2

# 키 교환 모드 (rsa, dh, fixed)
com.tmax.sso.api.security.key.mode = rsa
# request, response에서의 character encoding 방식
com.tmax.sso.api.encoding = utf-8
# SSO Server와의 시간 동기화를 위한 차이값
com.tmax.sso.api.time.skew = 30
# 토큰 암호화 알고리즘
com.tmax.sso.api.security.algorithm = ARIA128
# 로깅 언어 (en, ko)
com.tmax.sso.api.log.lang = ko

# identity provider에서 로그인을 위한 페이지
#com.tmax.sso.authentication.idp.url = http:\/\/192.168.10.222:8082\/ssoagent\/login.xhtml

# 로그아웃 페이지
com.tmax.sso.api.logout.action.url = http:\/\/192.168.10.232\/logout.do

# SSO master server
com.tmax.sso.api.server.path.master = http:\/\/ssoserver.hsco.or.kr:8080\/
# SSO slave server
#com.tmax.sso.api.server.path.slave = http:\/\/ssoserver.hsco.or.kr:8083\/

# 키 교환을 위한 설정
com.tmax.sso.api.keymanager.rsa.root.cert.path = keyexchange\/tmax.der
com.tmax.sso.api.keymanager.rsa.signer.cert.path = keyexchange\/agent\/signCert.der
com.tmax.sso.api.keymanager.rsa.signer.privatekey.path = keyexchange\/agent\/signPri.key
com.tmax.sso.api.keymanager.rsa.signer.privatekey.password = 0F4000B4504CC57304D247C72046546D74
com.tmax.sso.api.keymanager.rsa.recipient.cert.path = keyexchange\/server\/kmCert.der

# SAML을 위한 설정
com.tmax.sso.api.saml.support = no
com.tmax.sso.api.saml.signature.algorithm = http:\/\/www.w3.org\/2000\/09\/xmldsig#rsa-sha1
com.tmax.sso.api.saml.keystore = saml\/agent0.ks
com.tmax.sso.api.saml.keystore.password = 4DDA5C04F77832A1A52DA361D3BADFCB53
com.tmax.sso.api.saml.truststore = saml\/agent0.ts
com.tmax.sso.api.saml.truststore.password = 4DDA5C04F77832A1A52DA361D3BADFCB53

# cs를 위한 설정
com.tmax.sso.filter.cs.interlock=no
com.tmax.sso.filter.cs.module.clsid=8868A28C-4C6F-4ED1-9854-E6BB950E25B0

# 로깅을 위한 설정
# logger.sk_sso로 시작해야하며, 첫번째 log level을 지정할 수 있으며, 다음으로 적용할 로깅 type을 설정할 수 있다.
log4j.logger.sk_sso = INFO,sk_sso.console,sk_sso.file

# console에 DEBUG level로 출력
log4j.appender.sk_sso.console.Threshold = DEBUG
# log4j의 ConsoleAppender를 지정
log4j.appender.sk_sso.console = org.apache.log4j.ConsoleAppender
# log4j의 layout 지정
log4j.appender.sk_sso.console.layout = org.apache.log4j.PatternLayout

# file로 로깅하기 위해서 설정 (DailyRollingFileAppender는 일 주기로 로그 파일이 생성된다.)
log4j.appender.sk_sso.file = org.apache.log4j.DailyRollingFileAppender
# file 로깅 레벨
log4j.appender.sk_sso.file.Threshold = DEBUG
# 로그 파일 위치
log4j.appender.sk_sso.file.File = /app_logs/sso/hsco/tmaxssoagent.log
# 파일명 
log4j.appender.sk_sso.file.DatePattern = '.'yyyy-MM-dd
# 로깅 layout 
log4j.appender.sk_sso.file.layout = org.apache.log4j.PatternLayout
#log4j.appender.sk_sso.file.MaxFileSize=60KB
#log4j.appender.sk_sso.file.MaxBackupIndex=3
# 로깅 포멧
log4j.appender.sk_sso.file.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss} %C{1}.%M - %m%n

# JDBCAppender를 사용하여 Database에 로깅을 남긴다.
log4j.appender.sk_sso.database = org.apache.log4j.jdbcplus.JDBCAppender
# 로깅 레벨
log4j.appender.sk_sso.database.Threshold = INFO
# JDBC URL
log4j.appender.sk_sso.database.url = jdbc:oracle:thin:@10.10.74.203:1521:ORCL
# JDBC Driver
log4j.appender.sk_sso.database.dbclass = oracle.jdbc.driver.OracleDriver
# Database identity
log4j.appender.sk_sso.database.username = scott
# Database password
log4j.appender.sk_sso.database.password = tiger
# 로깅을 위한 query (sequence_number를 가지고 있으며, insert를 위해서 sequence를 생성해주어야한다.)
log4j.appender.sk_sso.database.sql = INSERT INTO syskeeper_sso_log(sequence_number,priority,log_date,content) values (sample_sequence.nextval,'@PRIO@',TIMESTAMP '@TIMESTAMP@','@MSG@')
# 로깅 layout 클래스
log4j.appender.sk_sso.database.layout = org.apache.log4j.PatternLayout
