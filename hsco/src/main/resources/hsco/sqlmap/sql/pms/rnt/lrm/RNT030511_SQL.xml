<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="RNT030511SQL">	

	<!-- 쿼리명 : 계약현황
	설명 : 계약현황
	수정일  수정자  수정내용
	작성자 : 이광원
	최초작성일 : 2016.10.05
	-->
	<select id="RNT030511DAO.getList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT AREA_SE
	     , MAX(DECODE(YYYY , '2013' , CNT , 0)) AS YEAR_2013
	     , MAX(DECODE(YYYY , '2014' , CNT , 0)) AS YEAR_2014
	     , MAX(DECODE(YYYY , '2015' , CNT , 0)) AS YEAR_2015
	     , MAX(DECODE(YYYY , '2016' , CNT , 0)) AS YEAR_2016          
	     , MAX(DECODE(YYYY , '2017' , CNT , 0)) AS YEAR_2017
	     , SUM(CNT) AS TOT              
	  FROM
	  (
	    SELECT SUBSTR(FRST_CNTRCT_DE , 1, 4) AS YYYY
	         , (SELECT CODE_NM FROM TBCOM_CMMN_CODE B WHERE GRP_CODE = 'RNT004' AND CHRCTR_PREPAR_VALUE_1 = A.AREA_SE) AS AREA_SE
	         , COUNT(*) AS CNT
	      FROM TBRNT_LFSTS_CNTRCT A
	     WHERE 1=1
	       AND FRST_CNTRCT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE#
          <isEqual property="CHK" compareValue="2">
           AND NOT EXISTS (SELECT 1 
                            FROM TBRNT_LFSTS_RESCI_TRMNAT Z 
                           WHERE A.CNTRCTR_NO = Z.CNTRCTR_NO 
                             AND A.CNTRCT_CO = Z.CNTRCTR_CO
                             AND Z.RESCI_TRMNAT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# )
          </isEqual>  	        
	     GROUP BY SUBSTR(FRST_CNTRCT_DE , 1, 4) , AREA_SE
	  ) 
	GROUP BY AREA_SE   
	ORDER BY AREA_SE
	</select>
	
	<!-- 쿼리명 : 나이별
	설명 : 나이별
	수정일  수정자  수정내용
	작성자 : 이광원
	최초작성일 : 2016.10.05
	-->
	<select id="RNT030511DAO.getList1" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<!-- 
	SELECT YYYY
	     , SUM(A) AS AGE_19
	     , SUM(B) AS AGE_20
	     , SUM(C) AS AGE_30
	     , SUM(D) AS AGE_40
	     , SUM(E) AS AGE_50
	     , SUM(F) AS AGE_60
	     , SUM(A) + SUM(B) + SUM(C) + SUM(D) + SUM(E)+ SUM(F) AS TOTAL
	  FROM( 
	        SELECT SUBSTR(A.FRST_CNTRCT_DE , 1 , 4) AS YYYY
	              ,(CASE WHEN 19 >= FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(SFCOM_DEC_ALL(IHIDNUM),1,6))) / 12) THEN COUNT(*) ELSE 0 END) AS A 
	              ,(CASE WHEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(SFCOM_DEC_ALL(IHIDNUM),1,6))) / 12) BETWEEN 20 AND 29 THEN COUNT(*) ELSE 0 END) AS B
	              ,(CASE WHEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(SFCOM_DEC_ALL(IHIDNUM),1,6))) / 12) BETWEEN 30 AND 39 THEN COUNT(*) ELSE 0 END) AS C
	              ,(CASE WHEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(SFCOM_DEC_ALL(IHIDNUM),1,6))) / 12) BETWEEN 40 AND 49 THEN COUNT(*) ELSE 0 END) AS D
	              ,(CASE WHEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(SFCOM_DEC_ALL(IHIDNUM),1,6))) / 12) BETWEEN 50 AND 59 THEN COUNT(*) ELSE 0 END) AS E
	              ,(CASE WHEN 60 <![CDATA[  <= ]]>  FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(SFCOM_DEC_ALL(IHIDNUM),1,6))) / 12) THEN COUNT(*) ELSE 0 END) AS F
	          FROM TBRNT_LFSTS_CNTRCT A
	          JOIN TBRNT_LFSTS_CSTMR B ON A.LFSTS_CSTMR_NO = B.LFSTS_CSTMR_NO
	          JOIN TBRNT_LFSTS_HOUSE_CNTRCTR C ON A.CNTRCTR_NO = C.CNTRCTR_NO AND A.CNTRCT_CO = C.CNTRCTR_CO
	         WHERE 1=1
	           AND FRST_CNTRCT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# 
	           <isEqual property="CHK" compareValue="2">
	           AND NOT EXISTS (SELECT 1 
	                             FROM TBRNT_LFSTS_RESCI_TRMNAT Z 
	                            WHERE A.CNTRCTR_NO = Z.CNTRCTR_NO 
	                              AND A.CNTRCT_CO = Z.CNTRCTR_CO
	                              AND Z.RESCI_TRMNAT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# )
	           </isEqual>                 
	         GROUP BY SUBSTR(A.FRST_CNTRCT_DE , 1 , 4)  , IHIDNUM  
	        )      
	  GROUP BY YYYY     
	  ORDER BY 1
	   -->		
	SELECT AREA_SE
         , SUM(DECODE(YYYY , '2013' ,  A , 0)) AS AGE_19_2013
         , SUM(DECODE(YYYY , '2013' ,  B , 0)) AS AGE_20_2013
         , SUM(DECODE(YYYY , '2013' ,  C , 0)) AS AGE_30_2013
         , SUM(DECODE(YYYY , '2013' ,  D , 0)) AS AGE_40_2013
         , SUM(DECODE(YYYY , '2013' ,  E , 0)) AS AGE_50_2013
         , SUM(DECODE(YYYY , '2013' ,  F , 0)) AS AGE_60_2013
         , SUM(DECODE(YYYY , '2014' ,  A , 0)) AS AGE_19_2014
         , SUM(DECODE(YYYY , '2014' ,  B , 0)) AS AGE_20_2014
         , SUM(DECODE(YYYY , '2014' ,  C , 0)) AS AGE_30_2014
         , SUM(DECODE(YYYY , '2014' ,  D , 0)) AS AGE_40_2014
         , SUM(DECODE(YYYY , '2014' ,  E , 0)) AS AGE_50_2014
         , SUM(DECODE(YYYY , '2014' ,  F , 0)) AS AGE_60_2014
         , SUM(DECODE(YYYY , '2015' ,  A , 0)) AS AGE_19_2015
         , SUM(DECODE(YYYY , '2015' ,  B , 0)) AS AGE_20_2015
         , SUM(DECODE(YYYY , '2015' ,  C , 0)) AS AGE_30_2015
         , SUM(DECODE(YYYY , '2015' ,  D , 0)) AS AGE_40_2015
         , SUM(DECODE(YYYY , '2015' ,  E , 0)) AS AGE_50_2015
         , SUM(DECODE(YYYY , '2015' ,  F , 0)) AS AGE_60_2015         
         , SUM(DECODE(YYYY , '2016' ,  A , 0)) AS AGE_19_2016
         , SUM(DECODE(YYYY , '2016' ,  B , 0)) AS AGE_20_2016
         , SUM(DECODE(YYYY , '2016' ,  C , 0)) AS AGE_30_2016
         , SUM(DECODE(YYYY , '2016' ,  D , 0)) AS AGE_40_2016
         , SUM(DECODE(YYYY , '2016' ,  E , 0)) AS AGE_50_2016
         , SUM(DECODE(YYYY , '2016' ,  F , 0)) AS AGE_60_2016
         , SUM(DECODE(YYYY , '2017' ,  A , 0)) AS AGE_19_2017
         , SUM(DECODE(YYYY , '2017' ,  B , 0)) AS AGE_20_2017
         , SUM(DECODE(YYYY , '2017' ,  C , 0)) AS AGE_30_2017
         , SUM(DECODE(YYYY , '2017' ,  D , 0)) AS AGE_40_2017
         , SUM(DECODE(YYYY , '2017' ,  E , 0)) AS AGE_50_2017
         , SUM(DECODE(YYYY , '2017' ,  F , 0)) AS AGE_60_2017    
	     , SUM(A) + SUM(B) + SUM(C) + SUM(D) + SUM(E)+ SUM(F) AS TOTAL
	  FROM( 
	        SELECT SUBSTR(A.FRST_CNTRCT_DE , 1 , 4) AS YYYY
	        	  ,(SELECT CODE_NM FROM TBCOM_CMMN_CODE B WHERE GRP_CODE = 'RNT004' AND CHRCTR_PREPAR_VALUE_1 = A.AREA_SE) AS AREA_SE
	              ,(CASE WHEN 19 >= FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(SFCOM_DEC_ALL(IHIDNUM),1,6))) / 12) THEN COUNT(*) ELSE 0 END) AS A 
	              ,(CASE WHEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(SFCOM_DEC_ALL(IHIDNUM),1,6))) / 12) BETWEEN 20 AND 29 THEN COUNT(*) ELSE 0 END) AS B
	              ,(CASE WHEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(SFCOM_DEC_ALL(IHIDNUM),1,6))) / 12) BETWEEN 30 AND 39 THEN COUNT(*) ELSE 0 END) AS C
	              ,(CASE WHEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(SFCOM_DEC_ALL(IHIDNUM),1,6))) / 12) BETWEEN 40 AND 49 THEN COUNT(*) ELSE 0 END) AS D
	              ,(CASE WHEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(SFCOM_DEC_ALL(IHIDNUM),1,6))) / 12) BETWEEN 50 AND 59 THEN COUNT(*) ELSE 0 END) AS E
	              ,(CASE WHEN 60 <![CDATA[  <= ]]>  FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(SFCOM_DEC_ALL(IHIDNUM),1,6))) / 12) THEN COUNT(*) ELSE 0 END) AS F
	          FROM TBRNT_LFSTS_CNTRCT A
	          JOIN TBRNT_LFSTS_CSTMR B ON A.LFSTS_CSTMR_NO = B.LFSTS_CSTMR_NO
	          JOIN TBRNT_LFSTS_HOUSE_CNTRCTR C ON A.CNTRCTR_NO = C.CNTRCTR_NO AND A.CNTRCT_CO = C.CNTRCTR_CO
	         WHERE 1=1
	           AND FRST_CNTRCT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# 
	           <isEqual property="CHK" compareValue="2">
	           AND NOT EXISTS (SELECT 1 
	                             FROM TBRNT_LFSTS_RESCI_TRMNAT Z 
	                            WHERE A.CNTRCTR_NO = Z.CNTRCTR_NO 
	                              AND A.CNTRCT_CO = Z.CNTRCTR_CO
	                              AND Z.RESCI_TRMNAT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# )
	           </isEqual>                 
	         GROUP BY SUBSTR(A.FRST_CNTRCT_DE , 1 , 4) , AREA_SE    , IHIDNUM  
	        )      
	  GROUP BY AREA_SE     
UNION ALL
	SELECT '전체' AREA_SE
         , SUM(DECODE(YYYY , '2013' ,  A , 0)) AS AGE_19_2013
         , SUM(DECODE(YYYY , '2013' ,  B , 0)) AS AGE_20_2013
         , SUM(DECODE(YYYY , '2013' ,  C , 0)) AS AGE_30_2013
         , SUM(DECODE(YYYY , '2013' ,  D , 0)) AS AGE_40_2013
         , SUM(DECODE(YYYY , '2013' ,  E , 0)) AS AGE_50_2013
         , SUM(DECODE(YYYY , '2013' ,  F , 0)) AS AGE_60_2013
         , SUM(DECODE(YYYY , '2014' ,  A , 0)) AS AGE_19_2014
         , SUM(DECODE(YYYY , '2014' ,  B , 0)) AS AGE_20_2014
         , SUM(DECODE(YYYY , '2014' ,  C , 0)) AS AGE_30_2014
         , SUM(DECODE(YYYY , '2014' ,  D , 0)) AS AGE_40_2014
         , SUM(DECODE(YYYY , '2014' ,  E , 0)) AS AGE_50_2014
         , SUM(DECODE(YYYY , '2014' ,  F , 0)) AS AGE_60_2014
         , SUM(DECODE(YYYY , '2015' ,  A , 0)) AS AGE_19_2015
         , SUM(DECODE(YYYY , '2015' ,  B , 0)) AS AGE_20_2015
         , SUM(DECODE(YYYY , '2015' ,  C , 0)) AS AGE_30_2015
         , SUM(DECODE(YYYY , '2015' ,  D , 0)) AS AGE_40_2015
         , SUM(DECODE(YYYY , '2015' ,  E , 0)) AS AGE_50_2015
         , SUM(DECODE(YYYY , '2015' ,  F , 0)) AS AGE_60_2015         
         , SUM(DECODE(YYYY , '2016' ,  A , 0)) AS AGE_19_2016
         , SUM(DECODE(YYYY , '2016' ,  B , 0)) AS AGE_20_2016
         , SUM(DECODE(YYYY , '2016' ,  C , 0)) AS AGE_30_2016
         , SUM(DECODE(YYYY , '2016' ,  D , 0)) AS AGE_40_2016
         , SUM(DECODE(YYYY , '2016' ,  E , 0)) AS AGE_50_2016
         , SUM(DECODE(YYYY , '2016' ,  F , 0)) AS AGE_60_2016
         , SUM(DECODE(YYYY , '2017' ,  A , 0)) AS AGE_19_2017
         , SUM(DECODE(YYYY , '2017' ,  B , 0)) AS AGE_20_2017
         , SUM(DECODE(YYYY , '2017' ,  C , 0)) AS AGE_30_2017
         , SUM(DECODE(YYYY , '2017' ,  D , 0)) AS AGE_40_2017
         , SUM(DECODE(YYYY , '2017' ,  E , 0)) AS AGE_50_2017
         , SUM(DECODE(YYYY , '2017' ,  F , 0)) AS AGE_60_2017                
	     , 0 AS TOTAL
	  FROM( 
	        SELECT SUBSTR(A.FRST_CNTRCT_DE , 1 , 4) AS YYYY
	        	  ,(SELECT CODE_NM FROM TBCOM_CMMN_CODE B WHERE GRP_CODE = 'RNT004' AND CHRCTR_PREPAR_VALUE_1 = A.AREA_SE) AS AREA_SE
	              ,(CASE WHEN 19 >= FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(SFCOM_DEC_ALL(IHIDNUM),1,6))) / 12) THEN COUNT(*) ELSE 0 END) AS A 
	              ,(CASE WHEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(SFCOM_DEC_ALL(IHIDNUM),1,6))) / 12) BETWEEN 20 AND 29 THEN COUNT(*) ELSE 0 END) AS B
	              ,(CASE WHEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(SFCOM_DEC_ALL(IHIDNUM),1,6))) / 12) BETWEEN 30 AND 39 THEN COUNT(*) ELSE 0 END) AS C
	              ,(CASE WHEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(SFCOM_DEC_ALL(IHIDNUM),1,6))) / 12) BETWEEN 40 AND 49 THEN COUNT(*) ELSE 0 END) AS D
	              ,(CASE WHEN FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(SFCOM_DEC_ALL(IHIDNUM),1,6))) / 12) BETWEEN 50 AND 59 THEN COUNT(*) ELSE 0 END) AS E
	              ,(CASE WHEN 60 <![CDATA[  <= ]]>  FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(SFCOM_DEC_ALL(IHIDNUM),1,6))) / 12) THEN COUNT(*) ELSE 0 END) AS F
	          FROM TBRNT_LFSTS_CNTRCT A
	          JOIN TBRNT_LFSTS_CSTMR B ON A.LFSTS_CSTMR_NO = B.LFSTS_CSTMR_NO
	          JOIN TBRNT_LFSTS_HOUSE_CNTRCTR C ON A.CNTRCTR_NO = C.CNTRCTR_NO AND A.CNTRCT_CO = C.CNTRCTR_CO
	         WHERE 1=1
	           AND FRST_CNTRCT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# 
	           <isEqual property="CHK" compareValue="2">
	           AND NOT EXISTS (SELECT 1 
	                             FROM TBRNT_LFSTS_RESCI_TRMNAT Z 
	                            WHERE A.CNTRCTR_NO = Z.CNTRCTR_NO 
	                              AND A.CNTRCT_CO = Z.CNTRCTR_CO
	                              AND Z.RESCI_TRMNAT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# )
	           </isEqual>                 
	         GROUP BY SUBSTR(A.FRST_CNTRCT_DE , 1 , 4) , AREA_SE    , IHIDNUM  
	        )      	  
	  
	  
	  <!--  ORDER BY 1-->	   
	   
	</select>
	
	<!-- 쿼리명 : 사업비
	설명 : 사업비
	수정일  수정자  수정내용
	작성자 : 이광원
	최초작성일 : 2016.10.05
	-->
	<select id="RNT030511DAO.getList2" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<!-- 
	SELECT 
	       SUM(DECODE(YYYY , '2013', A.SPORT_AMOUNT , 0)) AS SPORT_2013
	     , SUM(DECODE(YYYY , '2013' , A.RENT_ALOTM , 0)) AS RENT_2013
	     , MAX(DECODE(YYYY , '2013' , A.AVG_AMOUNT , 0)) AS AVG_2013
	     , SUM(DECODE(YYYY , '2014' , A.SPORT_AMOUNT , 0)) AS SPORT_2014
	     , SUM(DECODE(YYYY , '2014' , A.RENT_ALOTM , 0)) AS RENT_2014
	     , MAX(DECODE(YYYY , '2014' , A.AVG_AMOUNT , 0)) AS AVG_2014     
	     , SUM(DECODE(YYYY , '2015' , A.SPORT_AMOUNT , 0)) AS SPORT_2015
	     , SUM(DECODE(YYYY , '2015' , A.RENT_ALOTM , 0)) AS RENT_2015
	     , MAX(DECODE(YYYY , '2015' , A.AVG_AMOUNT , 0)) AS AVG_2015     
	     , SUM(DECODE(YYYY , '2016' , A.SPORT_AMOUNT , 0)) AS SPORT_2016
	     , SUM(DECODE(YYYY , '2016' , A.RENT_ALOTM , 0)) AS RENT_2016
	     , MAX(DECODE(YYYY , '2016' , A.AVG_AMOUNT , 0)) AS AVG_2016  
	     , MAX(B.AVG_AMOUNT) AS AVG_AMOUNT
	  FROM
	  (
	    SELECT SUBSTR(FRST_CNTRCT_DE , 1, 4) AS YYYY
	         , SUM(B.SPORT_AMOUNT) AS SPORT_AMOUNT
	         , SUM(B.RENT_ALOTM) AS RENT_ALOTM
	         , AVG(B.RENT_ALOTM + B.SPORT_AMOUNT) AS AVG_AMOUNT
	      FROM TBRNT_LFSTS_CNTRCT A
	      JOIN TBRNT_LFSTS_HOUSE_CNTRCTR B ON A.CNTRCTR_NO = B.CNTRCTR_NO AND A.CNTRCT_CO = B.CNTRCTR_CO
	     WHERE 1=1
	       AND FRST_CNTRCT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE#
           <isEqual property="CHK" compareValue="2">
           AND NOT EXISTS (SELECT 1 
                             FROM TBRNT_LFSTS_RESCI_TRMNAT Z 
                            WHERE A.CNTRCTR_NO = Z.CNTRCTR_NO 
                              AND A.CNTRCT_CO = Z.CNTRCTR_CO
                              AND Z.RESCI_TRMNAT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# )
           </isEqual>  	        
	     GROUP BY SUBSTR(FRST_CNTRCT_DE , 1, 4)
	   ) A
	   LEFT JOIN (SELECT AVG(B.RENT_ALOTM + B.SPORT_AMOUNT) AS AVG_AMOUNT
	                FROM TBRNT_LFSTS_CNTRCT A
	                JOIN TBRNT_LFSTS_HOUSE_CNTRCTR B ON A.CNTRCTR_NO = B.CNTRCTR_NO AND A.CNTRCT_CO = B.CNTRCTR_CO
	                WHERE 1=1
	                  AND FRST_CNTRCT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# 
			           <isEqual property="CHK" compareValue="2">
			           AND NOT EXISTS (SELECT 1 
			                             FROM TBRNT_LFSTS_RESCI_TRMNAT Z 
			                            WHERE A.CNTRCTR_NO = Z.CNTRCTR_NO 
			                              AND A.CNTRCT_CO = Z.CNTRCTR_CO
			                              AND Z.RESCI_TRMNAT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# )
			           </isEqual>  	                  	                  
	                  ) B ON 1=1
 -->	  
 SELECT   AREA_SE,
         SUM (DECODE (YYYY, '2013', A.CNT , 0)) AS CNT_2013,
         SUM (DECODE (YYYY, '2013', A.SPORT_AMOUNT, 0)) AS SPORT_2013,
         SUM (DECODE (YYYY, '2013', A.RENT_ALOTM, 0)) AS RENT_2013,
         MAX (DECODE (YYYY, '2013', A.AVG_AMOUNT, 0)) AS AVG_2013,
         SUM (DECODE (YYYY, '2014', A.CNT , 0)) AS CNT_2014,
         SUM (DECODE (YYYY, '2014', A.SPORT_AMOUNT, 0)) AS SPORT_2014,
         SUM (DECODE (YYYY, '2014', A.RENT_ALOTM, 0)) AS RENT_2014,
         MAX (DECODE (YYYY, '2014', A.AVG_AMOUNT, 0)) AS AVG_2014,
         SUM (DECODE (YYYY, '2015', A.CNT , 0)) AS CNT_2015,         
         SUM (DECODE (YYYY, '2015', A.SPORT_AMOUNT, 0)) AS SPORT_2015,
         SUM (DECODE (YYYY, '2015', A.RENT_ALOTM, 0)) AS RENT_2015,
         MAX (DECODE (YYYY, '2015', A.AVG_AMOUNT, 0)) AS AVG_2015,
         SUM (DECODE (YYYY, '2016', A.CNT , 0)) AS CNT_2016,         
         SUM (DECODE (YYYY, '2016', A.SPORT_AMOUNT, 0)) AS SPORT_2016,
         SUM (DECODE (YYYY, '2016', A.RENT_ALOTM, 0)) AS RENT_2016,
         MAX (DECODE (YYYY, '2016', A.AVG_AMOUNT, 0)) AS AVG_2016,
         SUM (DECODE (YYYY, '2017', A.CNT , 0)) AS CNT_2017,         
         SUM (DECODE (YYYY, '2017', A.SPORT_AMOUNT, 0)) AS SPORT_2017,
         SUM (DECODE (YYYY, '2017', A.RENT_ALOTM, 0)) AS RENT_2017,
         MAX (DECODE (YYYY, '2017', A.AVG_AMOUNT, 0)) AS AVG_2017,
         MAX (B.AVG_AMOUNT) AS AVG_AMOUNT,
         MAX (B.CNT) AS TOT_CNT
  FROM      (  SELECT   (SELECT CODE_NM FROM TBCOM_CMMN_CODE WHERE GRP_CODE = 'RNT004' AND CHRCTR_PREPAR_VALUE_1 = A.AREA_SE) AS AREA_SE,
                        SUBSTR (FRST_CNTRCT_DE, 1, 4) AS YYYY,
                        SUM (B.SPORT_AMOUNT) AS SPORT_AMOUNT,
                        SUM (B.RENT_ALOTM) AS RENT_ALOTM,
                        AVG (B.RENT_ALOTM + B.SPORT_AMOUNT) AS AVG_AMOUNT,
                        COUNT(*) AS CNT
                 FROM      TBRNT_LFSTS_CNTRCT A
                        JOIN
                           TBRNT_LFSTS_HOUSE_CNTRCTR B
                        ON A.CNTRCTR_NO = B.CNTRCTR_NO
                           AND A.CNTRCT_CO = B.CNTRCTR_CO
                WHERE   1 = 1
                        AND FRST_CNTRCT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE#
                       <isEqual property="CHK" compareValue="2">
                       AND NOT EXISTS (SELECT 1 
                                         FROM TBRNT_LFSTS_RESCI_TRMNAT Z 
                                        WHERE A.CNTRCTR_NO = Z.CNTRCTR_NO 
                                          AND A.CNTRCT_CO = Z.CNTRCTR_CO
                                          AND Z.RESCI_TRMNAT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# )
                       </isEqual>                               
             GROUP BY   AREA_SE , SUBSTR (FRST_CNTRCT_DE, 1, 4)) A
         LEFT JOIN
            (SELECT   COUNT(*) AS CNT , AVG (B.RENT_ALOTM + B.SPORT_AMOUNT) AS AVG_AMOUNT
               FROM      TBRNT_LFSTS_CNTRCT A
                      JOIN
                         TBRNT_LFSTS_HOUSE_CNTRCTR B
                      ON A.CNTRCTR_NO = B.CNTRCTR_NO
                         AND A.CNTRCT_CO = B.CNTRCTR_CO
              WHERE   1 = 1
                      AND FRST_CNTRCT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE#
                      <isEqual property="CHK" compareValue="2">
                      AND NOT EXISTS (SELECT 1 
                                        FROM TBRNT_LFSTS_RESCI_TRMNAT Z 
                                       WHERE A.CNTRCTR_NO = Z.CNTRCTR_NO 
                                         AND A.CNTRCT_CO = Z.CNTRCTR_CO
                                         AND Z.RESCI_TRMNAT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# )
                      </isEqual>                             
                      ) B
         ON 1 = 1
 GROUP BY AREA_SE
UNION ALL
SELECT   '' AS AREA_SE,
         SUM (DECODE (YYYY, '2013', A.CNT , 0)) AS CNT_2013,
         SUM (DECODE (YYYY, '2013', A.SPORT_AMOUNT, 0)) AS SPORT_2013,
         SUM (DECODE (YYYY, '2013', A.RENT_ALOTM, 0)) AS RENT_2013,
         MAX (DECODE (YYYY, '2013', A.AVG_AMOUNT, 0)) AS AVG_2013,
         SUM (DECODE (YYYY, '2014', A.CNT , 0)) AS CNT_2014,
         SUM (DECODE (YYYY, '2014', A.SPORT_AMOUNT, 0)) AS SPORT_2014,
         SUM (DECODE (YYYY, '2014', A.RENT_ALOTM, 0)) AS RENT_2014,
         MAX (DECODE (YYYY, '2014', A.AVG_AMOUNT, 0)) AS AVG_2014,
         SUM (DECODE (YYYY, '2015', A.CNT , 0)) AS CNT_2015,         
         SUM (DECODE (YYYY, '2015', A.SPORT_AMOUNT, 0)) AS SPORT_2015,
         SUM (DECODE (YYYY, '2015', A.RENT_ALOTM, 0)) AS RENT_2015,
         MAX (DECODE (YYYY, '2015', A.AVG_AMOUNT, 0)) AS AVG_2015,
         SUM (DECODE (YYYY, '2016', A.CNT , 0)) AS CNT_2016,         
         SUM (DECODE (YYYY, '2016', A.SPORT_AMOUNT, 0)) AS SPORT_2016,
         SUM (DECODE (YYYY, '2016', A.RENT_ALOTM, 0)) AS RENT_2016,
         MAX (DECODE (YYYY, '2016', A.AVG_AMOUNT, 0)) AS AVG_2016,
         SUM (DECODE (YYYY, '2017', A.CNT , 0)) AS CNT_2017,         
         SUM (DECODE (YYYY, '2017', A.SPORT_AMOUNT, 0)) AS SPORT_2017,
         SUM (DECODE (YYYY, '2017', A.RENT_ALOTM, 0)) AS RENT_2017,
         MAX (DECODE (YYYY, '2017', A.AVG_AMOUNT, 0)) AS AVG_2017,         
         MAX (B.AVG_AMOUNT) AS AVG_AMOUNT,
         MAX (B.CNT) AS TOT_CNT
  FROM      (  SELECT   SUBSTR (FRST_CNTRCT_DE, 1, 4) AS YYYY,
                        SUM (B.SPORT_AMOUNT) AS SPORT_AMOUNT,
                        SUM (B.RENT_ALOTM) AS RENT_ALOTM,
                        AVG (B.RENT_ALOTM + B.SPORT_AMOUNT) AS AVG_AMOUNT,
                        COUNT(*) AS CNT
                 FROM      TBRNT_LFSTS_CNTRCT A
                        JOIN
                           TBRNT_LFSTS_HOUSE_CNTRCTR B
                        ON A.CNTRCTR_NO = B.CNTRCTR_NO
                           AND A.CNTRCT_CO = B.CNTRCTR_CO
                WHERE   1 = 1
                        AND FRST_CNTRCT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE#
                        <isEqual property="CHK" compareValue="2">
                        AND NOT EXISTS (SELECT 1 
                                          FROM TBRNT_LFSTS_RESCI_TRMNAT Z 
                                         WHERE A.CNTRCTR_NO = Z.CNTRCTR_NO 
                                           AND A.CNTRCT_CO = Z.CNTRCTR_CO
                                           AND Z.RESCI_TRMNAT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# )
                        </isEqual>                          
             GROUP BY   AREA_SE , SUBSTR (FRST_CNTRCT_DE, 1, 4)) A
         LEFT JOIN
            (SELECT   COUNT(*) AS CNT , AVG (B.RENT_ALOTM + B.SPORT_AMOUNT) AS AVG_AMOUNT
               FROM      TBRNT_LFSTS_CNTRCT A
                      JOIN
                         TBRNT_LFSTS_HOUSE_CNTRCTR B
                      ON A.CNTRCTR_NO = B.CNTRCTR_NO
                         AND A.CNTRCT_CO = B.CNTRCTR_CO
              WHERE   1 = 1
                      AND FRST_CNTRCT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE#
                      <isEqual property="CHK" compareValue="2">
                      AND NOT EXISTS (SELECT 1 
                                        FROM TBRNT_LFSTS_RESCI_TRMNAT Z 
                                       WHERE A.CNTRCTR_NO = Z.CNTRCTR_NO 
                                         AND A.CNTRCT_CO = Z.CNTRCTR_CO
                                         AND Z.RESCI_TRMNAT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# )
                      </isEqual>                        
                      ) B
         ON 1 = 1
 ORDER BY AREA_SE          
                 	                  
	</select>
	
	
	<!-- 쿼리명 : 평균소득
	설명 : 평균소득
	수정일  수정자  수정내용
	작성자 : 이광원
	최초작성일 : 2016.10.05
	-->
    <select id="RNT030511DAO.getList3" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
<!-- 
SELECT MAX(DECODE(CHRCTR_PREPAR_VALUE_0 , 0 , '생계, 의료수급자(중위소득40%이하)' , 2 , '월평균소득50%이하' , '기타(대학생3순위, 신혼부부70% 등)' )) AS CODE_NM
     , MAX(DECODE(YYYY , '2013' , CNT , 0)) AS CODE_2013
     , MAX(DECODE(YYYY , '2014' , CNT , 0)) AS CODE_2014
     , MAX(DECODE(YYYY , '2015' , CNT , 0)) AS CODE_2015
     , MAX(DECODE(YYYY , '2016' , CNT , 0)) AS CODE_2016
     , SUM(CNT) AS TOT
  FROM
  (
     SELECT  CHRCTR_PREPAR_VALUE_0
           , SUBSTR(FRST_CNTRCT_DE , 1 , 4) AS YYYY
           , COUNT(*) AS  CNT
       FROM TBRNT_LFSTS_CNTRCT A
       JOIN TBCOM_CMMN_CODE B ON A.QUALF_SE = B.CODE
      WHERE B.GRP_CODE = 'RNT001'
        AND A.FRST_CNTRCT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE#
        <isEqual property="CHK" compareValue="2">
        AND NOT EXISTS (SELECT 1 
                          FROM TBRNT_LFSTS_RESCI_TRMNAT Z 
                         WHERE A.CNTRCTR_NO = Z.CNTRCTR_NO 
                           AND A.CNTRCT_CO = Z.CNTRCTR_CO
                           AND Z.RESCI_TRMNAT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# )
        </isEqual>           
     GROUP BY CHRCTR_PREPAR_VALUE_0 , SUBSTR(FRST_CNTRCT_DE , 1 , 4)
     ORDER BY YYYY     
   )   
   GROUP BY CHRCTR_PREPAR_VALUE_0
   ORDER BY CHRCTR_PREPAR_VALUE_0
 -->   
   
SELECT AREA_SE
     , SUM(DECODE(YYYY , '2013' , CNT1 , 0)) AS CODE1_2013
     , SUM(DECODE(YYYY , '2013' , CNT2 , 0)) AS CODE2_2013
     , SUM(DECODE(YYYY , '2013' , CNT3 , 0)) AS CODE3_2013
     , SUM(DECODE(YYYY , '2014' , CNT1 , 0)) AS CODE1_2014
     , SUM(DECODE(YYYY , '2014' , CNT2 , 0)) AS CODE2_2014
     , SUM(DECODE(YYYY , '2014' , CNT3 , 0)) AS CODE3_2014
     , SUM(DECODE(YYYY , '2015' , CNT1 , 0)) AS CODE1_2015
     , SUM(DECODE(YYYY , '2015' , CNT2 , 0)) AS CODE2_2015
     , SUM(DECODE(YYYY , '2015' , CNT3 , 0)) AS CODE3_2015
     , SUM(DECODE(YYYY , '2016' , CNT1 , 0)) AS CODE1_2016
     , SUM(DECODE(YYYY , '2016' , CNT2 , 0)) AS CODE2_2016
     , SUM(DECODE(YYYY , '2016' , CNT3 , 0)) AS CODE3_2016
     , SUM(DECODE(YYYY , '2017' , CNT1 , 0)) AS CODE1_2017
     , SUM(DECODE(YYYY , '2017' , CNT2 , 0)) AS CODE2_2017
     , SUM(DECODE(YYYY , '2017' , CNT3 , 0)) AS CODE3_2017       
     , SUM(CNT1) AS TOT_CODE1
     , SUM(CNT2) AS TOT_CODE2
     , SUM(CNT3) AS TOT_CODE3
  FROM
  (
     SELECT  (SELECT CODE_NM FROM TBCOM_CMMN_CODE B WHERE GRP_CODE = 'RNT004' AND CHRCTR_PREPAR_VALUE_1 = A.AREA_SE) AS AREA_SE
           , SUBSTR(FRST_CNTRCT_DE , 1 , 4) AS YYYY
           , DECODE(CHRCTR_PREPAR_VALUE_0 , '0' , SUM(1) , '0') AS CNT1
           , DECODE(CHRCTR_PREPAR_VALUE_0 , '2' , SUM(1) , '0') AS CNT2 
           , DECODE(CHRCTR_PREPAR_VALUE_0 , '0' , '0' , '2', '0' , SUM(1)) AS CNT3
       FROM TBRNT_LFSTS_CNTRCT A
       JOIN TBCOM_CMMN_CODE B ON A.QUALF_SE = B.CODE
      WHERE B.GRP_CODE = 'RNT001'
        AND A.FRST_CNTRCT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE#
        <isEqual property="CHK" compareValue="2">
        AND NOT EXISTS (SELECT 1 
                          FROM TBRNT_LFSTS_RESCI_TRMNAT Z 
                         WHERE A.CNTRCTR_NO = Z.CNTRCTR_NO 
                           AND A.CNTRCT_CO = Z.CNTRCTR_CO
                           AND Z.RESCI_TRMNAT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# )
        </isEqual>   
     GROUP BY CHRCTR_PREPAR_VALUE_0 , SUBSTR(FRST_CNTRCT_DE , 1 , 4) , AREA_SE
   )   
   GROUP BY AREA_SE
UNION ALL
SELECT '전체' AREA_SE
     , SUM(DECODE(YYYY , '2013' , CNT1 , 0)) AS CODE1_2013
     , SUM(DECODE(YYYY , '2013' , CNT2 , 0)) AS CODE2_2013
     , SUM(DECODE(YYYY , '2013' , CNT3 , 0)) AS CODE3_2013
     , SUM(DECODE(YYYY , '2014' , CNT1 , 0)) AS CODE1_2014
     , SUM(DECODE(YYYY , '2014' , CNT2 , 0)) AS CODE2_2014
     , SUM(DECODE(YYYY , '2014' , CNT3 , 0)) AS CODE3_2014
     , SUM(DECODE(YYYY , '2015' , CNT1 , 0)) AS CODE1_2015
     , SUM(DECODE(YYYY , '2015' , CNT2 , 0)) AS CODE2_2015
     , SUM(DECODE(YYYY , '2015' , CNT3 , 0)) AS CODE3_2015
     , SUM(DECODE(YYYY , '2016' , CNT1 , 0)) AS CODE1_2016
     , SUM(DECODE(YYYY , '2016' , CNT2 , 0)) AS CODE2_2016
     , SUM(DECODE(YYYY , '2016' , CNT3 , 0)) AS CODE3_2016
     , SUM(DECODE(YYYY , '2017' , CNT1 , 0)) AS CODE1_2017
     , SUM(DECODE(YYYY , '2017' , CNT2 , 0)) AS CODE2_2017
     , SUM(DECODE(YYYY , '2017' , CNT3 , 0)) AS CODE3_2017       
     , 0 AS TOT_CODE1
     , 0 AS TOT_CODE2
     , 0 AS TOT_CODE3
  FROM
  (
     SELECT  (SELECT CODE_NM FROM TBCOM_CMMN_CODE B WHERE GRP_CODE = 'RNT004' AND CHRCTR_PREPAR_VALUE_1 = A.AREA_SE) AS AREA_SE
           , SUBSTR(FRST_CNTRCT_DE , 1 , 4) AS YYYY
           , DECODE(CHRCTR_PREPAR_VALUE_0 , '0' , SUM(1) , '0') AS CNT1
           , DECODE(CHRCTR_PREPAR_VALUE_0 , '2' , SUM(1) , '0') AS CNT2 
           , DECODE(CHRCTR_PREPAR_VALUE_0 , '0' , '0' , '2', '0' , SUM(1)) AS CNT3
       FROM TBRNT_LFSTS_CNTRCT A
       JOIN TBCOM_CMMN_CODE B ON A.QUALF_SE = B.CODE
      WHERE B.GRP_CODE = 'RNT001'
        AND A.FRST_CNTRCT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE#
        <isEqual property="CHK" compareValue="2">
        AND NOT EXISTS (SELECT 1 
                          FROM TBRNT_LFSTS_RESCI_TRMNAT Z 
                         WHERE A.CNTRCTR_NO = Z.CNTRCTR_NO 
                           AND A.CNTRCT_CO = Z.CNTRCTR_CO
                           AND Z.RESCI_TRMNAT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# )
        </isEqual>   
     GROUP BY CHRCTR_PREPAR_VALUE_0 , SUBSTR(FRST_CNTRCT_DE , 1 , 4) , AREA_SE
   )         
       
    </select>
	  
	<!-- 쿼리명 : 지원금차액
	설명 : 지원금차액
	수정일  수정자  수정내용
	작성자 : 이광원
	최초작성일 : 2016.11.05
	-->
    <select id="RNT030511DAO.getList4" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
  SELECT   TLC.CNTRCTR_NO,
           TLC.CNTRCT_CO,
           TLC.AREA_SE,
           TLC.DONG,
           TLC.HO,
           TLC.LFSTS_CSTMR_NO,
           TLC.FRST_CNTRCT_DE,
           TLC.CNTRCT_CO,
           TLC.QUALF_SE,
           TLC.FAMILY_CO,
           TLC.ZIP_DM,
           TLC.ADRES_DM,
           TLC.ADRES_DETAIL_DM,
           TLC.HOUSE_POSESN_AT,
           TLC.LAD_POSESN_AT,
           TLC.BILD_POSESN_AT,
           TLC.CAR_POSESN_AT,
           TLC.BEFORE_ADRES,
           TLC.SCRT_INFO_EXAMIN_ID,
           TLC.RM,
           TLHC.RNTCHRG + TLHC.RSVMNEY AS SUM,
           TLC.REGISTER_ID,
           TLC.REGIST_DT,
           TLC.UPDUSR_ID,
           TLC.UPDT_DT,
           TLHC.DCSN_DE,
           TLHC.CNTRCT_DE,
           TLHC.TRNSFRN_DE,
           TLHC.CDIT_PRESV_MTHD,
           TLHC.CNTRCTR_CO,
           TLHC.HOUSE_KND,
           TLHC.ZIP AS ZIP_HOUSE,
           TLHC.ADRES AS ADRES_HOUSE,
           TLHC.ADRES_DETAIL AS ADRES_DETAIL_HOUSE,
           TLHC.HEAT_SE,
           TLHC.FLOOR_SE,
           TLHC.AR,
           TLHC.ALL_ROOM_CO,
           TLHC.RENT_ROOM_CO,
           TLHC.SPORT_BGNDE,
           TLHC.SPORT_ENDDE,
           TLHC.LFSTS_AMOUNT,
           TLHC.SPORT_AMOUNT,
           TLHC.RENT_ALOTM,
           TLHC.ADIT_ALOTM,
           TLHC.RNTCHRG,
           TLHC.RSVMNEY,
           TLRC.NM,
           SFCOM_DEC_ALL (TLRC.IHIDNUM) AS IHIDNUM,
           TLRC.ZIP,
           TLRC.ADRES,
           TLRC.ADRES_DETAIL,
           TLRC.TELNO,
           TLRC.MBTLNO,
           TLHC.BILDNG_STRCT,
           Z.SPORT_AMOUNT AS OLD_SPORT_AMOUNT,
           TLHC.SPORT_AMOUNT - Z.SPORT_AMOUNT AS CHA_AMT,
           (SELECT   RESCI_TRMNAT_DE
              FROM   TBRNT_LFSTS_RESCI_TRMNAT Z
             WHERE   TLC.CNTRCTR_NO = Z.CNTRCTR_NO
                     AND TLC.CNTRCT_CO = Z.CNTRCTR_CO)
              AS RESCI_TRMNAT_DE
    FROM   TBRNT_LFSTS_CNTRCT TLC,
           TBRNT_LFSTS_CSTMR TLRC,
           TBRNT_LFSTS_HOUSE_CNTRCTR TLHC,
           (SELECT CNTRCTR_NO , CNTRCTR_CO , SPORT_AMOUNT
              FROM TBRNT_LFSTS_HOUSE_CNTRCTR A
             WHERE 1=1   
               AND A.CNTRCTR_NO||A.CNTRCTR_CO IN (SELECT CNTRCTR_NO||CNTRCTR_CO - 1
                                                     FROM TBRNT_LFSTS_HOUSE_CNTRCTR A
                                                    WHERE 1=1   
                                                      AND A.SPORT_BGNDE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE#
                                                      AND A.CNTRCTR_CO >= 1
                                                      AND A.CNTRCTR_NO IN (SELECT CNTRCTR_NO FROM TBRNT_LFSTS_CNTRCT Z WHERE A.CNTRCTR_NO = Z.CNTRCTR_NO AND A.CNTRCTR_CO = Z.CNTRCT_CO))) Z           
     WHERE TLC.LFSTS_CSTMR_NO = TLRC.LFSTS_CSTMR_NO
       AND TLC.CNTRCTR_NO = TLHC.CNTRCTR_NO
       AND TLC.CNTRCT_CO = TLHC.CNTRCTR_CO
       AND TLC.CNTRCTR_NO = Z.CNTRCTR_NO
       AND TLHC.SPORT_AMOUNT != Z.SPORT_AMOUNT
       <isEqual property="CHK" compareValue="2">
       AND NOT EXISTS (SELECT 1 
                         FROM TBRNT_LFSTS_RESCI_TRMNAT Z 
                        WHERE TLC.CNTRCTR_NO = Z.CNTRCTR_NO 
                          AND TLC.CNTRCT_CO = Z.CNTRCTR_CO
                          AND Z.RESCI_TRMNAT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# )
       </isEqual>    
    </select>

	<!-- 쿼리명 : 지원금현황
	설명 : 지원금현황
	수정일  수정자  수정내용
	작성자 : 이광원
	최초작성일 : 2016.12.14
	-->
    <select id="RNT030511DAO.getList5" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
SELECT B.CNTRCTR_NO,
     M.CODE_NM AS AREA_NM, B.DONG , B.HO
     , A.NM
     , C.ADRES || C.ADRES_DETAIL AS ADRES
     , B.FRST_CNTRCT_DE
     , B.RE_CNTRCT_CO
     , (SELECT H.RESCI_TRMNAT_DE FROM TBRNT_LFSTS_RESCI_TRMNAT H WHERE H.CNTRCTR_NO = B.CNTRCTR_NO AND H.CNTRCTR_CO = B.CNTRCT_CO) AS RESCI_TRMNAT_DE
     , S.JREM_AMT 
     , S.SPORT_AMT1 , S.RETURN_AMT1 , S.OVER_AMT1 , S.JREM_AMT1 
     , S.SPORT_AMT2 , S.RETURN_AMT2 , S.OVER_AMT2 , S.JREM_AMT2 
     , S.SPORT_AMT3 , S.RETURN_AMT3 , S.OVER_AMT3 , S.JREM_AMT3 
     , S.SPORT_AMT4 , S.RETURN_AMT4 , S.OVER_AMT4 , S.JREM_AMT4                         
  FROM TBRNT_LFSTS_CSTMR A
     , TBRNT_LFSTS_CNTRCT B
     , (SELECT CHRCTR_PREPAR_VALUE_1 AREA_SE, CODE_NM FROM TBCOM_CMMN_CODE WHERE GRP_CODE = 'RNT004') M
     , TBRNT_LFSTS_HOUSE_CNTRCTR C
     , (
        SELECT CNTRCTR_NO
             , JREM_AMT, SPORT_AMT1, RETURN_AMT1, OVER_AMT1                              
             , (JREM_AMT + SPORT_AMT1) - RETURN_AMT1 AS JREM_AMT1     
             , SPORT_AMT2, RETURN_AMT2, OVER_AMT2
             , (JREM_AMT + SPORT_AMT1 + SPORT_AMT2) - (RETURN_AMT1 + RETURN_AMT2) AS JREM_AMT2    
             , SPORT_AMT3, RETURN_AMT3, OVER_AMT3
             , (JREM_AMT + SPORT_AMT1 + SPORT_AMT2 + SPORT_AMT3) - (RETURN_AMT1 + RETURN_AMT2 + RETURN_AMT3) AS JREM_AMT3     
             , SPORT_AMT4, RETURN_AMT4, OVER_AMT4
             , (JREM_AMT + SPORT_AMT1 + SPORT_AMT2 + SPORT_AMT3 + SPORT_AMT4) - (RETURN_AMT1 + RETURN_AMT2 + RETURN_AMT3 + RETURN_AMT4) AS JREM_AMT4
          FROM (
                SELECT CNTRCTR_NO
                     , SUM(JSPORT_AMT)  AS JSPORT_AMT
                     , SUM(JRETURN_AMT) AS JRETURN_AMT
                     , CASE WHEN SUM(JSPORT_AMT) - SUM(JRETURN_AMT) <![CDATA[  <]]> 0 THEN 0 
                            ELSE SUM(JSPORT_AMT) - SUM(JRETURN_AMT)      
                            END  AS JREM_AMT
                     , SUM(SPORT_AMT1)  AS SPORT_AMT1
                     , SUM(RETURN_AMT1) AS RETURN_AMT1
                     , SUM(OVER_AMT1)   AS OVER_AMT1 
                     , SUM(SPORT_AMT2)  AS SPORT_AMT2
                     , SUM(RETURN_AMT2) AS RETURN_AMT2
                     , SUM(OVER_AMT2)   AS OVER_AMT2
                     , SUM(SPORT_AMT3)  AS SPORT_AMT3
                     , SUM(RETURN_AMT3) AS RETURN_AMT3
                     , SUM(OVER_AMT3)   AS OVER_AMT3
                     , SUM(SPORT_AMT4)  AS SPORT_AMT4
                     , SUM(RETURN_AMT4) AS RETURN_AMT4
                     , SUM(OVER_AMT4)   AS OVER_AMT4
                  FROM (          
                        SELECT CNTRCTR_NO 
                             , SUM((CASE WHEN SPORT_BYM <![CDATA[  < ]]> #STD_YEAR# || '01' THEN NVL(SPORT_AMT,0) ELSE 0 END))  AS JSPORT_AMT   
                             , 0 AS JRETURN_AMT
                             , 0 AS JREM_AMT
                             , SUM((CASE WHEN SPORT_BYM BETWEEN #STD_YEAR# || '01' AND #STD_YEAR# || '03' THEN NVL(SPORT_AMT,0) ELSE 0 END)) AS SPORT_AMT1     
                             , 0 AS RETURN_AMT1                       
                             , SUM((CASE WHEN SPORT_BYM BETWEEN #STD_YEAR# || '04' AND #STD_YEAR# || '06' THEN NVL(SPORT_AMT,0) ELSE 0 END)) AS SPORT_AMT2     
                             , 0 AS RETURN_AMT2
                             , SUM((CASE WHEN SPORT_BYM BETWEEN #STD_YEAR# || '07' AND #STD_YEAR# || '09' THEN NVL(SPORT_AMT,0) ELSE 0 END)) AS SPORT_AMT3     
                             , 0 AS RETURN_AMT3
                             , SUM((CASE WHEN SPORT_BYM BETWEEN #STD_YEAR# || '10' AND #STD_YEAR# || '12' THEN NVL(SPORT_AMT,0) ELSE 0 END)) AS SPORT_AMT4     
                             , 0 AS RETURN_AMT4
                             , 0 AS OVER_AMT1
                             , 0 AS OVER_AMT2
                             , 0 AS OVER_AMT3
                             , 0 AS OVER_AMT4
                          FROM VIRNT_LFSTS_SUPORT               
                         GROUP BY CNTRCTR_NO
                         UNION ALL
                         SELECT CNTRCTR_NO 
                             , 0  AS JSPORT_AMT   
                             , SUM((CASE WHEN RETURN_YM <![CDATA[  < ]]> #STD_YEAR# || '01' THEN NVL(RETURN_AMT,0) ELSE 0 END)) AS JRETURN_AMT
                             , 0 AS JREM_AMT
                             , 0 AS SPORT_AMT1     
                             , SUM((CASE WHEN RETURN_YM BETWEEN #STD_YEAR# || '01' AND #STD_YEAR# || '03' THEN NVL(RETURN_AMT,0) ELSE 0 END)) AS RETURN_AMT1                       
                             , 0 AS SPORT_AMT2     
                             , SUM((CASE WHEN RETURN_YM BETWEEN #STD_YEAR# || '04' AND #STD_YEAR# || '06' THEN NVL(RETURN_AMT,0) ELSE 0 END)) AS RETURN_AMT2
                             , 0 AS SPORT_AMT3     
                             , SUM((CASE WHEN RETURN_YM BETWEEN #STD_YEAR# || '07' AND #STD_YEAR# || '09' THEN NVL(RETURN_AMT,0) ELSE 0 END)) AS RETURN_AMT3
                             , 0 AS SPORT_AMT4     
                             , SUM((CASE WHEN RETURN_YM BETWEEN #STD_YEAR# || '10' AND #STD_YEAR# || '12' THEN NVL(RETURN_AMT,0) ELSE 0 END)) AS RETURN_AMT4
                             , SUM(CASE WHEN RETURN_YM BETWEEN #STD_YEAR# || '01' AND #STD_YEAR# || '03' THEN NVL(ADD_AMT,0) ELSE 0 END) AS OVER_AMT1
                             , SUM(CASE WHEN RETURN_YM BETWEEN #STD_YEAR# || '04' AND #STD_YEAR# || '06' THEN NVL(ADD_AMT,0) ELSE 0 END) AS OVER_AMT2
                             , SUM(CASE WHEN RETURN_YM BETWEEN #STD_YEAR# || '07' AND #STD_YEAR# || '09' THEN NVL(ADD_AMT,0) ELSE 0 END) AS OVER_AMT3
                             , SUM(CASE WHEN RETURN_YM BETWEEN #STD_YEAR# || '10' AND #STD_YEAR# || '12' THEN NVL(ADD_AMT,0) ELSE 0 END) AS OVER_AMT4
                          FROM VIRNT_LFSTS_RETURN               
                         GROUP BY CNTRCTR_NO
                     )
                 GROUP BY CNTRCTR_NO        
               )
       ) S
 WHERE A.LFSTS_CSTMR_NO = B.LFSTS_CSTMR_NO
   AND B.CNTRCTR_NO = C.CNTRCTR_NO(+)
   AND B.CNTRCT_CO = C.CNTRCTR_CO(+)
   AND B.CNTRCTR_NO = S.CNTRCTR_NO(+)
   AND B.AREA_SE = M.AREA_SE 
 ORDER BY B.DONG , B.HO 
    </select>	

	<!-- 쿼리명 : 전세지원금 수준
	설명 : 전세지원금 수준
	수정일  수정자  수정내용
	작성자 : 이광원
	최초작성일 : 2017.01.12
	-->
    <select id="RNT030511DAO.getList6" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
  SELECT   SUM((CASE WHEN TLHC.SPORT_AMOUNT <![CDATA[  <= ]]> 30000000 THEN 1 ELSE 0 END)) AS A  
         , SUM((CASE WHEN TLHC.SPORT_AMOUNT > 30000000 AND TLHC.SPORT_AMOUNT <![CDATA[  <= ]]> 40000000 THEN 1 ELSE 0 END)) AS B
         , SUM((CASE WHEN TLHC.SPORT_AMOUNT > 40000000 AND TLHC.SPORT_AMOUNT <![CDATA[  <= ]]> 50000000 THEN 1 ELSE 0 END)) AS C
         , SUM((CASE WHEN TLHC.SPORT_AMOUNT > 50000000 AND TLHC.SPORT_AMOUNT <![CDATA[  <= ]]> 60000000 THEN 1 ELSE 0 END)) AS D
         , SUM((CASE WHEN TLHC.SPORT_AMOUNT > 60000000 AND TLHC.SPORT_AMOUNT <![CDATA[  <= ]]> 70000000 THEN 1 ELSE 0 END)) AS E
         , COUNT(*) AS TOT
    FROM   TBRNT_LFSTS_CNTRCT TLC,
           TBRNT_LFSTS_CSTMR TLRC,
           TBRNT_LFSTS_HOUSE_CNTRCTR TLHC
   WHERE       TLC.LFSTS_CSTMR_NO = TLRC.LFSTS_CSTMR_NO
           AND TLC.CNTRCTR_NO = TLHC.CNTRCTR_NO
           AND TLC.CNTRCT_CO = TLHC.CNTRCTR_CO
       <isEqual property="CHK" compareValue="2">
       AND NOT EXISTS (SELECT 1 
                         FROM TBRNT_LFSTS_RESCI_TRMNAT Z 
                        WHERE TLC.CNTRCTR_NO = Z.CNTRCTR_NO 
                          AND TLC.CNTRCT_CO = Z.CNTRCTR_CO
                          AND Z.RESCI_TRMNAT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# )
       </isEqual>    
           AND TLC.FRST_CNTRCT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE#    
    </select>
	
	<!-- 쿼리명 : 전세주택유형
	설명 : 전세주택유형
	수정일  수정자  수정내용
	작성자 : 이광원
	최초작성일 : 2017.01.12
	-->
    <select id="RNT030511DAO.getList7" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
SELECT SUM((CASE WHEN HOUSE_KND = '01' THEN 1 ELSE 0 END)) AS A 
     , SUM((CASE WHEN HOUSE_KND = '02' THEN 1 ELSE 0 END)) AS B
     , SUM((CASE WHEN HOUSE_KND = '03' THEN 1 ELSE 0 END)) AS C
     , SUM((CASE WHEN HOUSE_KND = '04' THEN 1 ELSE 0 END)) AS D
     , SUM((CASE WHEN HOUSE_KND = '05' THEN 1 ELSE 0 END)) AS E
     , SUM((CASE WHEN HOUSE_KND = '06' THEN 1 ELSE 0 END)) AS F
     , COUNT(*) AS TOT
    FROM   TBRNT_LFSTS_CNTRCT TLC,
           TBRNT_LFSTS_CSTMR TLRC,
           TBRNT_LFSTS_HOUSE_CNTRCTR TLHC
   WHERE       TLC.LFSTS_CSTMR_NO = TLRC.LFSTS_CSTMR_NO
           AND TLC.CNTRCTR_NO = TLHC.CNTRCTR_NO
           AND TLC.CNTRCT_CO = TLHC.CNTRCTR_CO
       <isEqual property="CHK" compareValue="2">
       AND NOT EXISTS (SELECT 1 
                         FROM TBRNT_LFSTS_RESCI_TRMNAT Z 
                        WHERE TLC.CNTRCTR_NO = Z.CNTRCTR_NO 
                          AND TLC.CNTRCT_CO = Z.CNTRCTR_CO
                          AND Z.RESCI_TRMNAT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE# )
       </isEqual>    
           AND TLC.FRST_CNTRCT_DE BETWEEN #ST_CNTRCT_DE# AND #ED_CNTRCT_DE#    
ORDER BY   TLHC.HOUSE_KND 
    </select>	
	
	
</sqlMap>